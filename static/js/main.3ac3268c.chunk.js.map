{"version":3,"sources":["api.ts","appConstants.ts","components/CountryPage/SvgMap.tsx","components/CountryPage/Navbar.tsx","components/ToolTip.tsx","components/CountryPage/RegionTooltip.tsx","components/CountryPage/UnderConstruction.tsx","components/CountryPage/index.tsx","components/Toolbar.tsx","components/SearchGeoObjectsDialog/ListItem.tsx","components/SearchGeoObjectsDialog/SearchBox.tsx","components/Icon.tsx","components/SearchGeoObjectsDialog/index.tsx","appUtils/circleToPolygon.ts","appUtils/index.ts","components/DrawPage/MapHandler.tsx","components/DrawPage/PreviewDialog.tsx","components/DrawPage/Panel.tsx","components/DrawPage/index.tsx","components/ExplorePage/ImportItem.tsx","components/ExplorePage/DragOverlay.tsx","components/ExplorePage/GeoJSONItem.tsx","components/ExplorePage/Menu.tsx","components/ExplorePage/MapHandler.tsx","components/ExplorePage/PreviewDialog.tsx","components/ExplorePage/WarningDialog.tsx","components/ExplorePage/index.tsx","components/LinkIcon.tsx","components/TextIcon.tsx","components/WorldPage/Popup.tsx","components/WorldPage/CountryTooltip.tsx","components/WorldPage/SvgMap.tsx","components/WorldPage/index.tsx","App.tsx","index.tsx"],"names":["lookup","baseUrl","process","geoObjectsPromise","fetch","then","pr","json","searchGeoObjects","options","a","geoObjects","filter","search","toLowerCase","includes","phrase","slice","pageSize","getRegions","countryCode","getCountry","countries","type","find","getCountrySvg","text","getCountryFromLatLng","lat","lng","PolygonLookup","polygon","properties","ISO_A3","getCountryGeojsonByIso3166a3","iso3166a3","country","getCountryGeojson","SvgMap","onMouseEnter","onMouseLeave","onMouseMove","svg","svgWrapperRef","useRef","useEffect","element","current","firstChild","SVGElement","querySelector","getBoundingClientRect","y","width","height","addEventListener","removeEventListener","className","ref","dangerouslySetInnerHTML","__html","memo","Navbar","url","flagUrl","fullName","mapType","onMapChange","onMapSelect","event","mapoption","currentTarget","dataset","style","background","onClick","ToolTip","x","show","children","styles","useSpring","opacity","div","top","left","display","to","RegionTooltip","hasEntered","region","src","capital","UnderConstruction","size","icon","faHardHat","DevInfo","map","useMapEvents","click","console","log","getCenter","getZoom","latlng","CountryPage","useState","setPosition","regions","isLoading","hasError","state","setState","setRegion","setEntered","setMapType","geojson","setGeojson","setSvg","useParams","useCallback","clientX","clientY","target","id","item","undefined","color","MapContainer","zoom","center","scrollWheelZoom","TileLayer","attribution","GeoJSON","data","Toolbar","onSearch","faGlobe","activeClassName","exact","faHome","faEye","faPencilAlt","faSearch","ListItem","thumbnailUrl","imageUrl","setImageUrl","image","Image","onerror","SearchBox","value","onChange","onClear","_onChange","placeholder","faTimes","Icon","disabled","rest","SearchGeoObjectsDialog","isShowing","onHide","items","setResults","_value","setValue","useDebounce","result","defaultEarthRadius","toRadiansRatio","Math","PI","toDegreesRatio","toRadians","angleInDegrees","toDegrees","angleInRadians","offset","c1","distance","earthRadius","bearing","lat1","lon1","dByR","cos","b","c","sin","d","asin","atan2","isObjectNotArray","argument","Array","isArray","isUndefinedOrNull","circleToPolygon","radius","n","numberOfEdges","getNumberOfEdges","getEarthRadius","getBearing","direction","rightHandRule","getDirection","start","coordinates","i","coordinate","push","newId","random","toString","substr","download","fileName","anchor","document","createElement","body","appendChild","href","getTextFromBlob","blob","Promise","resolve","reader","FileReader","onload","readAsText","latlngTextRegex","extractGeoObjectFromText","JSON","parse","length","error","latlngText","exec","Number","trySaveToLocalStorage","localStorage","setItem","stringify","emptyPolygon","DrawHandler","drawOption","isDragging","setDragging","setCenter","created","setCreated","completed","setCompleted","setRadius","setData","dragging","disable","enable","mouseup","mousemove","distanceTo","onEnter","key","window","Circle","eventHandlers","mousedown","PreviewDialog","onExport","exportType","parent","onOutsideClick","contains","navigator","clipboard","writeText","faClipboard","faDownload","Panel","onPreview","onRemoveShapes","isPreviewShowing","dataNotAvailable","dataAvailable","onDrawOptionChange","onExportTypeChange","faTrash","faDrawPolygon","faCircle","DrawPage","setGeoObjects","setPreviewShow","setDrawOption","setExportType","wkt","replace","geoObject","features","geometry","ImportItem","isSelected","loadedAt","name","featuresCount","warning","onDelete","onShowOnMap","onShowGeojson","onShowWarning","onToggle","Date","toLocaleString","faCrosshairs","faCode","faExclamationTriangle","DragOverlay","faFileUpload","GeoJSONItem","useMemo","onEachFeature","feature","Menu","onAction","_onAction","action","MapHandler","geojsonObjects","menu","setMenu","propagatedFrom","contextmenu","originalEvent","preventDefault","setView","sourceTarget","invalid","WarningDialog","ExplorePage","setGeojsonObjects","isUploading","setUploading","pageMode","setPageMode","onDrop","acceptedFiles","newState","file","concat","useDropzone","getRootProps","isDragActive","savedObjects","getItem","checkClipboard","readText","setTimeout","onPaste","_event","clipboardData","getData","numberOfPoints","moment","format","getGeojsonFriendlyName","geojsonObject","some","geoJSON","getBounds","payload","Base64","encode","toBase64DataUri","suffix","area","points","speedMultiplier","LinkIcon","TextIcon","Popup","neigboursCount","tags","faInfo","CountryTooltip","shape","transform","onContextMenu","WorldPage","selected","setSelected","setLoading","setGeoObject","classList","toggle","geojsonLink","NotificationManager","App","setShow","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3ac3268c.chunk.js","sourcesContent":["import { baseUrl } from \"./appConstants\";\r\nimport { Country, GeoObject } from \"models/GeoObject\";\r\nimport { Region } from \"./models/Region\";\r\nimport { GeoJsonObject, FeatureCollection, Feature, Polygon, MultiPolygon } from \"geojson\";\r\nimport PolygonLookup from \"polygon-lookup\";\r\n\r\ntype Options = {\r\n    phrase: string;\r\n    pageSize: number;\r\n}\r\n\r\nconst geoObjectsPromise = fetch(`${baseUrl}/assets/geoObjects.json`)\r\n        .then<GeoObject[]>(pr => pr.json());\r\n\r\nexport const searchGeoObjects = async (options: Options): Promise<GeoObject[]> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n\r\n    return geoObjects\r\n        .filter(pr => pr.search.toLowerCase().includes(options.phrase))\r\n        .slice(0, options.pageSize);\r\n}\r\n\r\nexport const getRegions = (countryCode: string): Promise<Region[]> => {\r\n    \r\n    return fetch(`${baseUrl}/assets/regions/${countryCode}.json`)\r\n        .then(pr => pr.json());\r\n}\r\n\r\nexport const getCountry = async (countryCode: string): Promise<Country | undefined> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n    const countries = geoObjects.filter(pr => pr.type === \"country\") as Country[];\r\n\r\n    return countries\r\n        .find(pr => pr.countryCode.includes(countryCode));\r\n}\r\n\r\nexport const getWorldSvg = () => {\r\n    return fetch(`${baseUrl}/assets/shapes/world.svg`)\r\n        .then(pr => pr.text());\r\n}\r\n\r\nexport const getCountrySvg = (countryCode: string) => {\r\n    return fetch(`${baseUrl}/assets/shapes/${countryCode}/first-level.svg`)\r\n        .then(pr => pr.text());\r\n}\r\n\r\nexport const getCountryGeojsonLink = (countryCode: string): string => {\r\n    return `${baseUrl}/assets/geojson/${countryCode}.geojson`;\r\n}\r\n\r\nlet lookup: PolygonLookup;\r\n\r\nexport const getCountryFromLatLng = async (lat: number, lng: number): Promise<string | undefined> => {\r\n    \r\n    if(!lookup) {\r\n        const countries = await fetch(`${baseUrl}/assets/geojson/countries.geojson`)\r\n            .then<FeatureCollection>(pr => pr.json());\r\n        lookup = new PolygonLookup(countries);\r\n    }\r\n\r\n    const polygon = lookup.search(lat, lng) as Feature<Polygon | MultiPolygon, { ISO_A3: string }> | undefined;\r\n    \r\n    if(polygon) {\r\n        return polygon.properties.ISO_A3.toLowerCase();\r\n    }\r\n}\r\n\r\nexport const getCountryGeojsonByIso3166a3 = async (iso3166a3: string): Promise<GeoJsonObject | undefined> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n    const countries = geoObjects.filter(pr => pr.type === \"country\") as Country[];\r\n\r\n    const country = countries.find(pr => pr.iso3166a3 === iso3166a3);\r\n    \r\n    return fetch(`${baseUrl}/assets/geojson/${country?.countryCode}.geojson`)\r\n        .then(pr => pr.json());\r\n}\r\n\r\nexport const getCountryGeojson = (countryCode: string): Promise<GeoJsonObject | undefined> => {\r\n    return fetch(`${baseUrl}/assets/geojson/${countryCode}.geojson`)\r\n        .then(pr => pr.json());\r\n}","export const baseUrl = process.env.PUBLIC_URL || \"http://localhost:3000\";","import React, { FunctionComponent, memo } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport './svgMap.scss';\r\n\r\ntype Props = {\r\n    onMouseMove(event: MouseEvent): void;\r\n    onMouseEnter(): void;\r\n    onMouseLeave(): void;\r\n    svg: string;\r\n}\r\n\r\nconst SvgMap: FunctionComponent<Props> = ({\r\n    onMouseEnter,\r\n    onMouseLeave,\r\n    onMouseMove,\r\n    svg,\r\n}) => {\r\n    const svgWrapperRef = useRef<HTMLDivElement>(null);\r\n    \r\n    useEffect(() => {\r\n        const element = svgWrapperRef.current;\r\n \r\n        if(!element) {\r\n            return;\r\n        }\r\n\r\n        const svg = element.firstChild;\r\n       \r\n        if(!(svg instanceof SVGElement)) {\r\n            return;\r\n        }\r\n        \r\n        const shape = svg.querySelector(\"g\")!;\r\n\r\n        const { y, width, height } = shape.getBoundingClientRect();\r\n        //shape.style.transform = `translate(calc(50% - ${width / 2}px), calc(50% - ${(y + height)}px))`;\r\n\r\n        svg.addEventListener(\"mousemove\", onMouseMove);\r\n        svg.addEventListener(\"mouseenter\", onMouseEnter);\r\n        svg.addEventListener(\"mouseleave\", onMouseLeave);\r\n\r\n        return () => {\r\n            svg.removeEventListener(\"mousemove\", onMouseMove);\r\n            svg.addEventListener(\"mouseenter\", onMouseEnter);\r\n            svg.addEventListener(\"mouseleave\", onMouseLeave);\r\n        }\r\n\r\n    }, [svgWrapperRef])\r\n\r\n    return <div\r\n        className=\"country-page__svg\"\r\n        ref={svgWrapperRef}\r\n        dangerouslySetInnerHTML={{ __html: svg }}\r\n    />\r\n}\r\n\r\nexport default memo(SvgMap);","import React, { FunctionComponent, MouseEvent, memo } from 'react';\r\nimport { baseUrl } from 'appConstants';\r\n\r\nimport './navbar.scss';\r\nimport { MapType } from './types';\r\n\r\ntype Props = {\r\n    flagUrl: string;\r\n    fullName: string;\r\n    mapType: MapType;\r\n    onMapChange(mapType: MapType): void;\r\n}\r\n\r\nconst backgroundImageUrl = (url: string) => ({\r\n    background: `url(${url}) center center / contain no-repeat`\r\n})\r\n\r\nconst Navbar: FunctionComponent<Props> = ({\r\n    flagUrl,\r\n    fullName,\r\n    mapType,\r\n    onMapChange\r\n}) => {\r\n\r\n    const onMapSelect = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { mapoption } = event.currentTarget.dataset;\r\n        onMapChange(mapoption as MapType);\r\n    }\r\n\r\n    return <div className=\"country-page__navbar\">\r\n        <div className=\"country-page__navbarCountry\">\r\n            <div className=\"country-page__navbarCountryFlag\" style={backgroundImageUrl(baseUrl + flagUrl)}></div>\r\n            <div className=\"country-page__navbarCountryTitle\">{fullName}</div>\r\n        </div>\r\n        <div className=\"country-page__navbarMapSwitch\">\r\n            <div\r\n                onClick={onMapSelect}\r\n                data-mapoption=\"leaflet\"\r\n                className={`country-page__navbarMapOption ${mapType === \"leaflet\" ? \"country-page__navbarMapOption--selected\" : null}`}>\r\n                    Leaflet</div>\r\n            <div\r\n                onClick={onMapSelect}\r\n                data-mapoption=\"svg\"\r\n                className={`country-page__navbarMapOption ${mapType === \"svg\" ? \"country-page__navbarMapOption--selected\" : null}`}>\r\n                    Svg</div>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default memo(Navbar);\r\n","import React, { FunctionComponent } from 'react';\r\nimport { animated, useSpring } from 'react-spring';\r\nimport './tooltip.scss';\r\n\r\ntype Props = {\r\n    show: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nconst ToolTip: FunctionComponent<Props> = ({\r\n    x,\r\n    y,\r\n    show,\r\n    children\r\n}) => {\r\n    const styles = useSpring({\r\n        opacity: show ? 1 : 0,\r\n    })\r\n\r\n    return <animated.div className=\"tooltip\" style={{\r\n        ...styles,\r\n        top: `${y - 60}px`,\r\n        left: `${x - 90}px`,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"block\")\r\n    }}>\r\n        {children}\r\n    </animated.div>;\r\n}\r\n\r\nexport default ToolTip;\r\n","import React, { FunctionComponent, memo } from 'react';\r\nimport ToolTip from 'components/ToolTip';\r\nimport { baseUrl } from 'appConstants';\r\nimport { Region } from 'models/Region';\r\nimport './regionTooltip.scss';\r\n\r\ntype Props = {\r\n    hasEntered: boolean;\r\n    region?: Region;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nconst RegionTooltip: FunctionComponent<Props> = ({\r\n    hasEntered,\r\n    region,\r\n    x,\r\n    y,\r\n}) => {\r\n\r\n    return <ToolTip\r\n        show={hasEntered && !!region}\r\n        x={x}\r\n        y={y}>\r\n        {region ? <div className=\"region\">\r\n            <div>\r\n                <img className=\"region__image\" src={baseUrl + region.flagUrl}/>\r\n            </div>\r\n            <div className=\"region__info\">\r\n                <div>Region: {region.region}</div>\r\n                <div>Capital: {region.capital}</div>\r\n            </div>\r\n            \r\n        </div> : null}\r\n    </ToolTip>;\r\n}\r\n\r\nexport default memo(RegionTooltip);\r\n","import React, { FunctionComponent, memo } from 'react';\r\nimport { faHardHat } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './underConstruction.scss';\r\n\r\nconst UnderConstruction: FunctionComponent = ({\r\n}) => {\r\n \r\n    return <div className=\"country-page__info\">\r\n    <div>\r\n        <FontAwesomeIcon size=\"10x\" icon={faHardHat} />\r\n    </div>\r\n    <div>\r\n        <div className=\"country-page__infoTitle\">\r\n            Page is under construction\r\n        </div>\r\n        <div className=\"country-page__infoDescription\">\r\n            The data required for this page might not be prepared or an error occurred while loading it.\r\n        </div>\r\n    </div>\r\n</div>\r\n}\r\n\r\nexport default memo(UnderConstruction);","import React, { FunctionComponent } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useCallback } from 'react';\r\nimport { Region } from 'models/Region';\r\nimport { getCountry, getCountryGeojson, getCountrySvg, getRegions } from 'api';\r\nimport { MapContainer, TileLayer, GeoJSON, useMap, useMapEvents } from 'react-leaflet';\r\nimport { baseUrl } from 'appConstants';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Country, GeoObject } from \"models/GeoObject\";\r\nimport { GeoJsonObject } from \"geojson\";\r\nimport GridLoader from 'react-spinners/GridLoader';\r\nimport SvgMap from './SvgMap';\r\nimport Navbar from './Navbar';\r\nimport RegionTooltip from './RegionTooltip';\r\nimport { MapType } from './types';\r\nimport './index.scss';\r\nimport UnderConstruction from './UnderConstruction';\r\n\r\ntype State = {\r\n    regions: Region[];\r\n    country?: Country;    \r\n    isLoading: true;\r\n    hasError: boolean;\r\n} | {\r\n    regions: Region[];\r\n    country: Country;\r\n    isLoading: false;\r\n    hasError: boolean;\r\n} | {\r\n    regions?: Region[];\r\n    country?: Country;\r\n    isLoading: false;\r\n    hasError: true;\r\n}\r\n\r\n\r\n\r\nconst CountryPage: FunctionComponent = () => {\r\n    const [{x,y}, setPosition] = useState({\r\n        x: -1,\r\n        y: -1,\r\n    });\r\n    const [state, setState] = useState<State>({\r\n        regions: [],\r\n        isLoading: true,\r\n        hasError: false,\r\n    });\r\n    const [region, setRegion] = useState<Region>();\r\n    const [hasEntered, setEntered] = useState(false);\r\n    const [mapType, setMapType] = useState<MapType>(\"leaflet\");\r\n    const [geojson, setGeojson] = useState<GeoJsonObject>();\r\n    const [svg, setSvg] = useState<string>(\"\");\r\n    const { countryCode } = useParams<{ countryCode: string }>();\r\n\r\n    useEffect(() => {\r\n\r\n        if(!countryCode || !state.isLoading) {\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            try {\r\n                const country = await getCountry(countryCode);\r\n                const regions = await getRegions(countryCode);\r\n\r\n                if(!country) {\r\n                    setState({\r\n                        hasError: true,\r\n                        isLoading: false,\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                setState({\r\n                    country,\r\n                    regions,\r\n                    isLoading: false,\r\n                    hasError: false,\r\n                });\r\n            } catch (error) {\r\n                console.log(error)\r\n                setState({\r\n                    hasError: true,\r\n                    isLoading: false,\r\n                });\r\n            }\r\n        })();\r\n        \r\n    }, [state, countryCode])\r\n\r\n    const onMouseMove = useCallback((event: MouseEvent) => {\r\n        if(state.isLoading || state.hasError) {\r\n            return;\r\n        }\r\n        \r\n        setPosition({\r\n            x: event.clientX,\r\n            y: event.clientY\r\n        })\r\n        \r\n        if(event.target instanceof SVGElement) {\r\n            const id = event.target.id;\r\n\r\n            if(id) {\r\n                const item = state.regions.find(pr => pr.id === id);\r\n\r\n                if(item) {\r\n                    setRegion(item);\r\n                }\r\n            }\r\n            else {\r\n                setRegion(undefined);\r\n            }\r\n        }\r\n    }, [state]);\r\n\r\n    const onMouseEnter = () => {\r\n        setEntered(true);\r\n    }\r\n\r\n    const onMouseLeave = () => {\r\n        setEntered(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        (async () => {\r\n\r\n            try {\r\n                if(mapType === \"svg\") {\r\n                    const svg = await getCountrySvg(countryCode);\r\n                    setSvg(svg);\r\n                }\r\n                else {\r\n                    const geojson = await getCountryGeojson(countryCode);\r\n                    setGeojson(geojson);\r\n                }\r\n            } catch (error) {\r\n                \r\n            }\r\n\r\n         \r\n        })();\r\n       \r\n    }, [mapType]);\r\n\r\n    return <div className={`country-page ${state.isLoading || state.hasError ? \"center\": null}`}>\r\n        {state.isLoading ? <GridLoader color=\"white\" size={15} /> :\r\n        state.hasError ? <UnderConstruction/>\r\n        : <>\r\n            <Navbar\r\n                flagUrl={state.country.flagUrl}\r\n                fullName={state.country.fullName}\r\n                mapType={mapType}\r\n                onMapChange={setMapType}\r\n            />\r\n            <RegionTooltip\r\n                hasEntered={hasEntered}\r\n                x={x}\r\n                y={y}\r\n                region={region}\r\n            />\r\n            <div className=\"country-page__map\">\r\n                {mapType === \"svg\" ? <SvgMap\r\n                    onMouseEnter={onMouseEnter}\r\n                    onMouseLeave={onMouseLeave}\r\n                    onMouseMove={onMouseMove}\r\n                    svg={svg}\r\n                /> :\r\n                <MapContainer\r\n                    zoom={state.country.zoom}\r\n                    center={state.country.center}\r\n                    scrollWheelZoom={true}\r\n                    className=\"country-page__leafletMap\">\r\n                    <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    {geojson ? <GeoJSON data={geojson}/> : null}\r\n                    <DevInfo/>\r\n                </MapContainer>}\r\n            </div>\r\n            <div className=\"country-page__footer\">\r\n                \r\n            </div>\r\n        </>}\r\n    </div>;\r\n}\r\n\r\nconst DevInfo = () => {\r\n    const map = useMapEvents({\r\n        click(event) {\r\n            console.log(map.getCenter(), map.getZoom(), event.latlng)\r\n        }\r\n    })\r\n\r\n    return null;\r\n}\r\n\r\nexport default CountryPage;\r\n","import React, { FunctionComponent, memo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDownload, faEye, faGlobe, faHome, faPencilAlt, faSearch } from '@fortawesome/free-solid-svg-icons'\r\nimport './toolbar.scss';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\ntype Props = {\r\n    onSearch(): void;\r\n}\r\n\r\nconst Toolbar: FunctionComponent<Props> = ({\r\n    onSearch\r\n}) => {\r\n\r\n    return <div className=\"toolbar\">\r\n        <Link className=\"toolbar__logo\" to={`/`}>\r\n            <div className=\"toolbar__logoText\">Geo-shapes</div>\r\n            <div className=\"toolbar__logoIcon\">\r\n                <FontAwesomeIcon icon={faGlobe}/>\r\n            </div>\r\n        </Link>\r\n        <div className=\"toolbar__menu\">\r\n            <NavLink activeClassName=\"toolbar__iconButton--selected\" className=\"toolbar__iconButton\" exact to={`/`}>\r\n                <FontAwesomeIcon icon={faHome}/>\r\n            </NavLink>\r\n            <NavLink activeClassName=\"toolbar__iconButton--selected\" className=\"toolbar__iconButton\" exact to={`/explore`}>\r\n                <FontAwesomeIcon icon={faEye}/>\r\n            </NavLink>\r\n            <NavLink activeClassName=\"toolbar__iconButton--selected\" className=\"toolbar__iconButton\" exact to={`/draw`}>\r\n                <FontAwesomeIcon icon={faPencilAlt}/>\r\n            </NavLink>\r\n            <div className=\"toolbar__iconButton\" onClick={onSearch}>\r\n                <FontAwesomeIcon icon={faSearch}/>\r\n            </div>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default memo(Toolbar);\r\n","import { FunctionComponent, memo, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { baseUrl } from '../../appConstants';\r\nimport { Country } from 'models/GeoObject';\r\nimport './listItem.scss';\r\n\r\ntype Props = Country & {\r\n    onClick(): void;\r\n}\r\n\r\nconst ListItem: FunctionComponent<Props> = ({\r\n    capital,\r\n    countryCode,\r\n    flagUrl,\r\n    fullName,\r\n    id,\r\n    thumbnailUrl,\r\n    type,\r\n    onClick,\r\n}) => {\r\n    const [imageUrl, setImageUrl] = useState<string | undefined>(baseUrl + thumbnailUrl);\r\n\r\n    useEffect(() => {\r\n        if(!imageUrl) {\r\n            return;\r\n        }\r\n\r\n        const image = new Image();\r\n        image.onerror = () => setImageUrl(undefined)\r\n        image.src = imageUrl;\r\n        \r\n    }, [imageUrl]);\r\n\r\n    return <div key={id} className=\"geoObject\">\r\n        <div className=\"geoObject__imageWrapper\">\r\n            <div className=\"geoObject__image\" style={{\r\n            background: imageUrl ? `url(${imageUrl}) center center / cover` : \"gray\"\r\n        }}></div>\r\n        </div>\r\n        <Link className=\"geoObject__link\" onClick={onClick} to={`/country/${countryCode}`}>\r\n            <div>\r\n                <div className=\"geoObject__name\">{fullName}</div>\r\n                <div className=\"geoObject__type\">{capital}</div>\r\n            </div>\r\n            <div className=\"geoObject__flag\" style={{\r\n                background: `url(${baseUrl + flagUrl}) center center / cover`\r\n            }}></div>\r\n        </Link>\r\n    </div>\r\n}\r\n\r\nexport default memo(ListItem);","import { ChangeEvent, FunctionComponent } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { useCallback } from 'react';\r\nimport './searchBox.scss';\r\n\r\ntype Props = {\r\n    value?: string;\r\n    onChange(value: string): void;\r\n    onClear(): void;\r\n}\r\n\r\nconst SearchBox: FunctionComponent<Props> = ({\r\n    value,\r\n    onChange,\r\n    onClear\r\n}) => {\r\n    const _onChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value;\r\n        onChange(value);\r\n    }, []);\r\n\r\n    return <div className={`searchbox ${value ? \"searchbox--typed\": \"\"}`}>\r\n    <div className={`searchbox__icon ${value ? \"searchbox__icon--active\": \"\"}`}><FontAwesomeIcon icon={faSearch}/></div>\r\n        <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={_onChange}\r\n            className=\"searchbox__input\"\r\n            placeholder=\"I am looking for...\"\r\n            />\r\n        {value ? <div onClick={onClear} className=\"searchbox__clearIcon\"><FontAwesomeIcon icon={faTimes}/></div> : null}\r\n    </div>\r\n}\r\n\r\nexport default SearchBox;","import React, { FunctionComponent, MouseEvent, memo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport './icon.scss';\r\n\r\ntype Props = {\r\n    className?: string;\r\n    onClick?(event: MouseEvent<HTMLDivElement>): void\r\n    icon: IconProp;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst Icon: FunctionComponent<Props> = ({\r\n    className,\r\n    onClick,\r\n    icon,\r\n    disabled = false,\r\n    ...rest\r\n}) => {\r\n    return <div\r\n        {...rest}\r\n        onClick={onClick}\r\n        className={`icon ${disabled ? \"icon--disabled\" : \"\"} ${onClick ? \"icon--interactive\" : \"\"} ${className}`}>\r\n            <FontAwesomeIcon icon={icon}/>\r\n    </div>\r\n}\r\n\r\nexport default memo(Icon);","import React, { FunctionComponent } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport GridLoader from 'react-spinners/GridLoader';\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport { searchGeoObjects } from 'api';\r\nimport { GeoObject } from 'models/GeoObject';\r\nimport useDebounce from 'use-debounce/lib/useDebounce';\r\nimport ListItem from './ListItem';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport SearchBox from './SearchBox';\r\nimport Icon from 'components/Icon';\r\nimport './index.scss';\r\n\r\ntype Props = {\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    onClick(): void;\r\n}\r\n\r\ntype State = {\r\n    isLoading: boolean;\r\n    items: GeoObject[];\r\n}\r\n\r\nconst SearchGeoObjectsDialog: FunctionComponent<Props> = ({\r\n    isShowing,\r\n    onHide,\r\n    onClick,\r\n}) => {\r\n    const [{\r\n        isLoading,\r\n        items\r\n    }, setResults] = useState<State>({\r\n        isLoading: true,\r\n        items: [],\r\n    });\r\n    const [_value, setValue] = useState(\"\");\r\n    const [value] = useDebounce(_value, 1000);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    const onClear = useCallback(() => {\r\n        setValue(\"\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setResults({\r\n            isLoading: true,\r\n            items: [],\r\n        });\r\n    }, [_value]);\r\n\r\n    useEffect(() => {\r\n\r\n        if(isShowing) {\r\n            (async () => {\r\n                const result = await searchGeoObjects({\r\n                    pageSize: 10,\r\n                    phrase: value,\r\n                });\r\n    \r\n                setResults({\r\n                    isLoading: false,\r\n                    items: result,\r\n                });\r\n            })()\r\n        }\r\n        else {\r\n            setResults({\r\n                isLoading: true,\r\n                items: [],\r\n            });\r\n            setValue(\"\");\r\n        }\r\n\r\n    }, [isShowing, value]);\r\n\r\n    return <animated.div style={{\r\n            ...styles,\r\n            display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n        }} className={`searchDialog ${isShowing ? \"\" : \"\"}`}>\r\n        <div className=\"searchDialog__navbar\">\r\n            <Icon onClick={onHide} className=\"searchDialog__close\" icon={faTimes}/>\r\n        </div>\r\n        <div className=\"searchDialog__body\">\r\n            <div className=\"searchDialog__top\">\r\n                <SearchBox\r\n                    onChange={setValue}\r\n                    onClear={onClear}\r\n                    value={_value}\r\n                />\r\n            </div>\r\n            <div className={`searchDialog__list ${isLoading ? \"searchDialog__list--center\": \"\"}`}>\r\n                {isLoading ? <GridLoader color=\"white\" size={15} /> : \r\n                    items.map(pr => pr.type === \"country\" && <ListItem onClick={onClick} key={pr.id} {...pr} />)}\r\n            </div>\r\n        </div>\r\n    </animated.div>\r\n}\r\n\r\nexport default SearchGeoObjectsDialog;\r\n\r\n","import { Polygon } from \"geojson\";\r\n\r\nconst defaultEarthRadius = 6378137;\r\nconst defaultNumberOfEdges = 64;\r\n\r\ntype Options = {\r\n    numberOfEdges: number;\r\n    earthRadius: number;\r\n    rightHandRule: number;\r\n    bearing: number;\r\n}\r\n\r\nconst toRadiansRatio = Math.PI / 180;\r\nconst toDegreesRatio = 180 / Math.PI;\r\n\r\nfunction toRadians(angleInDegrees: number): number {\r\n    return angleInDegrees * toRadiansRatio;\r\n}\r\n\r\nfunction toDegrees(angleInRadians: number): number {\r\n    return angleInRadians * toDegreesRatio\r\n}\r\n\r\nfunction offset(c1: [number, number], distance: number, earthRadius: number, bearing: number): [number, number] {\r\n    const lat1 = toRadians(c1[1]);\r\n    const lon1 = toRadians(c1[0]);\r\n    const dByR = distance / earthRadius;\r\n\r\n    const a = Math.cos(dByR);\r\n    const b = Math.cos(lat1);\r\n    const c = Math.sin(dByR);\r\n    const d = Math.sin(lat1);\r\n\r\n    const lat = Math.asin(d * a + b * c * Math.cos(bearing));\r\n    const lon = lon1 + Math.atan2(Math.sin(bearing) * c * b, a - d * Math.sin(lat));\r\n\r\n    return [toDegrees(lon), toDegrees(lat)];\r\n}\r\n\r\nfunction getNumberOfEdges(options?: Partial<Options>) {\r\n    if (isUndefinedOrNull(options)) {\r\n        return defaultNumberOfEdges;\r\n    }\r\n    \r\n    if (isObjectNotArray(options)) {\r\n        const numberOfEdges = options.numberOfEdges;\r\n        return numberOfEdges === undefined ? defaultNumberOfEdges : numberOfEdges;\r\n    }\r\n\r\n    return defaultNumberOfEdges;\r\n}\r\n\r\nfunction getEarthRadius(options?: Partial<Options>) {\r\n    \r\n    if (isUndefinedOrNull(options)) {\r\n        return defaultEarthRadius;\r\n    }\r\n    \r\n    if(isObjectNotArray(options)) {\r\n        const earthRadius = options.earthRadius;\r\n        return earthRadius === undefined ? defaultEarthRadius : earthRadius;\r\n    }\r\n\r\n    return defaultEarthRadius;\r\n}\r\n\r\nfunction getDirection(options?: Partial<Options>){\r\n    if (isObjectNotArray(options) && options.rightHandRule){\r\n        return -1;\r\n    }\r\n    \r\n    return 1;\r\n}\r\n\r\nfunction getBearing(options?: Partial<Options>) {\r\n    if (isUndefinedOrNull(options)) {\r\n        return 0;\r\n    } \r\n    \r\n    if(isObjectNotArray(options)) {\r\n        const bearing = options.bearing;\r\n        return bearing === undefined ? 0 : bearing;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nfunction isObjectNotArray(argument: Partial<Options> | Array<any> | undefined): argument is Options {\r\n    return argument !== null && typeof argument === \"object\" && !Array.isArray(argument);\r\n}\r\n\r\nfunction isUndefinedOrNull(argument?: Partial<Options>): argument is undefined {\r\n    return argument === null || argument === undefined;\r\n}\r\n\r\nexport function circleToPolygon(center: [number, number], radius: number, options?: Partial<Options>): Polygon {\r\n    const n = getNumberOfEdges(options);\r\n    const earthRadius = getEarthRadius(options);\r\n    const bearing = getBearing(options);\r\n    const direction = getDirection(options);\r\n  \r\n    const start = toRadians(bearing);\r\n    const coordinates = new Array<[number, number]>();\r\n    \r\n    for (let i = 0; i < n; ++i) {\r\n        const coordinate = offset(center, radius, earthRadius, start + (direction * 2 * Math.PI * -i) / n);\r\n        coordinates.push(coordinate);\r\n    }\r\n    \r\n    coordinates.push(coordinates[0]);\r\n  \r\n    return {\r\n        type: \"Polygon\",\r\n        coordinates: [coordinates]\r\n    };\r\n};","import { GeoJsonObject, Feature, FeatureCollection } from 'geojson';\r\nimport { Base64 } from 'js-base64';\r\nimport moment from 'moment';\r\nimport { parse } from 'wkt';\r\nexport * from \"./circleToPolygon\";\r\n\r\nexport const newId = () => {    \r\n    return '_' + Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const toBase64DataUri = (text: string) => {\r\n    const payload = Base64.encode(text);\r\n    const dataUri = `data:text/plain;base64,${payload}`;\r\n    return dataUri;\r\n}\r\n\r\nexport const download = (url: string, fileName: string) => {\r\n    const anchor = document.createElement(\"a\");\r\n    document.body.appendChild(anchor);\r\n    anchor.style.display = \"none\";\r\n    anchor.href = url;\r\n    anchor.download = fileName;\r\n    anchor.click();\r\n}\r\n\r\nexport const getTextFromBlob = async(blob: Blob): Promise<string> => {\r\n    return await new Promise<string>((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = function() {\r\n            const text = reader.result as string;\r\n            resolve(text);\r\n        }; \r\n        reader.readAsText(blob);\r\n    })\r\n}\r\n\r\nconst latlngTextRegex = /(-?\\d*\\.?\\d+)[,\\s]*(-?\\d*\\.?\\d+)/;\r\n\r\nexport const extractGeoObjectFromText = (text: string): GeoJsonObject | undefined => {\r\n    \r\n    try {\r\n        const data = JSON.parse(text) as GeoJsonObject | number[];\r\n\r\n        if(Array.isArray(data)) {\r\n\r\n            if(!data.length || typeof data[0] !== \"number\") {\r\n                return;\r\n            }\r\n\r\n            return {\r\n                type: \"LineString\",\r\n                coordinates: [data],\r\n            } as GeoJsonObject;\r\n        }\r\n\r\n        return data;\r\n    }\r\n    catch(error) {\r\n        try {\r\n            const geojson = parse(text);\r\n            return geojson;\r\n        } catch (error) {\r\n        }\r\n    }\r\n\r\n    const latlngText = latlngTextRegex.exec(text);\r\n\r\n    if(latlngText && latlngText.length === 3) {\r\n        const [,lat,lng] = latlngText;\r\n        const type = \"Point\";\r\n        const coordinates = [Number(lat), Number(lng)];\r\n\r\n        return {\r\n            type,\r\n            coordinates,\r\n        } as GeoJsonObject;\r\n    }\r\n}\r\n\r\nexport const getGeojsonFriendlyName = (data: GeoJsonObject): string => {\r\n    let name = \"\";\r\n\r\n    if(data) {\r\n        switch(data.type) {\r\n            case \"Feature\":\r\n                name += \"feature\";\r\n                const feature = data as Feature;\r\n                if(feature.geometry.type === \"Polygon\") {\r\n                    name += \"_polygon\";\r\n                    const coordinates = feature.geometry.coordinates;\r\n\r\n                    if(coordinates.length && coordinates[0].length) {\r\n                        const numberOfPoints = coordinates[0].length;\r\n                        name += `_${numberOfPoints}`;\r\n                    }\r\n                }\r\n            break;\r\n            case \"Point\":\r\n                name += \"point\";\r\n            break;\r\n            case \"Polygon\":\r\n                name += \"point\";\r\n            break;\r\n            case \"LineString\":\r\n                name += \"linestring\";\r\n            break;\r\n            case \"FeatureCollection\":\r\n                const features = data as FeatureCollection;\r\n                name += `features_${features.features.length}`;\r\n            break;\r\n        }\r\n    }\r\n\r\n    name += moment().format(\"_YYYYMMDDHHmmss\");\r\n\r\n    return name;\r\n}\r\n\r\nexport const trySaveToLocalStorage = (data: any): boolean => {\r\n    try {\r\n        localStorage.setItem(\"saved\", JSON.stringify(data));\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}","import { circleToPolygon, newId }  from 'appUtils';\r\nimport React, { ChangeEvent, FunctionComponent, useEffect, useState } from 'react';\r\nimport { GeoJSON, Circle, MapContainer, Pane, TileLayer, useMap, useMapEvents } from 'react-leaflet';\r\nimport { DrawOption, ExportType, GeoObject } from './types';\r\n\r\ntype State = {\r\n    type: \"LineString\" | \"Polygon\";\r\n    coordinates: number[][] | number[][][];\r\n}\r\n\r\ntype Props = {\r\n    onChange(data: GeoObject): void;\r\n    geoObjects: GeoObject[];\r\n    drawOption: DrawOption;\r\n}\r\n\r\nconst emptyPolygon = {\r\n    type: \"Polygon\" as const,\r\n    coordinates: [[]]\r\n};\r\n\r\nconst DrawHandler: FunctionComponent<Props> = ({\r\n    drawOption,\r\n    geoObjects,\r\n    onChange\r\n}) => {\r\n    const [isDragging, setDragging] = useState(false);\r\n    const [center, setCenter] = useState({\r\n        lat: 50,\r\n        lng: -1,\r\n    });\r\n    const [created, setCreated] = useState(false);\r\n    const [completed, setCompleted] = useState(false);\r\n    const [radius, setRadius] = useState(10);\r\n    const [data, setData] = useState<State>(emptyPolygon);\r\n    const map = useMapEvents({\r\n        click: (event) => {\r\n            if(!created && drawOption === \"circle\") {\r\n                map.dragging.disable();\r\n                setCreated(true);\r\n                setCenter(event.latlng);\r\n                setRadius(100);\r\n            }\r\n            if(!completed && created && drawOption === \"circle\") {\r\n                map.dragging.enable();\r\n                setCompleted(true);\r\n            }\r\n            if(drawOption === \"polygon\") {\r\n                const { lat, lng } = event.latlng;\r\n                const item = [lng, lat];\r\n                setData(state => {\r\n                    const coordinates = [...state.coordinates[0] as number[][], item];\r\n                    \r\n                    return {\r\n                        ...state,\r\n                        coordinates: [coordinates],\r\n                    };\r\n                });\r\n            }\r\n            if(drawOption === \"lineString\") {\r\n                const { lat, lng } = event.latlng;\r\n                const item = [lng, lat];\r\n                setData(state => {\r\n                    const coordinates = [...state.coordinates as number[][], item];\r\n                   \r\n                    return {\r\n                        ...state,\r\n                        coordinates,\r\n                    };\r\n                });\r\n            }\r\n        },\r\n        mouseup: (event) => {\r\n            \r\n        },\r\n        mousemove(event) {\r\n            if(created && !completed && drawOption === \"circle\") {\r\n                const radius = event.latlng.distanceTo(center);\r\n                setRadius(radius);\r\n            }\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(completed && drawOption === \"lineString\") {\r\n            \r\n            onChange({\r\n                id: newId(),\r\n                data,\r\n            });\r\n            setData(emptyPolygon);\r\n            setCompleted(false);\r\n        }\r\n\r\n        if(completed && drawOption === \"polygon\") {\r\n            \r\n            onChange({\r\n                id: newId(),\r\n                data,\r\n            });\r\n            setData(emptyPolygon);\r\n            setCompleted(false);\r\n        }\r\n\r\n        if(completed && drawOption === \"circle\") {\r\n            const data = circleToPolygon([center.lng, center.lat], radius);\r\n            \r\n            setCreated(false);\r\n            setCompleted(false);\r\n            onChange({\r\n                id: newId(),\r\n                data,\r\n            });\r\n        }\r\n    }, [drawOption, completed]);\r\n\r\n    useEffect(() => {\r\n\r\n        if(drawOption === \"none\") {\r\n            return;\r\n        }\r\n       \r\n        if((drawOption === \"polygon\" && data.type === \"Polygon\")\r\n        || (drawOption === \"circle\" && data.type === \"Polygon\")\r\n        || (drawOption === \"lineString\" && data.type === \"LineString\")) {\r\n            return;\r\n        }\r\n\r\n        setData(state => {\r\n            let type: \"LineString\" | \"Polygon\" = \"LineString\";\r\n            let coordinates: number[][] | number[][][] = [];\r\n\r\n            if(drawOption === \"lineString\") {\r\n                type = \"LineString\";\r\n                coordinates = [];\r\n            }\r\n\r\n            if(drawOption === \"circle\") {\r\n                type = \"Polygon\";\r\n                coordinates = [[]];\r\n            }\r\n\r\n            if(drawOption === \"polygon\") {\r\n                type = \"Polygon\";\r\n                coordinates = [[]];\r\n            }\r\n\r\n            return {\r\n                type,\r\n                coordinates,\r\n            }\r\n        });\r\n    }, [data, drawOption]);\r\n\r\n    const onEnter = (event: KeyboardEvent) => {\r\n        if(event.key === \"Enter\") {\r\n            setCompleted(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", onEnter);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", onEnter);\r\n        }\r\n    }, []);\r\n\r\n    return <>\r\n        {!completed && drawOption === \"circle\" ? <div className=\"draw-page__popup\">To draw a circle, click on the map, move mouse to set radius and click to finish</div> : null}\r\n        {!completed && drawOption === \"lineString\" ? <div className=\"draw-page__popup\">To draw a line string, click on the map and press enter to finish</div> : null}\r\n        {!completed && drawOption === \"polygon\" ? <div className=\"draw-page__popup\">To draw a polygon, click on the map and press enter to finish</div> : null}\r\n        {geoObjects.map(pr => <GeoJSON key={pr.id} data={pr.data}/>)}\r\n        <GeoJSON key={Math.random()} data={data}/>\r\n        {created ? <Circle eventHandlers={{\r\n            mousemove: (event) => {\r\n                if(isDragging) {\r\n                    setCenter(event.latlng);\r\n                }\r\n            },\r\n            mousedown: (event) => {\r\n                setDragging(true);\r\n                map.dragging.disable();\r\n            },\r\n            mouseup: (event) => {\r\n                setDragging(false);\r\n                map.dragging.enable();\r\n            }\r\n        }} center={center} radius={radius} /> : null}\r\n    </>\r\n}\r\n\r\nexport default DrawHandler;","import { FunctionComponent, useEffect, useRef } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { GeoJsonObject } from 'geojson';\r\nimport stringify from \"json-stringify-pretty-compact\"\r\nimport Highlight from 'react-highlight';\r\nimport Icon from 'components/Icon';\r\nimport { ExportType } from './types';\r\nimport { faClipboard, faDownload, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './previewDialog.scss';\r\n\r\ntype Props = {\r\n    id?: string;\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    onExport(id: string): void;\r\n    data?: any;\r\n    exportType: ExportType;\r\n}\r\n\r\nconst PreviewDialog: FunctionComponent<Props> = ({\r\n    id,\r\n    isShowing,\r\n    onHide,\r\n    onExport,\r\n    data,\r\n    exportType,\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    const text = exportType === \"geojson\" ? stringify(data) : data;\r\n\r\n    const _onExport = () => onExport(id!);\r\n\r\n    const onCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(!parent.contains(element)) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, isShowing])\r\n\r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"preview-dialog__overlay\">\r\n        <div className=\"preview-dialog\">\r\n            <div className=\"preview-dialog__topBar\">\r\n                <div className=\"preview-dialog__right\">\r\n                    <Icon onClick={onCopy} className=\"\" icon={faClipboard}/>\r\n                    <Icon onClick={_onExport} className=\"\" icon={faDownload}/>\r\n                </div>\r\n                <Icon onClick={onHide} className=\"preview-dialog__close\" icon={faTimes}/>\r\n            </div>\r\n            <div className=\"preview-dialog__body\">\r\n                {data ? <Highlight className={exportType === \"geojson\" ? \"json\" : \"none\"}>\r\n                    {text}\r\n                </Highlight> : null}\r\n            </div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default PreviewDialog;\r\n","import React, { FunctionComponent, memo, MouseEvent, useEffect, useRef, useState } from 'react';\r\nimport { faCircle, faClipboard, faDownload, faDrawPolygon, faEye, faPencilAlt, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { DrawOption, ExportType, GeoObject } from './types';\r\nimport Icon from 'components/Icon';\r\nimport PreviewDialog from './PreviewDialog';\r\nimport './panel.scss';\r\n\r\nexport type PanelChangeOptions = {\r\n    drawOption: DrawOption;\r\n    exportType: ExportType;\r\n}\r\n\r\ntype Props = {\r\n    drawOption: DrawOption;\r\n    exportType: ExportType;\r\n    data?: GeoObject;\r\n    dataAvailable: boolean;\r\n    onChange(options: PanelChangeOptions): void;\r\n    onExport(): void;\r\n    onPreview(): void;\r\n    onHide(): void;\r\n    onRemoveShapes(): void;\r\n    isPreviewShowing: boolean;\r\n}\r\n\r\nconst Panel: FunctionComponent<Props> = ({\r\n    drawOption,\r\n    exportType,\r\n    data,\r\n    onChange,\r\n    onExport,\r\n    onPreview,\r\n    onHide,\r\n    onRemoveShapes,\r\n    isPreviewShowing,\r\n    dataAvailable,\r\n}) => {\r\n    const dataNotAvailable = !dataAvailable;\r\n\r\n    const onDrawOptionChange = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        onChange({\r\n            drawOption: id as typeof drawOption,\r\n            exportType\r\n        })\r\n    }\r\n\r\n    const onCopy = () => {\r\n        navigator.clipboard.writeText(JSON.stringify(data));\r\n    }\r\n\r\n    const onExportTypeChange = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        onChange({\r\n            drawOption,\r\n            exportType: id as typeof exportType,\r\n        })\r\n    }\r\n\r\n    return <div className=\"draw-page__panel\">\r\n        <div className=\"draw-page__topBar\">\r\n            Remove shapes <Icon disabled={dataNotAvailable} onClick={onRemoveShapes} className={``} icon={faTrash}/>\r\n        </div>\r\n        <div className=\"draw-page__toolbox\">\r\n            <Icon data-id=\"polygon\" onClick={onDrawOptionChange} className={`draw-page__tool ${drawOption === \"polygon\" ? \"selected\" : \"\"}`} icon={faDrawPolygon}/>\r\n            <Icon data-id=\"lineString\" onClick={onDrawOptionChange} className={`draw-page__tool ${drawOption === \"lineString\" ? \"selected\" : \"\"}`} icon={faPencilAlt}/>\r\n            <Icon data-id=\"circle\" onClick={onDrawOptionChange} className={`draw-page__tool ${drawOption === \"circle\" ? \"selected\" : \"\"}`} icon={faCircle}/>\r\n        </div>\r\n        <div className=\"export-section\">\r\n            <div className=\"export-section__title\">Export</div>\r\n            <div className=\"export\">\r\n                <div data-id=\"geojson\" onClick={onExportTypeChange} className={`export__option ${exportType === \"geojson\" ? \"export__option--selected\" : \"\"}`}>Geojson</div>\r\n                {/* <div data-id=\"csv\" onClick={onExportTypeChange} className={`export__option ${exportType === \"csv\" ? \"selected\" : \"\"}`}>CSV</div> */}\r\n                <div data-id=\"wkt\" onClick={onExportTypeChange} className={`export__option ${exportType === \"wkt\" ? \"export__option--selected\" : \"\"}`}>WKT</div>\r\n                {/* <div data-id=\"wkb\" onClick={onExportTypeChange} className={`export__option ${exportType === \"wkb\" ? \"selected\" : \"\"}`}>WKB</div> */}\r\n            </div>\r\n            <PreviewDialog\r\n                id={data?.id}\r\n                data={data}\r\n                onExport={onExport}\r\n                onHide={onHide}\r\n                isShowing={isPreviewShowing}\r\n                exportType={exportType}\r\n            />\r\n            <div className=\"payload\">\r\n                <Icon disabled={dataNotAvailable} onClick={onPreview} className=\"payload__option\" icon={faEye}/>\r\n                <Icon disabled={dataNotAvailable} onClick={onExport} className=\"payload__option\" icon={faClipboard}/>\r\n                <Icon disabled={dataNotAvailable} onClick={onCopy} className=\"payload__option\" icon={faDownload}/>\r\n                {/* <div onClick={onExport} className=\"payload__option\"><FontAwesomeIcon icon={faClipboard}/></div>\r\n                <div onClick={onExport} className=\"payload__option\"><FontAwesomeIcon icon={faDownload}/></div> */}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default memo(Panel);","import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer } from 'react-leaflet';\r\nimport MapHandler from './MapHandler';\r\nimport Panel, { PanelChangeOptions } from './Panel';\r\nimport { DrawOption, ExportType, GeoObject } from './types';\r\nimport { GeoJsonObject, FeatureCollection, Feature } from \"geojson\";\r\nimport './index.scss';\r\nimport { stringify } from 'wkt';\r\n\r\n\r\nconst DrawPage: FunctionComponent = ({\r\n}) => {\r\n    const [geoObjects, setGeoObjects] = useState<GeoObject[]>([]);\r\n    const [isPreviewShowing, setPreviewShow] = useState(false);\r\n    const [drawOption, setDrawOption] = useState<DrawOption>(\"none\");\r\n    const [exportType, setExportType] = useState<ExportType>(\"geojson\");\r\n    const [data, setData] = useState<any>();\r\n\r\n    const onPanelChange = (options: PanelChangeOptions) => {\r\n        setDrawOption(options.drawOption);\r\n        setExportType(options.exportType);\r\n    }\r\n\r\n    const onDrawChange = (data: GeoObject) => {\r\n        setGeoObjects(state => [...state, data]);\r\n        setDrawOption(\"none\")\r\n    }\r\n\r\n    const onExport = () => {\r\n\r\n    }\r\n\r\n    const onRemoveShapes = () => setGeoObjects([]);\r\n\r\n    const onHide = () => setPreviewShow(false);\r\n\r\n    const onPreview = () => {\r\n\r\n        if(exportType === \"wkt\") {\r\n\r\n            if(geoObjects.length === 1) {\r\n                let wkt = stringify(geoObjects[0].data as any);\r\n                wkt = wkt.replace(/,/g, \",\\n\")\r\n                setData(wkt);\r\n                setPreviewShow(true);\r\n                return;\r\n            }\r\n\r\n            let result = \"\";\r\n\r\n            for(const geoObject of geoObjects) {\r\n                let wkt = stringify(geoObject.data as any);\r\n                wkt = wkt.replace(/,/g, \",\\n\");\r\n                result += \"\\n\" + wkt;\r\n            }\r\n            \r\n            setData(result);\r\n            setPreviewShow(true);\r\n\r\n            return;\r\n        }\r\n\r\n        if(!geoObjects.length) {\r\n            setData(\"\");\r\n            setPreviewShow(true);\r\n            return;\r\n        }\r\n\r\n        if(geoObjects.length === 1) {\r\n            setData(geoObjects[0].data);\r\n            setPreviewShow(true);\r\n            return;\r\n        }\r\n        \r\n        const features: FeatureCollection = {\r\n            type: \"FeatureCollection\",\r\n            features: [...geoObjects.map<Feature>(pr => ({\r\n                type: \"Feature\",\r\n                geometry: pr.data as any,\r\n                properties: {},\r\n            }))]\r\n        }\r\n\r\n        setData(features);\r\n        setPreviewShow(true);\r\n    }\r\n\r\n\r\n    return <div className=\"draw-page\">\r\n        <Panel\r\n            drawOption={drawOption}\r\n            exportType={exportType}\r\n            onChange={onPanelChange}\r\n            onExport={onExport}\r\n            onPreview={onPreview}\r\n            onHide={onHide}\r\n            onRemoveShapes={onRemoveShapes}\r\n            data={data}\r\n            dataAvailable={!!geoObjects.length}\r\n            isPreviewShowing={isPreviewShowing}\r\n        />\r\n        <MapContainer\r\n            zoom={4}\r\n            center={[51.505, -0.09]}\r\n            scrollWheelZoom={true}\r\n            className=\"draw-page__map\">\r\n            <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <MapHandler\r\n                onChange={onDrawChange}\r\n                geoObjects={geoObjects}\r\n                drawOption={drawOption}/>\r\n        </MapContainer>\r\n    </div>\r\n}\r\n\r\nexport default DrawPage;","import React, { FunctionComponent, MouseEvent, useCallback } from 'react';\r\nimport { faCode, faCrosshairs, faDownload, faExclamationTriangle, faFileUpload, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Icon from 'components/Icon';\r\nimport './importItem.scss';\r\n\r\ntype Props = {\r\n    id: string;\r\n    name: string;\r\n    loadedAt: string | Date;\r\n    isSelected: boolean;\r\n    featuresCount: number;\r\n    warning?: string;\r\n    onToggle(event: MouseEvent<HTMLDivElement>): void;\r\n    onDelete(event: MouseEvent<HTMLDivElement>): void;\r\n    onExport(id: string): void;\r\n    onShowOnMap(id: string): void;\r\n    onShowGeojson(id: string): void;\r\n    onShowWarning(id: string): void;\r\n}\r\n\r\nconst ImportItem: FunctionComponent<Props> = ({\r\n    id,\r\n    isSelected,\r\n    loadedAt,\r\n    name,\r\n    featuresCount,\r\n    warning,\r\n    onDelete,\r\n    onShowOnMap,\r\n    onShowGeojson,\r\n    onShowWarning,\r\n    onExport,\r\n    onToggle,\r\n}) => {\r\n\r\n    const _onExport = () => onExport(id);\r\n    const _onShowOnMap = () => onShowOnMap(id);\r\n    const _onShowGeojson = () => onShowGeojson(id);\r\n    const _onShowWarning = () => onShowWarning(id);\r\n    \r\n    return <div className={`uploaded-item ${isSelected ? \"selected\" : \"\"}`}>\r\n        <div className=\"uploaded-item__topBar\">\r\n            <div data-id={id} onClick={onToggle}>\r\n                <div className=\"uploaded-item__title\">{name}</div>\r\n                <div className=\"uploaded-item__detail\">Loaded at: {new Date(loadedAt).toLocaleString()}</div>\r\n            </div>\r\n            <Icon data-id={id} className=\"uploaded-item__delete\" onClick={onDelete} icon={faTimes}/>\r\n        </div>\r\n        <div className=\"uploaded-item__body\">\r\n            <Icon className=\"popup__iconButton\" onClick={_onShowOnMap} icon={faCrosshairs}/>\r\n            {featuresCount ? <div className=\"uploaded-item__detail\">Features: {featuresCount}</div> : null}\r\n            <Icon className=\"popup__iconButton\" onClick={_onExport} icon={faDownload}/>\r\n            <Icon className=\"popup__iconButton\" onClick={_onShowGeojson} icon={faCode}/>\r\n            {warning ? <Icon className=\"popup__iconButton\" onClick={_onShowWarning} icon={faExclamationTriangle}/> : null}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default ImportItem;\r\n","import { FunctionComponent, memo } from 'react';\r\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './dragOverlay.scss';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\ntype Props = {\r\n    isShowing: boolean;\r\n}\r\n\r\nconst DragOverlay: FunctionComponent<Props> = ({\r\n    isShowing,\r\n}) => {\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n    \r\n    return <animated.div style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }}className=\"explore-page__dropOverlay\">\r\n        <div className=\"explore-page__dropModal\">\r\n            <div><FontAwesomeIcon size=\"5x\" icon={faFileUpload}/></div>\r\n            <div className=\"explore-page__dropModalText\">Drop geojson/json array lat lng or lat lng</div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default memo(DragOverlay);\r\n","import React, { FunctionComponent, memo, MouseEvent, useCallback, useMemo } from 'react';\r\nimport { GeoJSON } from 'react-leaflet';\r\nimport { GeoJsonObject, Feature } from 'geojson';\r\nimport { LeafletEventHandlerFnMap } from 'leaflet';\r\n\r\ntype Props = {\r\n    id: string;\r\n    isSelected: boolean;\r\n    eventHandlers: LeafletEventHandlerFnMap;\r\n    data: GeoJsonObject;\r\n}\r\n\r\nconst GeoJSONItem: FunctionComponent<Props> = ({\r\n    id,\r\n    data,\r\n    eventHandlers,\r\n\r\n    isSelected\r\n}) => {\r\n    const style = useMemo(() => {\r\n        return {\r\n            color: isSelected ? \"blue\" : \"gray\"\r\n        };\r\n    }, [isSelected])\r\n\r\n    const onEachFeature = useCallback((feature: Feature) => {\r\n        feature.id = id;\r\n    }, [id]);\r\n\r\n    return <GeoJSON\r\n        data={data}\r\n        data-id={id}\r\n        style={style}\r\n        eventHandlers={eventHandlers}\r\n        onEachFeature={onEachFeature} />\r\n}\r\n\r\nexport default memo(GeoJSONItem);\r\n","import { FunctionComponent, MouseEvent, useMemo, useRef } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport './menu.scss';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\n\r\nexport type Actions = \"nearby-country\" | \"nearby-continent\";\r\n\r\ntype Props = {\r\n    x: number;\r\n    y: number;\r\n    isShowing: boolean;\r\n    onAction(action: Actions): void;\r\n    onHide(): void;\r\n}\r\n\r\nconst Menu: FunctionComponent<Props> = ({\r\n    x,\r\n    y,\r\n    isShowing,\r\n    onAction,\r\n    onHide\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n    \r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(!parent.contains(element)) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, isShowing])\r\n\r\n    const _onAction = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { action } = event.currentTarget.dataset;\r\n        onAction(action as Actions);\r\n    }\r\n    \r\n    const { height } = ref?.current?.getBoundingClientRect() || { height: 0 };\r\n    \r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        top: `${y - height / 2 }px`,\r\n        left: `${x}px`,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"menu__overlay\">\r\n        <div className=\"menu\">\r\n           <div className=\"menu__item\" onClick={_onAction} data-action=\"nearby-country\">Get nearby country</div>\r\n           <div className=\"menu__item\" onClick={_onAction} data-action=\"nearby-continent\">Get nearby continent</div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default Menu;\r\n","import { LatLngLiteral, LeafletEvent } from 'leaflet';\r\nimport React, { FunctionComponent, MouseEvent, useCallback, useMemo, useState } from 'react';\r\nimport { GeoJsonObject, Feature } from 'geojson';\r\nimport GeoJSONItem from './GeoJSONItem';\r\nimport { useMapEvents } from 'react-leaflet';\r\nimport { useEffect } from 'react';\r\nimport Menu, { Actions } from './Menu';\r\nimport { getCountryFromLatLng, getCountryGeojsonByIso3166a3 } from 'api';\r\n\r\ntype Props = {\r\n    onAction(action: Actions, latlng: LatLngLiteral): void;\r\n    geojsonObjects: any[];\r\n    center: [number, number];\r\n}\r\n\r\nconst MapHandler: FunctionComponent<Props> = ({\r\n    onAction,\r\n    geojsonObjects,\r\n    center,\r\n}) => {\r\n    const [menu, setMenu] = useState({\r\n        x: 0,\r\n        y: 0,\r\n        latlng: {\r\n            lat: -1,\r\n            lng: -1,\r\n        },\r\n        isShowing: false,\r\n    });\r\n    const map = useMapEvents({\r\n        click: (event) => {\r\n            const propagatedFrom = event.propagatedFrom;\r\n\r\n            if(propagatedFrom && propagatedFrom.feature) {\r\n                const feature = event.propagatedFrom.feature as Feature;\r\n                const id = feature.id as string;\r\n            }\r\n\r\n        },\r\n        contextmenu(event) {\r\n            const originalEvent = event.originalEvent;\r\n            originalEvent.preventDefault();\r\n            const { clientX, clientY } = originalEvent;\r\n            const latlng = event.latlng;\r\n\r\n            setMenu({\r\n                x: clientX,\r\n                y: clientY,\r\n                latlng,\r\n                isShowing: true,\r\n            });\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        map.setView(center);\r\n    }, [center]);\r\n    \r\n    const eventHandlers = useMemo(() => ({\r\n        click(event: LeafletEvent) {\r\n            const target = event.sourceTarget;\r\n\r\n            if(\"feature\" in target) {\r\n                const id = target.feature.id;\r\n\r\n                // setGeojsonObjects((state) => {\r\n                //     const newState = [...state];\r\n\r\n                //     if(!newState.some(pr => pr.id === id)) {\r\n                //         return state;\r\n                //     }\r\n\r\n                //     for (const item of newState) {\r\n                        \r\n                //         if(item.isSelected) {\r\n                //             item.isSelected = !item.isSelected;\r\n                //         }\r\n\r\n                //         if(item.id === id) {\r\n                //             item.isSelected = !item.isSelected;\r\n                //         }\r\n                //     }\r\n\r\n                //     return newState;\r\n                // });\r\n                \r\n            }\r\n        }\r\n    }), []);\r\n\r\n    const _onAction = (action: Actions) => {\r\n        onAction(action, menu.latlng);\r\n        onHide();\r\n    }\r\n\r\n    const onHide = () => setMenu(state => ({\r\n        ...state,\r\n        isShowing: false,\r\n    }));\r\n    \r\n    return <>\r\n        <Menu\r\n            {...menu}\r\n            onAction={_onAction}\r\n            onHide={onHide}/>\r\n       {geojsonObjects.filter(pr => !pr.invalid).map(pr => <GeoJSONItem\r\n            key={pr.id}\r\n            {...pr}\r\n            eventHandlers={eventHandlers}\r\n            data={pr.data as GeoJsonObject} />)}\r\n    </>;\r\n}\r\n\r\nexport default MapHandler;\r\n","import { FunctionComponent, memo, useEffect, useMemo, useRef } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { GeoJsonObject } from 'geojson';\r\nimport stringify from \"json-stringify-pretty-compact\"\r\nimport Highlight from 'react-highlight';\r\nimport Icon from 'components/Icon';\r\nimport { faClipboard, faDownload, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './previewDialog.scss';\r\n\r\ntype Props = {\r\n    id: string;\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    onExport(id: string): void;\r\n    data?: GeoJsonObject\r\n}\r\n\r\nconst PreviewDialog: FunctionComponent<Props> = ({\r\n    id,\r\n    isShowing,\r\n    onHide,\r\n    onExport,\r\n    data,\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n    const text = useMemo(() => stringify(data), [data]);\r\n\r\n    const _onExport = () => onExport(id);\r\n\r\n    const onCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(!parent.contains(element)) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, isShowing])\r\n\r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"preview-dialog__overlay\">\r\n        <div className=\"preview-dialog\">\r\n            <div className=\"preview-dialog__topBar\">\r\n                <div className=\"preview-dialog__right\">\r\n                    <Icon onClick={onCopy} className=\"\" icon={faClipboard}/>\r\n                    <Icon onClick={_onExport} className=\"\" icon={faDownload}/>\r\n                </div>\r\n                <Icon onClick={onHide} className=\"preview-dialog__close\" icon={faTimes}/>\r\n            </div>\r\n            <div className=\"preview-dialog__body\">\r\n                {data ? <Highlight className=\"json\">\r\n                    {text}\r\n                </Highlight> : null}\r\n            </div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default memo(PreviewDialog);\r\n","import { FunctionComponent, useEffect, memo, useRef } from 'react';\r\nimport { faExclamationTriangle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport Icon from 'components/Icon';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport './warningDialog.scss';\r\n\r\ntype Props = {\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    warning?: string;\r\n}\r\n\r\nconst WarningDialog: FunctionComponent<Props> = ({\r\n    isShowing,\r\n    onHide,\r\n    warning,\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(parent === element) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, isShowing])\r\n\r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"warning-dialog__overlay\">\r\n        <div className=\"warning-dialog\">\r\n            <Icon onClick={onHide} className=\"warning-dialog__closeIcon\" icon={faTimes} />\r\n            <div className=\"warning-dialog__body\">\r\n                <Icon className=\"warning-dialog__warningIcon\" icon={faExclamationTriangle} />\r\n                <div className=\"warning-dialog__text\">\r\n                    {warning}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </animated.div>\r\n}\r\n\r\nexport default memo(WarningDialog);\r\n","import { FunctionComponent, MouseEvent, useCallback, useMemo } from 'react';\r\nimport { GeoJSON, MapContainer, TileLayer } from 'react-leaflet';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { useState } from 'react';\r\nimport { GeoJsonObject, Feature } from 'geojson';\r\nimport { useEffect } from 'react';\r\nimport { download, extractGeoObjectFromText, getGeojsonFriendlyName, getTextFromBlob, newId, toBase64DataUri, trySaveToLocalStorage } from 'appUtils';\r\nimport { BarLoader, DotLoader } from 'react-spinners';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { parse, stringify } from \"wkt\";\r\nimport { geoJSON, LatLngLiteral, LeafletEvent } from 'leaflet';\r\nimport ImportItem from './ImportItem';\r\nimport DragOverlay from './DragOverlay';\r\nimport './index.scss';\r\nimport MapHandler from './MapHandler';\r\nimport PreviewDialog from './PreviewDialog';\r\nimport WarningDialog from './WarningDialog';\r\nimport { Actions } from './Menu';\r\nimport { getCountryFromLatLng, getCountryGeojsonByIso3166a3 } from 'api';\r\nimport moment from 'moment';\r\n\r\ntype GeoObject = {\r\n    id: string;\r\n    name: string;\r\n    fileName?: string;\r\n    loadedAt: Date;\r\n    isSelected: boolean;\r\n    featuresCount: number;\r\n    area: number;\r\n    points: number;\r\n    warning?: string;\r\n} & ({\r\n    data: GeoJsonObject;\r\n    invalid: false;\r\n} | {\r\n    data: unknown;\r\n    invalid: true;\r\n})\r\n\r\ntype PageMode = \"show-preview\" | \"show-warning\" | undefined;\r\n\r\nconst ExplorePage: FunctionComponent = () => {\r\n    const [geojsonObjects, setGeojsonObjects] = useState<GeoObject[]>([]);\r\n    const [isUploading, setUploading] = useState(true);\r\n    const [{\r\n        id,\r\n        warning,\r\n        data,\r\n    }, setData] = useState<{\r\n        id: string;\r\n        warning: string | undefined;\r\n        data: GeoJsonObject;\r\n    }>({\r\n        id: \"\",\r\n        warning: \"\",\r\n        data: {\r\n            type: \"Point\"\r\n        },\r\n    });\r\n    const [pageMode, setPageMode] = useState<PageMode>();\r\n    const [center, setCenter] = useState<[number, number]>([51.505, -0.09]);\r\n\r\n    const onDrop = useCallback((acceptedFiles: File[]) => {\r\n        if(!acceptedFiles.length) {\r\n            return;\r\n        }\r\n  \r\n        setUploading(true);\r\n        \r\n\r\n        (async () => {\r\n            let newState = new Array<GeoObject>();\r\n\r\n            for(const file of acceptedFiles) {\r\n\r\n                const text = await getTextFromBlob(file);\r\n                const data = extractGeoObjectFromText(text);\r\n                let featuresCount = 0;\r\n\r\n                const geoObject = {\r\n                    id: newId(),\r\n                    name: file.name,\r\n                    fileName: file.name,\r\n                    loadedAt: new Date(),\r\n                    isSelected: false,\r\n                    featuresCount,\r\n                    data,\r\n                    invalid: !data,\r\n                } as GeoObject;\r\n\r\n                newState.push(geoObject);\r\n\r\n                if(!trySaveToLocalStorage(newState)) {\r\n                    geoObject.warning = \"We could not save geo-object to local storage. The file size is too big.\";\r\n                }\r\n            }\r\n\r\n            newState = newState.concat(geojsonObjects);\r\n            setGeojsonObjects(newState)\r\n            \r\n            setUploading(false);\r\n        })();\r\n\r\n      }, [geojsonObjects])\r\n    const {getRootProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    useEffect(() => {\r\n\r\n        const savedObjects = localStorage.getItem(\"saved\");\r\n\r\n        if(savedObjects) {\r\n            new Promise(() => {\r\n                const data = JSON.parse(savedObjects);\r\n                setGeojsonObjects(data);\r\n                setUploading(false);\r\n            });\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const checkClipboard = async () => {\r\n\r\n            try {\r\n                const text = await navigator.clipboard.readText();\r\n                setTimeout(checkClipboard, 2000);    \r\n            } catch (error) {\r\n                //NotificationManager.error(\"We could not read content from the clipboard\", \"Clipboard read error.\");\r\n            }\r\n            \r\n        }\r\n\r\n        setTimeout(checkClipboard, 2000);\r\n    }, []);\r\n\r\n    const onPaste = (_event: Event) => {\r\n        const event = _event as ClipboardEvent;\r\n        const text = event.clipboardData?.getData(\"text\");\r\n\r\n        if(!text) {\r\n            return;\r\n        }\r\n\r\n        const data = extractGeoObjectFromText(text);\r\n\r\n        if(!data) {\r\n            return;\r\n        }\r\n\r\n        let featuresCount = 0;\r\n\r\n        const name = getGeojsonFriendlyName(data);\r\n\r\n        const geojsonObject = {\r\n            id: newId(),\r\n            name,\r\n            loadedAt: new Date(),\r\n            isSelected: false,\r\n            featuresCount: 0,\r\n            data,\r\n            invalid: !data,\r\n        }  as GeoObject;\r\n\r\n        setGeojsonObjects(state => [...state, geojsonObject]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"paste\", onPaste);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"paste\", onPaste);\r\n        }\r\n    }, []);\r\n\r\n    const onToggle = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n\r\n        setGeojsonObjects((state) => {\r\n            const newState = [...state];\r\n\r\n            if(!newState.some(pr => pr.id === id)) {\r\n                return state;\r\n            }\r\n\r\n            for (const item of newState) {\r\n                \r\n                if(item.isSelected) {\r\n                    item.isSelected = !item.isSelected;\r\n                }\r\n\r\n                if(item.id === id) {\r\n                    item.isSelected = !item.isSelected;\r\n                }\r\n            }\r\n\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    const onDelete = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n\r\n        setGeojsonObjects((state) => {\r\n            const newState = state.filter(pr => pr.id !== id && !pr.warning);\r\n            localStorage.setItem(\"saved\", JSON.stringify(newState));\r\n\r\n            return newState;\r\n        });\r\n        \r\n    }\r\n\r\n    const onShowOnMap = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n\r\n        if(geojsonObject.invalid) {\r\n            return;\r\n        }\r\n        \r\n        const { lat,lng } = geoJSON(geojsonObject.data).getBounds().getCenter();\r\n\r\n        setCenter([lat, lng]);\r\n    }\r\n\r\n    const onShowWarning = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n\r\n        setPageMode(\"show-warning\");\r\n        setData(state => ({\r\n            ...state,\r\n            warning: geojsonObject.warning,\r\n        }));\r\n    }\r\n\r\n    const onHide = () => setPageMode(undefined);\r\n\r\n    const onShowGeojson = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n\r\n        if(geojsonObject.invalid) {\r\n            return;\r\n        }\r\n\r\n        setPageMode(\"show-preview\");\r\n        setData(state => ({\r\n            ...state,\r\n            id: geojsonObject.id,\r\n            data: geojsonObject.data,\r\n        }));\r\n    }\r\n\r\n    const onExport = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n        const text = toBase64DataUri(JSON.stringify(geojsonObject?.data));\r\n        const fileName = geojsonObject.fileName ? geojsonObject.fileName : `${geojsonObject.name}.geojson`;\r\n\r\n        download(text, fileName);\r\n    }\r\n\r\n    const onAction = (action: Actions, latlng: LatLngLiteral) => {\r\n        setUploading(true);\r\n        if(action === \"nearby-country\") {\r\n            const { lat, lng } = latlng;\r\n\r\n            (async () => {\r\n                try {\r\n                    const iso3166a3 = await getCountryFromLatLng(lng, lat);\r\n\r\n                    if(!iso3166a3) {\r\n                        return;\r\n                    }\r\n    \r\n                    const geojson = await getCountryGeojsonByIso3166a3(iso3166a3);\r\n                    const suffix = moment().format(\"_YYYYMMDDHHmmss\");\r\n                    \r\n                    if(!geojson) {\r\n                        return;\r\n                    }\r\n\r\n                    setGeojsonObjects(state => {\r\n                        const newState = [...state, {\r\n                            id: newId(),\r\n                            data: geojson,\r\n                            name: `${iso3166a3}${suffix}`,\r\n                            area: 0,\r\n                            featuresCount: 0,\r\n                            invalid: false,\r\n                            isSelected: false,\r\n                            loadedAt: new Date(),\r\n                            points: 0,\r\n                        }];\r\n                        localStorage.setItem(\"saved\", JSON.stringify(newState));\r\n    \r\n                        return newState;\r\n                    });\r\n                            \r\n                    setTimeout(() => {\r\n                        setUploading(false);\r\n                    }, 1000);\r\n                } catch (error) {\r\n                    setUploading(false);\r\n                }\r\n\r\n            })();\r\n            \r\n        }\r\n\r\n        onHide();\r\n    }\r\n\r\n    return <div className=\"explore-page\" {...getRootProps()}>\r\n        <DragOverlay isShowing={isDragActive}/>\r\n        <MapContainer\r\n            zoom={4}\r\n            center={center}\r\n            scrollWheelZoom={true}\r\n            className=\"explore-page__map\">\r\n            <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n         <MapHandler\r\n            onAction={onAction}\r\n            geojsonObjects={geojsonObjects}\r\n            center={center}\r\n         />\r\n        </MapContainer>\r\n        <PreviewDialog\r\n            id={id}\r\n            onHide={onHide}\r\n            onExport={onExport}\r\n            isShowing={pageMode === \"show-preview\"}\r\n            data={data}\r\n            />\r\n        <WarningDialog\r\n            isShowing={pageMode === \"show-warning\"}\r\n            warning={warning}\r\n            onHide={onHide}\r\n        />\r\n        <div className=\"explore-page__panel\">\r\n            <div className=\"explore-page__loader\">\r\n                <BarLoader speedMultiplier={.5} color={isUploading ? \"white\" : \"transparent\"} width=\"100%\"/>\r\n            </div>\r\n            <div className=\"explore-page__toolbar\"></div>\r\n            <div className=\"explore-page__list\">\r\n                {geojsonObjects.map(pr => <ImportItem\r\n                    key={pr.id}\r\n                    onDelete={onDelete}\r\n                    onExport={onExport}\r\n                    onToggle={onToggle}\r\n                    onShowWarning={onShowWarning}\r\n                    onShowOnMap={onShowOnMap}\r\n                    onShowGeojson={onShowGeojson}\r\n                    {...pr} />)}\r\n            </div>\r\n            \r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default ExplorePage;\r\n","import { FunctionComponent, memo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { Link } from 'react-router-dom';\r\nimport './linkIcon.scss';\r\n\r\ntype Props = {\r\n    className: string;\r\n    to: string;\r\n    icon: IconProp;\r\n}\r\n\r\nconst LinkIcon: FunctionComponent<Props> = ({\r\n    className,\r\n    to,\r\n    icon,\r\n    ...rest\r\n}) => {\r\n    return <Link {...rest} to={to} className={`link-icon ${className}`}><FontAwesomeIcon icon={icon}/></Link>\r\n}\r\n\r\nexport default memo(LinkIcon);","import React, { FunctionComponent, MouseEvent, memo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport './textIcon.scss';\r\n\r\ntype Props = {\r\n    text: string;\r\n    className: string;\r\n    onClick(event: MouseEvent<HTMLDivElement>): void\r\n    icon: IconProp;\r\n}\r\n\r\nconst TextIcon: FunctionComponent<Props> = ({\r\n    text,\r\n    className,\r\n    onClick,\r\n    icon,\r\n    ...rest\r\n}) => {\r\n    return <div {...rest} onClick={onClick} className={`text-icon ${className}`}>\r\n        <span className=\"text-icon__text\">{text}</span>\r\n        <FontAwesomeIcon icon={icon}/>\r\n    </div>\r\n}\r\n\r\nexport default memo(TextIcon);","import { FunctionComponent, memo } from 'react';\r\nimport { baseUrl } from 'appConstants';\r\nimport { faDownload, faInfo } from '@fortawesome/free-solid-svg-icons';\r\nimport './popup.scss';\r\nimport LinkIcon from 'components/LinkIcon';\r\nimport TextIcon from 'components/TextIcon';\r\n\r\ntype Props = {\r\n    fullName: string;\r\n    capital: string;\r\n    flagUrl: string;\r\n    countryCode: string;\r\n    center: [number, number];\r\n    area: number;\r\n    regions: number;\r\n    neigboursCount: number;\r\n    tags: string[];\r\n    onExport(): void;\r\n}\r\n\r\nconst Popup: FunctionComponent<Props> = ({\r\n    capital,\r\n    flagUrl,\r\n    fullName,\r\n    countryCode,\r\n    center,\r\n    area,\r\n    regions,\r\n    neigboursCount,\r\n    tags,\r\n    onExport\r\n}) => {\r\n\r\n    return <div className=\"popup\" style={{\r\n            top: `${center[1]}px`,\r\n            left: `${center[0]}px`,\r\n        }}>\r\n        <div className=\"popup__body\">\r\n            <div>\r\n                <img className=\"popup__image\" src={baseUrl + flagUrl}/>\r\n            </div>\r\n            <div className=\"popup__info\">\r\n                <div className=\"popup__field\">\r\n                    <div className=\"popup__fieldLabel\">Country:</div>\r\n                    <div className=\"popup__fieldValue\">{fullName}</div>\r\n                </div>\r\n                <div className=\"popup__field\">\r\n                    <div className=\"popup__fieldLabel\">Capital:</div>\r\n                    <div className=\"popup__fieldValue\">{capital}</div>\r\n                </div>\r\n                <div className=\"popup__field\">\r\n                    <div className=\"popup__fieldLabel\">Area:</div>\r\n                    <div className=\"popup__fieldValue\">{area} km2</div>\r\n                </div>\r\n                <div className=\"popup__field\">\r\n                    <div className=\"popup__fieldLabel\">Number of regions:</div>\r\n                    <div className=\"popup__fieldValue\">{regions}</div>\r\n                </div>\r\n                <div className=\"popup__field\">\r\n                    <div className=\"popup__fieldLabel\">Number of neigbours:</div>\r\n                    <div className=\"popup__fieldValue\">{neigboursCount}</div>\r\n                </div>\r\n                <div className=\"popup__badges\">\r\n                    {tags.map(pr => <div className=\"popup__badge\" key={pr}>{pr}</div>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"popup__footer\">\r\n            <TextIcon text=\"Geojson\" className=\"popup__\" onClick={onExport} icon={faDownload} />\r\n            <LinkIcon className=\"popup__iconButton\" to={`/country/${countryCode}`} icon={faInfo}/>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default memo(Popup);\r\n","import { FunctionComponent } from 'react';\r\nimport ToolTip from 'components/ToolTip';\r\nimport { baseUrl } from 'appConstants';\r\nimport './countryTooltip.scss';\r\nimport { Country } from 'models/GeoObject';\r\n\r\ntype Props = {\r\n    hasEntered: boolean,\r\n    x: number,\r\n    y: number,\r\n    country?: Country;\r\n}\r\n\r\nconst CountryTooltip: FunctionComponent<Props> = ({\r\n    hasEntered,\r\n    x,\r\n    y,\r\n    country\r\n}) => {\r\n    \r\n    return <ToolTip\r\n        show={hasEntered}\r\n        x={x}\r\n        y={y}>\r\n        {country ? <div className=\"geoObject\">\r\n            <div>\r\n                <img className=\"geoObject__image\" src={baseUrl + country.flagUrl}/>\r\n            </div>\r\n            <div className=\"geoObject__info\">\r\n                <div>Country: {country.fullName}</div>\r\n                <div>Capital: {country.capital}</div>\r\n            </div>\r\n        </div> : null}\r\n    </ToolTip>;\r\n}\r\n\r\nexport default CountryTooltip;","import React, { FunctionComponent, memo } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport './svgMap.scss';\r\n\r\ntype Props = {\r\n    onMouseMove(event: MouseEvent): void;\r\n    onMouseEnter(): void;\r\n    onMouseLeave(): void;\r\n    onClick(event: MouseEvent): void;\r\n    svg: string;\r\n}\r\n\r\nconst SvgMap: FunctionComponent<Props> = ({\r\n    onMouseEnter,\r\n    onMouseLeave,\r\n    onMouseMove,\r\n    onClick,\r\n    svg,\r\n}) => {\r\n    const svgWrapperRef = useRef<HTMLDivElement>(null);\r\n    \r\n    useEffect(() => {\r\n        const element = svgWrapperRef.current;\r\n       \r\n        if(!element) {\r\n            return;\r\n        }\r\n\r\n        const svg = element.firstChild;\r\n       \r\n        if(!(svg instanceof SVGElement)) {\r\n            return;\r\n        }\r\n        \r\n        const shape = svg.querySelector(\"g\")!;\r\n\r\n        const { x, y, width, height } = shape.getBoundingClientRect();\r\n        shape.style.transform = `translate(-${x/2}px, 0)`;\r\n\r\n        // const onScroll = (event: any) => {\r\n        //     const viewBox = svg.getAttribute('viewBox')?.split(\" \");\r\n\r\n        //     if(event.wheelDelta > 0) {\r\n        //         svg.setAttribute(\"viewBox\", \"0 0 400 400\");\r\n        //     }\r\n        //     else {\r\n        //         svg.setAttribute(\"viewBox\", \"0 0 800 800\");\r\n        //     }\r\n\r\n        // }\r\n        // svg.addEventListener(\"wheel\", onScroll);\r\n\r\n        const onContextMenu = (event: MouseEvent) => {\r\n            event.preventDefault();\r\n        };\r\n\r\n        svg.addEventListener(\"mousemove\", onMouseMove);\r\n        svg.addEventListener(\"mouseenter\", onMouseEnter);\r\n        svg.addEventListener(\"mouseleave\", onMouseLeave);\r\n        svg.addEventListener(\"click\", onClick);\r\n        svg.addEventListener(\"contextmenu\", onContextMenu);\r\n\r\n        return () => {\r\n            svg.removeEventListener(\"mousemove\", onMouseMove);\r\n            svg.removeEventListener(\"mouseenter\", onMouseEnter);\r\n            svg.removeEventListener(\"mouseleave\", onMouseLeave);\r\n            svg.removeEventListener(\"click\", onClick);\r\n            svg.removeEventListener(\"contextmenu\", onContextMenu);\r\n        }\r\n\r\n    }, [svgWrapperRef])\r\n\r\n    return <div\r\n        className=\"country-page__svg\"\r\n        ref={svgWrapperRef}\r\n        dangerouslySetInnerHTML={{ __html: svg }}\r\n    />\r\n}\r\n\r\nexport default memo(SvgMap);","import { FunctionComponent, useCallback, useEffect, useState } from 'react';\r\nimport { Country, GeoObject } from 'models/GeoObject';\r\nimport { getCountryGeojson, getCountryGeojsonLink, getWorldSvg, searchGeoObjects } from 'api';\r\nimport Popup from './Popup';\r\nimport CountryTooltip from './CountryTooltip';\r\nimport SvgMap from './SvgMap';\r\nimport './index.scss';\r\nimport { GridLoader } from 'react-spinners';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { download } from 'appUtils';\r\n\r\nconst WorldPage: FunctionComponent = () => {\r\n    \r\n    const [{x,y}, setPosition] = useState({\r\n        x: -1,\r\n        y: -1,\r\n    });\r\n    const [selected, setSelected] = useState<{\r\n        element: SVGElement;\r\n        item?: GeoObject;\r\n        center: [number, number];\r\n    }>();\r\n    const [svg, setSvg] = useState<string>(\"\");\r\n    const [hasEntered, setEntered] = useState(false);\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [geoObject, setGeoObject] = useState<Country>()\r\n    const [geoObjects, setGeoObjects] = useState<Country[]>([])\r\n\r\n    const onClick = useCallback((event: MouseEvent) => {\r\n        const target = event.target;\r\n\r\n        if(!(target instanceof SVGElement)) {\r\n            return;\r\n        }\r\n\r\n        if(selected) {\r\n            selected.element.classList.toggle(\"selected\");\r\n        }\r\n\r\n        const id = target.id.toLowerCase();\r\n        let item;\r\n\r\n        if(!id) {               \r\n            return;\r\n        }\r\n        \r\n        item = geoObjects.find(pr => pr.id === id)!;\r\n\r\n        target.classList.toggle(\"selected\");\r\n        const { x, y, width, height } = target.getBoundingClientRect();\r\n\r\n        setSelected({\r\n            element: target,\r\n            item,\r\n            center: [event.clientX - 100, event.clientY - 100],\r\n        });\r\n    }, [geoObjects, selected]);\r\n\r\n    const onMouseMove = useCallback((event: MouseEvent) => {\r\n        setPosition({\r\n            x: event.clientX,\r\n            y: event.clientY\r\n        })\r\n\r\n        const target = event.target;\r\n\r\n        if(!(target instanceof SVGElement)) {\r\n            setGeoObject(undefined);\r\n            return;\r\n        }\r\n\r\n        const id = target.id.toLowerCase();\r\n\r\n        if(!id) {\r\n            setGeoObject(undefined);\r\n            return;\r\n        }           \r\n            \r\n        const item = geoObjects.find(pr => pr.id === id);\r\n      \r\n        if(!item) {\r\n            setGeoObject(undefined);\r\n            return;\r\n        }\r\n        \r\n        setGeoObject(item);\r\n\r\n    }, [geoObjects]);\r\n\r\n    const onMouseEnter = useCallback(() => {\r\n        setEntered(true);\r\n    }, []);\r\n\r\n    const onMouseLeave = useCallback(() => {\r\n        setEntered(false);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const svg = await getWorldSvg();\r\n            setSvg(svg);\r\n            setLoading(false);\r\n        })();\r\n    }, []);\r\n\r\n    const onExport = () => {\r\n        (async () => {\r\n\r\n            try {\r\n                const item = selected!.item as Country;\r\n                const geojsonLink = await getCountryGeojsonLink(item.countryCode);\r\n                download(geojsonLink, `${item.countryCode}.json`);\r\n            } catch (error) {\r\n                NotificationManager.error(\"We could not find geojson for country\", \"Download error.\");\r\n            }\r\n            \r\n        })();\r\n    }\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const geoObjects = await searchGeoObjects({\r\n                phrase: \"\",\r\n                pageSize: 200,\r\n            });\r\n            setGeoObjects(geoObjects as Country[]);\r\n        })();\r\n        \r\n    }, [])\r\n\r\n    return <div className={`world-page ${isLoading ? \"center\" : \"\"}`}>\r\n        {isLoading ? <div className=\"world-page__loader\"><GridLoader color=\"white\" size={15} /></div> : <SvgMap\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseLeave={onMouseLeave}\r\n            onMouseMove={onMouseMove}\r\n            onClick={onClick}\r\n            svg={svg}\r\n        />}\r\n        <CountryTooltip\r\n            hasEntered={geoObject && hasEntered && selected?.item?.id !== geoObject.id || false}\r\n            country={geoObject}\r\n            x={x}\r\n            y={y}/>\r\n        {selected?.item?.type === \"country\" ? <Popup\r\n                onExport={onExport}\r\n                {...selected.item}\r\n                center={selected.center}/>\r\n                : null}\r\n    </div>;\r\n}\r\n\r\nexport default WorldPage;","import { FunctionComponent, useState } from 'react';\nimport CountryPage from 'components/CountryPage';\nimport Toolbar from 'components/Toolbar';\nimport { Route, Switch } from 'react-router-dom';\nimport SearchGeoObjectsDialog from 'components/SearchGeoObjectsDialog';\nimport DrawPage from 'components/DrawPage';\nimport ExplorePage from 'components/ExplorePage';\nimport { NotificationContainer } from 'react-notifications';\n\nimport './app.scss';\nimport WorldPage from 'components/WorldPage';\n\nconst App: FunctionComponent = () => {\n    const [isShowing, setShow] = useState(false);\n    const onSearch = () => setShow(true);\n    const onHide = () => setShow(false);\n\n    return <div className=\"app\">\n        <Toolbar onSearch={onSearch} />\n        <SearchGeoObjectsDialog\n            onHide={onHide}\n            onClick={onHide}\n            isShowing={isShowing}/>\n        <Switch>\n            <Route exact path=\"/\" component={WorldPage}/>\n            <Route exact path=\"/explore\" component={ExplorePage}/>\n            <Route exact path=\"/draw\" component={DrawPage}/>\n            <Route exact path=\"/country/:countryCode\" component={CountryPage}/>\n        </Switch>\n        <NotificationContainer/>\n    </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {\n    HashRouter as Router,\n} from \"react-router-dom\";\n\nimport './index.scss';\nimport 'react-notifications/lib/notifications.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}