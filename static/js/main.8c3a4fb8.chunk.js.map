{"version":3,"sources":["api.ts","appConstants.ts","components/CountryPage/SvgMap.tsx","appUtils/circleToPolygon.ts","appUtils/index.ts","components/Breadcrumbs.tsx","components/CountryPage/Navbar.tsx","components/ToolTip.tsx","components/CountryPage/RegionTooltip.tsx","components/CountryPage/UnderConstruction.tsx","components/CountryPage/index.tsx","components/Countries/Item.tsx","components/Countries/index.tsx","components/Toolbar.tsx","components/SearchGeoObjectsDialog/ListItem.tsx","components/SearchGeoObjectsDialog/SearchBox.tsx","components/Icon.tsx","components/SearchGeoObjectsDialog/index.tsx","components/DrawPage/MapHandler.tsx","components/DrawPage/PreviewDialog.tsx","components/DrawPage/Checkbox.tsx","components/DrawPage/Panel.tsx","components/DrawPage/index.tsx","components/ExplorePage/ImportItem.tsx","components/ExplorePage/DragOverlay.tsx","components/ExplorePage/GeoJSONItem.tsx","components/ExplorePage/Menu.tsx","components/ExplorePage/MapHandler.tsx","components/ExplorePage/PreviewDialog.tsx","components/ExplorePage/WarningDialog.tsx","components/ExplorePage/index.tsx","components/Home/index.tsx","App.tsx","index.tsx"],"names":["countryLookup","continentLookup","baseUrl","process","geoObjectsPromise","fetch","then","pr","json","searchGeoObjects","options","a","geoObjects","filter","search","toLowerCase","includes","phrase","slice","pageSize","getRegions","iso3166a2","getCountries","countries","type","getCountry","find","getCountrySvg","text","getCountryFromLatLng","lat","lng","PolygonLookup","polygon","properties","ISO_A3","getContinentFromLatLng","continent","getCountryGeojsonByIso3166a3","iso3166a3","country","getContinentGeojson","getCountryGeojson","SvgMap","onMouseEnter","onMouseLeave","onMouseMove","svg","svgWrapperRef","useRef","useEffect","element","current","firstChild","SVGElement","querySelector","getBoundingClientRect","y","width","height","addEventListener","removeEventListener","className","ref","dangerouslySetInnerHTML","__html","memo","defaultEarthRadius","toRadiansRatio","Math","PI","toDegreesRatio","toRadians","angleInDegrees","toDegrees","angleInRadians","offset","c1","distance","earthRadius","bearing","lat1","lon1","dByR","cos","b","c","sin","d","asin","atan2","isObjectNotArray","argument","Array","isArray","isUndefinedOrNull","undefined","circleToPolygon","center","radius","n","numberOfEdges","getNumberOfEdges","getEarthRadius","getBearing","direction","rightHandRule","getDirection","start","coordinates","i","coordinate","push","newId","random","toString","substr","toBase64DataUri","payload","Base64","encode","download","url","fileName","anchor","document","createElement","body","appendChild","style","display","href","click","getTextFromBlob","blob","Promise","resolve","reader","FileReader","onload","result","readAsText","latlngTextRegex","extractGeoObjectFromText","data","JSON","parse","length","error","latlngText","exec","Number","getGeojsonFriendlyName","name","feature","geometry","numberOfPoints","numberOfPolygons","features","moment","format","trySaveToLocalStorage","localStorage","setItem","stringify","Breadcrumbs","flagUrl","fullName","pathname","useLocation","exact","activeClassName","to","icon","faChevronRight","background","Navbar","mapType","onMapChange","onMapSelect","event","mapoption","currentTarget","dataset","onClick","ToolTip","x","show","children","styles","useSpring","opacity","div","top","left","RegionTooltip","hasEntered","region","alt","src","capital","UnderConstruction","size","faHardHat","DevInfo","map","useMapEvents","getCenter","console","log","getZoom","CountryPage","useState","setPosition","regions","isLoading","hasError","state","setState","setRegion","setEntered","setMapType","geojson","setGeojson","setSvg","useParams","useCallback","clientX","clientY","target","id","item","color","MapContainer","zoom","countryCenter","scrollWheelZoom","TileLayer","attribution","GeoJSON","capitalCenter","Marker","position","Popup","Item","neigboursCount","area","toggled","faMap","Countries","value","setValue","onItemClick","faSearch","onChange","placeholder","Toolbar","onSearch","faGlobe","faHome","faEye","faPencilAlt","ListItem","thumbnailUrl","imageUrl","setImageUrl","image","Image","onerror","SearchBox","onClear","_onChange","faTimes","Icon","disabled","rest","SearchGeoObjectsDialog","isShowing","onHide","items","setResults","_value","useDebounce","emptyPolygon","DrawHandler","drawOption","isDragging","setDragging","setCenter","created","setCreated","completed","setCompleted","setRadius","setData","dragging","disable","latlng","enable","mouseup","mousemove","distanceTo","selected","onEnter","key","window","Circle","eventHandlers","mousedown","PreviewDialog","onExport","exportType","parent","onOutsideClick","contains","navigator","clipboard","writeText","faClipboard","faDownload","Checkbox","checked","label","Panel","onPreview","onRemoveShapes","onAllItemsSelect","selectedCount","isPreviewShowing","dataNotAvailable","dataAvailable","onDrawOptionChange","onExportTypeChange","_onItemClick","onItemSelect","faTrash","faDrawPolygon","faCircle","DrawPage","setGeoObjects","setPreviewShow","setDrawOption","setExportType","geometries","wkt","replace","some","ImportItem","isSelected","loadedAt","featuresCount","warning","invalid","onDelete","onShowOnMap","onShowGeojson","onShowWarning","onToggle","_onShowWarning","Date","toLocaleString","faExclamationTriangle","faCrosshairs","faCode","DragOverlay","faFileUpload","GeoJSONItem","useMemo","onEachFeature","Menu","onAction","_onAction","action","MapHandler","geojsonObjects","bounds","menu","setMenu","propagatedFrom","contextmenu","originalEvent","preventDefault","setView","fitBounds","sourceTarget","WarningDialog","ExplorePage","setGeojsonObjects","isUploading","setUploading","setToggled","clipboardData","setCliboardData","setBounds","pageMode","setPageMode","onDrop","acceptedFiles","newState","file","geoObject","concat","useDropzone","getRootProps","isDragActive","savedObjects","getItem","checkClipboard","readText","setTimeout","onPaste","_event","getData","geojsonObject","geoJSON","getBounds","suffix","points","onUpload","reject","input","resolved","onFocus","remove","onchange","HTMLInputElement","from","files","faUpload","faList","speedMultiplier","menuItems","link","faPen","Home","App","setShow","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8c3a4fb8.chunk.js","sourcesContent":["import { baseUrl } from \"./appConstants\";\r\nimport { Country, GeoObject } from \"models/GeoObject\";\r\nimport { Region } from \"./models/Region\";\r\nimport { GeoJsonObject, FeatureCollection, Feature, Polygon, MultiPolygon } from \"geojson\";\r\nimport PolygonLookup from \"polygon-lookup\";\r\nimport { Neighbour } from \"models/Neighbour\";\r\n\r\ntype Options = {\r\n    phrase: string;\r\n    pageSize: number;\r\n}\r\n\r\nconst geoObjectsPromise = fetch(`${baseUrl}/assets/geoObjects.json`)\r\n        .then<GeoObject[]>(pr => pr.json());\r\n\r\nconst neighboursPromise = fetch(`${baseUrl}/assets/neighbours.json`)\r\n        .then<Neighbour[]>(pr => pr.json());\r\n\r\nexport const searchGeoObjects = async (options: Options): Promise<GeoObject[]> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n\r\n    return geoObjects\r\n        .filter(pr => pr.search.toLowerCase().includes(options.phrase))\r\n        .slice(0, options.pageSize);\r\n}\r\n\r\nexport const getRegions = (iso3166a2: string): Promise<Region[]> => {\r\n    \r\n    return fetch(`${baseUrl}/assets/regions/${iso3166a2}.json`)\r\n        .then(pr => pr.json());\r\n}\r\n\r\nexport const getCountries = async ({\r\n    pageSize,\r\n    phrase\r\n}: Options): Promise<Country[]> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n    const countries = geoObjects\r\n    .filter(pr => pr.type === \"country\"\r\n        && pr.search.toLowerCase().includes(phrase)) as Country[];\r\n\r\n    return countries.slice(0, pageSize);\r\n}\r\n\r\nexport const getCountry = async (iso3166a2: string): Promise<Country | undefined> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n    const countries = geoObjects.filter(pr => pr.type === \"country\") as Country[];\r\n\r\n    return countries\r\n        .find(pr => pr.iso3166a2.includes(iso3166a2));\r\n}\r\n\r\nexport const getWorldSvg = () => {\r\n    return fetch(`${baseUrl}/assets/shapes/world.svg`)\r\n        .then(pr => pr.text());\r\n}\r\n\r\nexport const getCountrySvg = (iso3166a2: string) => {\r\n    return fetch(`${baseUrl}/assets/shapes/${iso3166a2}/first-level.svg`)\r\n        .then(pr => pr.text());\r\n}\r\n\r\nexport const getCountryGeojsonLink = (iso3166a2: string): string => {\r\n    return `${baseUrl}/assets/geojson/${iso3166a2}.geojson`;\r\n}\r\n\r\nlet countryLookup: PolygonLookup;\r\n\r\nexport const getCountryFromLatLng = async (lat: number, lng: number): Promise<string | undefined> => {\r\n    \r\n    if(!countryLookup) {\r\n        const countries = await fetch(`${baseUrl}/assets/geojson/countries.geojson`)\r\n            .then<FeatureCollection>(pr => pr.json());\r\n            countryLookup = new PolygonLookup(countries);\r\n    }\r\n\r\n    const polygon = countryLookup.search(lat, lng) as Feature<Polygon | MultiPolygon, { ISO_A3: string }> | undefined;\r\n    \r\n    if(polygon) {\r\n        return polygon.properties.ISO_A3.toLowerCase();\r\n    }\r\n}\r\n\r\nlet continentLookup: PolygonLookup;\r\n\r\nexport const getContinentFromLatLng = async (lat: number, lng: number): Promise<string | undefined> => {\r\n    \r\n    if(!continentLookup) {\r\n        const countries = await fetch(`${baseUrl}/assets/geojson/continents.geojson`)\r\n            .then<FeatureCollection>(pr => pr.json());\r\n            continentLookup = new PolygonLookup(countries);\r\n    }\r\n\r\n    const polygon = continentLookup.search(lat, lng) as Feature<Polygon | MultiPolygon, { continent: string }> | undefined;\r\n    \r\n    if(polygon) {\r\n        return polygon.properties.continent.toLowerCase();\r\n    }\r\n}\r\n\r\nexport const getNeighbours = async (iso3166a2: string): Promise<Neighbour | undefined> => {\r\n    const neighbours = await neighboursPromise;\r\n    const item = neighbours.find(pr => pr.iso3166a2 === iso3166a2);\r\n\r\n    return item;\r\n}\r\n\r\nexport const getCountryGeojsonByIso3166a3 = async (iso3166a3: string): Promise<GeoJsonObject | undefined> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n    const countries = geoObjects.filter(pr => pr.type === \"country\") as Country[];\r\n\r\n    const country = countries.find(pr => pr.iso3166a3 === iso3166a3);\r\n    \r\n    return fetch(`${baseUrl}/assets/geojson/${country?.iso3166a2}.geojson`)\r\n        .then(pr => pr.json());\r\n}\r\n\r\nexport const getContinentGeojson = async (continent: string): Promise<GeoJsonObject | undefined> => {\r\n    return fetch(`${baseUrl}/assets/geojson/${continent}.geojson`)\r\n        .then(pr => pr.json());\r\n}\r\n\r\nexport const getCountryGeojson = (iso3166a2: string): Promise<GeoJsonObject | undefined> => {\r\n    return fetch(`${baseUrl}/assets/geojson/${iso3166a2}.geojson`)\r\n        .then(pr => pr.json());\r\n}","export const baseUrl = process.env.PUBLIC_URL || \"http://localhost:3000\";","import { FunctionComponent, memo } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport './svgMap.scss';\r\n\r\ntype Props = {\r\n    onMouseMove(event: MouseEvent): void;\r\n    onMouseEnter(): void;\r\n    onMouseLeave(): void;\r\n    svg: string;\r\n}\r\n\r\nconst SvgMap: FunctionComponent<Props> = ({\r\n    onMouseEnter,\r\n    onMouseLeave,\r\n    onMouseMove,\r\n    svg,\r\n}) => {\r\n    const svgWrapperRef = useRef<HTMLDivElement>(null);\r\n    \r\n    useEffect(() => {\r\n        const element = svgWrapperRef.current;\r\n \r\n        if(!element) {\r\n            return;\r\n        }\r\n\r\n        const svg = element.firstChild;\r\n       \r\n        if(!(svg instanceof SVGElement)) {\r\n            return;\r\n        }\r\n        \r\n        const shape = svg.querySelector(\"g\")!;\r\n\r\n        const { y, width, height } = shape.getBoundingClientRect();\r\n        //shape.style.transform = `translate(calc(50% - ${width / 2}px), calc(50% - ${(y + height)}px))`;\r\n\r\n        svg.addEventListener(\"mousemove\", onMouseMove);\r\n        svg.addEventListener(\"mouseenter\", onMouseEnter);\r\n        svg.addEventListener(\"mouseleave\", onMouseLeave);\r\n\r\n        return () => {\r\n            svg.removeEventListener(\"mousemove\", onMouseMove);\r\n            svg.addEventListener(\"mouseenter\", onMouseEnter);\r\n            svg.addEventListener(\"mouseleave\", onMouseLeave);\r\n        }\r\n\r\n    }, [onMouseEnter, onMouseLeave, onMouseMove, svgWrapperRef])\r\n\r\n    return <div\r\n        className=\"country-page__svg\"\r\n        ref={svgWrapperRef}\r\n        dangerouslySetInnerHTML={{ __html: svg }}\r\n    />\r\n}\r\n\r\nexport default memo(SvgMap);","import { Polygon } from \"geojson\";\r\n\r\nconst defaultEarthRadius = 6378137;\r\nconst defaultNumberOfEdges = 64;\r\n\r\ntype Options = {\r\n    numberOfEdges: number;\r\n    earthRadius: number;\r\n    rightHandRule: number;\r\n    bearing: number;\r\n}\r\n\r\nconst toRadiansRatio = Math.PI / 180;\r\nconst toDegreesRatio = 180 / Math.PI;\r\n\r\nfunction toRadians(angleInDegrees: number): number {\r\n    return angleInDegrees * toRadiansRatio;\r\n}\r\n\r\nfunction toDegrees(angleInRadians: number): number {\r\n    return angleInRadians * toDegreesRatio\r\n}\r\n\r\nfunction offset(c1: [number, number], distance: number, earthRadius: number, bearing: number): [number, number] {\r\n    const lat1 = toRadians(c1[1]);\r\n    const lon1 = toRadians(c1[0]);\r\n    const dByR = distance / earthRadius;\r\n\r\n    const a = Math.cos(dByR);\r\n    const b = Math.cos(lat1);\r\n    const c = Math.sin(dByR);\r\n    const d = Math.sin(lat1);\r\n\r\n    const lat = Math.asin(d * a + b * c * Math.cos(bearing));\r\n    const lon = lon1 + Math.atan2(Math.sin(bearing) * c * b, a - d * Math.sin(lat));\r\n\r\n    return [toDegrees(lon), toDegrees(lat)];\r\n}\r\n\r\nfunction getNumberOfEdges(options?: Partial<Options>) {\r\n    if (isUndefinedOrNull(options)) {\r\n        return defaultNumberOfEdges;\r\n    }\r\n    \r\n    if (isObjectNotArray(options)) {\r\n        const numberOfEdges = options.numberOfEdges;\r\n        return numberOfEdges === undefined ? defaultNumberOfEdges : numberOfEdges;\r\n    }\r\n\r\n    return defaultNumberOfEdges;\r\n}\r\n\r\nfunction getEarthRadius(options?: Partial<Options>) {\r\n    \r\n    if (isUndefinedOrNull(options)) {\r\n        return defaultEarthRadius;\r\n    }\r\n    \r\n    if(isObjectNotArray(options)) {\r\n        const earthRadius = options.earthRadius;\r\n        return earthRadius === undefined ? defaultEarthRadius : earthRadius;\r\n    }\r\n\r\n    return defaultEarthRadius;\r\n}\r\n\r\nfunction getDirection(options?: Partial<Options>){\r\n    if (isObjectNotArray(options) && options.rightHandRule){\r\n        return -1;\r\n    }\r\n    \r\n    return 1;\r\n}\r\n\r\nfunction getBearing(options?: Partial<Options>) {\r\n    if (isUndefinedOrNull(options)) {\r\n        return 0;\r\n    } \r\n    \r\n    if(isObjectNotArray(options)) {\r\n        const bearing = options.bearing;\r\n        return bearing === undefined ? 0 : bearing;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nfunction isObjectNotArray(argument: Partial<Options> | Array<any> | undefined): argument is Options {\r\n    return argument !== null && typeof argument === \"object\" && !Array.isArray(argument);\r\n}\r\n\r\nfunction isUndefinedOrNull(argument?: Partial<Options>): argument is undefined {\r\n    return argument === null || argument === undefined;\r\n}\r\n\r\nexport function circleToPolygon(center: [number, number], radius: number, options?: Partial<Options>): Polygon {\r\n    const n = getNumberOfEdges(options);\r\n    const earthRadius = getEarthRadius(options);\r\n    const bearing = getBearing(options);\r\n    const direction = getDirection(options);\r\n  \r\n    const start = toRadians(bearing);\r\n    const coordinates = new Array<[number, number]>();\r\n    \r\n    for (let i = 0; i < n; ++i) {\r\n        const coordinate = offset(center, radius, earthRadius, start + (direction * 2 * Math.PI * -i) / n);\r\n        coordinates.push(coordinate);\r\n    }\r\n    \r\n    coordinates.push(coordinates[0]);\r\n  \r\n    return {\r\n        type: \"Polygon\",\r\n        coordinates: [coordinates]\r\n    };\r\n};","import { GeoJsonObject, Feature, FeatureCollection } from 'geojson';\r\nimport { Base64 } from 'js-base64';\r\nimport moment from 'moment';\r\nimport { parse } from 'wkt';\r\nexport * from \"./circleToPolygon\";\r\n\r\nexport const newId = () => {    \r\n    return '_' + Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const toBase64DataUri = (text: string) => {\r\n    const payload = Base64.encode(text);\r\n    const dataUri = `data:text/plain;base64,${payload}`;\r\n    return dataUri;\r\n}\r\n\r\nexport const download = (url: string, fileName: string) => {\r\n    const anchor = document.createElement(\"a\");\r\n    document.body.appendChild(anchor);\r\n    anchor.style.display = \"none\";\r\n    anchor.href = url;\r\n    anchor.download = fileName;\r\n    anchor.click();\r\n}\r\n\r\nexport const getTextFromBlob = async(blob: Blob): Promise<string> => {\r\n    return await new Promise<string>((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = function() {\r\n            const text = reader.result as string;\r\n            resolve(text);\r\n        }; \r\n        reader.readAsText(blob);\r\n    })\r\n}\r\n\r\nconst latlngTextRegex = /(-?\\d*\\.?\\d+)[,\\s]*(-?\\d*\\.?\\d+)/;\r\n\r\nexport const extractGeoObjectFromText = (text: string): GeoJsonObject | undefined => {\r\n    \r\n    try {\r\n        const data = JSON.parse(text) as GeoJsonObject | number[];\r\n\r\n        if(Array.isArray(data)) {\r\n\r\n            if(!data.length || typeof data[0] !== \"number\") {\r\n                return;\r\n            }\r\n\r\n            return {\r\n                type: \"LineString\",\r\n                coordinates: [data],\r\n            } as GeoJsonObject;\r\n        }\r\n\r\n        return data;\r\n    }\r\n    catch(error) {\r\n        try {\r\n            const geojson = parse(text);\r\n            return geojson;\r\n        } catch (error) {\r\n        }\r\n    }\r\n\r\n    const latlngText = latlngTextRegex.exec(text);\r\n\r\n    if(latlngText && latlngText.length === 3) {\r\n        const [,lat,lng] = latlngText;\r\n        const type = \"Point\";\r\n        const coordinates = [Number(lat), Number(lng)];\r\n\r\n        return {\r\n            type,\r\n            coordinates,\r\n        } as GeoJsonObject;\r\n    }\r\n}\r\n\r\nexport const getGeojsonFriendlyName = (data: GeoJsonObject): string => {\r\n    let name = \"\";\r\n\r\n    if(data) {\r\n        switch(data.type) {\r\n            case \"Feature\":\r\n                name += \"feature\";\r\n                const feature = data as Feature;\r\n                if(feature.geometry.type === \"Polygon\") {\r\n                    name += \"_polygon\";\r\n                    const coordinates = feature.geometry.coordinates;\r\n\r\n                    if(coordinates.length && coordinates[0].length) {\r\n                        const numberOfPoints = coordinates[0].length;\r\n                        name += `_${numberOfPoints}`;\r\n                    }\r\n                }\r\n                if(feature.geometry.type === \"MultiPolygon\") {\r\n                    name += \"_multipolygon\";\r\n                    const coordinates = feature.geometry.coordinates;\r\n\r\n                    if(coordinates.length && coordinates[0].length) {\r\n                        const numberOfPolygons = coordinates[0].length;\r\n                        name += `_${numberOfPolygons}`;\r\n                    }\r\n                }\r\n            break;\r\n            case \"Point\":\r\n                name += \"_point\";\r\n            break;\r\n            case \"Polygon\":\r\n                name += \"_polygon\";\r\n            break;\r\n            case \"MultiPolygon\":\r\n                name += \"_multipolygon\";\r\n            break;\r\n            case \"LineString\":\r\n                name += \"linestring\";\r\n            break;\r\n            case \"FeatureCollection\":\r\n                const features = data as FeatureCollection;\r\n                name += `features_${features.features.length}`;\r\n            break;\r\n        }\r\n    }\r\n\r\n    name += moment().format(\"_YYYYMMDDHHmmss\");\r\n\r\n    return name;\r\n}\r\n\r\nexport const trySaveToLocalStorage = (data: any): boolean => {\r\n    try {\r\n        localStorage.setItem(\"saved\", JSON.stringify(data));\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const openFileDialog = () => new Promise<File | null>((resolve, reject) => {\r\n    const input = document.createElement(\"input\")\r\n    input.type = \"file\";\r\n    let resolved = false;\r\n\r\n    const onFocus = () => {\r\n        window.removeEventListener(\"focus\", onFocus)\r\n        setTimeout(() => {\r\n            if(!resolved) {\r\n                resolve(null);\r\n            }\r\n            input.remove();\r\n        }, 100);\r\n    }\r\n\r\n    window.addEventListener(\"focus\", onFocus)\r\n\r\n    input.onchange = (event) => {\r\n        if (!(event.target instanceof HTMLInputElement)) {\r\n            return;\r\n        }\r\n\r\n        resolved = true;\r\n        const [file] = Array.from(event.target.files!);\r\n        resolve(file);\r\n    }\r\n\r\n    input.click();\r\n})\r\n\r\nexport const backgroundImageUrl = (url: string) => ({\r\n    background: `url(${url}) center center / contain no-repeat`\r\n})","import { faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { baseUrl } from 'appConstants';\r\nimport { backgroundImageUrl } from 'appUtils';\r\nimport { FunctionComponent, memo } from 'react';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\nimport './breadcrumbs.scss';\r\n\r\ntype Props = {\r\n    flagUrl?: string;\r\n    fullName?: string;\r\n}\r\n\r\nconst Breadcrumbs: FunctionComponent<Props> = ({\r\n    flagUrl,\r\n    fullName,\r\n}) => {\r\n    const { pathname } = useLocation();\r\n    \r\n    return <div className=\"breadcrumbs\">\r\n        <NavLink\r\n            exact\r\n            activeClassName=\"breadcrumbs__node--active\"\r\n            className=\"breadcrumbs__node\" to=\"/\">\r\n            Home\r\n        </NavLink>\r\n        {pathname === \"/explore\" ? <>\r\n            <div className=\"breadcrumbs__separator\">\r\n                <FontAwesomeIcon icon={faChevronRight}/>\r\n            </div>\r\n            <NavLink\r\n                exact\r\n                activeClassName=\"breadcrumbs__node--active\"\r\n                className=\"breadcrumbs__node\" to=\"/explore\">\r\n                Explore\r\n            </NavLink>\r\n        </> : null}\r\n        {pathname.includes(\"/country\") || pathname.includes(\"/countries\") ? <>\r\n            <div className=\"breadcrumbs__separator\">\r\n                <FontAwesomeIcon icon={faChevronRight}/>\r\n            </div>\r\n            <NavLink\r\n                exact\r\n                activeClassName=\"breadcrumbs__node--active\"\r\n                className=\"breadcrumbs__node\" to=\"/countries\">\r\n                Countries\r\n            </NavLink>\r\n        </> : null}\r\n        {flagUrl && fullName ? <>\r\n            <div className=\"breadcrumbs__separator\">\r\n                <FontAwesomeIcon icon={faChevronRight}/>\r\n            </div>\r\n            <div className=\"countryNode\">\r\n                <div className=\"countryNode__flag\" style={backgroundImageUrl(baseUrl + flagUrl)}></div>\r\n                <div className=\"countryNode__title\">{fullName}</div>\r\n            </div>\r\n        </>: null}\r\n    </div>;\r\n}\r\n\r\nexport default memo(Breadcrumbs);","import { FunctionComponent, MouseEvent, memo } from 'react';\r\nimport { MapType } from './types';\r\nimport Breadcrumbs from 'components/Breadcrumbs';\r\nimport './navbar.scss';\r\n\r\ntype Props = {\r\n    flagUrl: string;\r\n    fullName: string;\r\n    mapType: MapType;\r\n    onMapChange(mapType: MapType): void;\r\n}\r\n\r\nconst Navbar: FunctionComponent<Props> = ({\r\n    flagUrl,\r\n    fullName,\r\n    mapType,\r\n    onMapChange\r\n}) => {\r\n\r\n    const onMapSelect = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { mapoption } = event.currentTarget.dataset;\r\n        onMapChange(mapoption as MapType);\r\n    }\r\n\r\n    return <div className=\"country-page__navbar\">\r\n        <Breadcrumbs\r\n            flagUrl={flagUrl}\r\n            fullName={fullName}\r\n        />\r\n        <div className=\"country-page__navbarMapSwitch\">\r\n            <div\r\n                onClick={onMapSelect}\r\n                data-mapoption=\"leaflet\"\r\n                className={`country-page__navbarMapOption ${mapType === \"leaflet\" ? \"country-page__navbarMapOption--selected\" : null}`}>\r\n                    Leaflet</div>\r\n            <div\r\n                onClick={onMapSelect}\r\n                data-mapoption=\"svg\"\r\n                className={`country-page__navbarMapOption ${mapType === \"svg\" ? \"country-page__navbarMapOption--selected\" : null}`}>\r\n                    Svg</div>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default memo(Navbar);\r\n","import React, { FunctionComponent } from 'react';\r\nimport { animated, useSpring } from 'react-spring';\r\nimport './tooltip.scss';\r\n\r\ntype Props = {\r\n    show: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nconst ToolTip: FunctionComponent<Props> = ({\r\n    x,\r\n    y,\r\n    show,\r\n    children\r\n}) => {\r\n    const styles = useSpring({\r\n        opacity: show ? 1 : 0,\r\n    })\r\n\r\n    return <animated.div className=\"tooltip\" style={{\r\n        ...styles,\r\n        top: `${y - 60}px`,\r\n        left: `${x - 90}px`,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"block\")\r\n    }}>\r\n        {children}\r\n    </animated.div>;\r\n}\r\n\r\nexport default ToolTip;\r\n","import React, { FunctionComponent, memo } from 'react';\r\nimport ToolTip from 'components/ToolTip';\r\nimport { baseUrl } from 'appConstants';\r\nimport { Region } from 'models/Region';\r\nimport './regionTooltip.scss';\r\n\r\ntype Props = {\r\n    hasEntered: boolean;\r\n    region?: Region;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nconst RegionTooltip: FunctionComponent<Props> = ({\r\n    hasEntered,\r\n    region,\r\n    x,\r\n    y,\r\n}) => {\r\n\r\n    return <ToolTip\r\n        show={hasEntered && !!region}\r\n        x={x}\r\n        y={y}>\r\n        {region ? <div className=\"region\">\r\n            <div>\r\n                <img alt={region.region} className=\"region__image\" src={baseUrl + region.flagUrl}/>\r\n            </div>\r\n            <div className=\"region__info\">\r\n                <div>Region: {region.region}</div>\r\n                <div>Capital: {region.capital}</div>\r\n            </div>\r\n            \r\n        </div> : null}\r\n    </ToolTip>;\r\n}\r\n\r\nexport default memo(RegionTooltip);\r\n","import React, { FunctionComponent, memo } from 'react';\r\nimport { faHardHat } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './underConstruction.scss';\r\n\r\nconst UnderConstruction: FunctionComponent = ({\r\n}) => {\r\n \r\n    return <div className=\"country-page__info\">\r\n    <div>\r\n        <FontAwesomeIcon size=\"10x\" icon={faHardHat} />\r\n    </div>\r\n    <div>\r\n        <div className=\"country-page__infoTitle\">\r\n            Page is under construction\r\n        </div>\r\n        <div className=\"country-page__infoDescription\">\r\n            The data required for this page might not be prepared or an error occurred while loading it.\r\n        </div>\r\n    </div>\r\n</div>\r\n}\r\n\r\nexport default memo(UnderConstruction);","import { FunctionComponent } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useCallback } from 'react';\r\nimport { Region } from 'models/Region';\r\nimport { getCountry, getCountryGeojson, getCountrySvg, getRegions } from 'api';\r\nimport { MapContainer, TileLayer, GeoJSON, useMapEvents, Marker, Popup } from 'react-leaflet';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Country } from \"models/GeoObject\";\r\nimport { GeoJsonObject } from \"geojson\";\r\nimport GridLoader from 'react-spinners/GridLoader';\r\nimport SvgMap from './SvgMap';\r\nimport Navbar from './Navbar';\r\nimport RegionTooltip from './RegionTooltip';\r\nimport { MapType } from './types';\r\nimport './index.scss';\r\nimport UnderConstruction from './UnderConstruction';\r\n\r\ntype State = {\r\n    regions: Region[];\r\n    country?: Country;    \r\n    isLoading: true;\r\n    hasError: boolean;\r\n} | {\r\n    regions: Region[];\r\n    country: Country;\r\n    isLoading: false;\r\n    hasError: boolean;\r\n} | {\r\n    regions?: Region[];\r\n    country?: Country;\r\n    isLoading: false;\r\n    hasError: true;\r\n}\r\n\r\n\r\n\r\nconst CountryPage: FunctionComponent = () => {\r\n    const [{x,y}, setPosition] = useState({\r\n        x: -1,\r\n        y: -1,\r\n    });\r\n    const [state, setState] = useState<State>({\r\n        regions: [],\r\n        isLoading: true,\r\n        hasError: false,\r\n    });\r\n    const [region, setRegion] = useState<Region>();\r\n    const [hasEntered, setEntered] = useState(false);\r\n    const [mapType, setMapType] = useState<MapType>(\"leaflet\");\r\n    const [geojson, setGeojson] = useState<GeoJsonObject>();\r\n    const [svg, setSvg] = useState<string>(\"\");\r\n    const { iso3166a2 } = useParams<{ iso3166a2: string }>();\r\n\r\n    useEffect(() => {\r\n\r\n        if(!iso3166a2 || !state.isLoading) {\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            try {\r\n                const country = await getCountry(iso3166a2);\r\n                const regions = await getRegions(iso3166a2);\r\n\r\n                if(!country) {\r\n                    setState({\r\n                        hasError: true,\r\n                        isLoading: false,\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                setState({\r\n                    country,\r\n                    regions,\r\n                    isLoading: false,\r\n                    hasError: false,\r\n                });\r\n            } catch (error) {\r\n                console.log(error)\r\n                setState({\r\n                    hasError: true,\r\n                    isLoading: false,\r\n                });\r\n            }\r\n        })();\r\n        \r\n    }, [state, iso3166a2])\r\n\r\n    const onMouseMove = useCallback((event: MouseEvent) => {\r\n        if(state.isLoading || state.hasError) {\r\n            return;\r\n        }\r\n        \r\n        setPosition({\r\n            x: event.clientX,\r\n            y: event.clientY\r\n        })\r\n        \r\n        if(event.target instanceof SVGElement) {\r\n            const id = event.target.id;\r\n\r\n            if(id) {\r\n                const item = state.regions.find(pr => pr.id === id);\r\n\r\n                if(item) {\r\n                    setRegion(item);\r\n                }\r\n            }\r\n            else {\r\n                setRegion(undefined);\r\n            }\r\n        }\r\n    }, [state]);\r\n\r\n    const onMouseEnter = () => {\r\n        setEntered(true);\r\n    }\r\n\r\n    const onMouseLeave = () => {\r\n        setEntered(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        (async () => {\r\n\r\n            try {\r\n                if(mapType === \"svg\") {\r\n                    const svg = await getCountrySvg(iso3166a2);\r\n                    setSvg(svg);\r\n                }\r\n                else {\r\n                    const geojson = await getCountryGeojson(iso3166a2);\r\n                    setGeojson(geojson);\r\n                }\r\n            } catch (error) {\r\n                \r\n            }\r\n\r\n         \r\n        })();\r\n       \r\n    }, [iso3166a2, mapType]);\r\n\r\n    return <div className={`country-page ${state.isLoading || state.hasError ? \"center\": null}`}>\r\n        {state.isLoading ? <GridLoader color=\"white\" size={15} /> :\r\n        state.hasError ? <UnderConstruction/>\r\n        : <>\r\n            <Navbar\r\n                flagUrl={state.country.flagUrl}\r\n                fullName={state.country.fullName}\r\n                mapType={mapType}\r\n                onMapChange={setMapType}\r\n            />\r\n            <RegionTooltip\r\n                hasEntered={hasEntered}\r\n                x={x}\r\n                y={y}\r\n                region={region}\r\n            />\r\n            <div className=\"country-page__map\">\r\n                {mapType === \"svg\" ? <SvgMap\r\n                    onMouseEnter={onMouseEnter}\r\n                    onMouseLeave={onMouseLeave}\r\n                    onMouseMove={onMouseMove}\r\n                    svg={svg}\r\n                /> :\r\n                <MapContainer\r\n                    zoom={state.country.zoom}\r\n                    center={state.country.countryCenter}\r\n                    scrollWheelZoom={true}\r\n                    className=\"country-page__leafletMap\">\r\n                    <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    {geojson ? <GeoJSON data={geojson}/> : null}\r\n                    {state.country.capitalCenter ? <Marker position={state.country.capitalCenter}>\r\n                        <Popup>\r\n                            {state.country.capital}\r\n                        </Popup>\r\n                    </Marker> : null}\r\n                    <DevInfo/>\r\n                </MapContainer>}\r\n            </div>\r\n            <div className=\"country-page__footer\">\r\n                \r\n            </div>\r\n        </>}\r\n    </div>;\r\n}\r\n\r\nconst DevInfo = () => {\r\n    const map = useMapEvents({\r\n        click(event) {\r\n            const { lat, lng } = map.getCenter();\r\n            \r\n            console.log([lat, lng], map.getZoom());\r\n        }\r\n    })\r\n\r\n    return null;\r\n}\r\n\r\nexport default CountryPage;\r\n","import { FunctionComponent, MouseEvent } from 'react';\r\nimport { Country } from \"models/GeoObject\";\r\nimport { baseUrl } from 'appConstants';\r\nimport './item.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMap } from '@fortawesome/free-solid-svg-icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype Props = Country & {\r\n    onClick(event: MouseEvent<HTMLDivElement>): void;\r\n    toggled: boolean;\r\n};\r\n\r\nconst Item: FunctionComponent<Props> = ({\r\n    id,\r\n    fullName,\r\n    capital,\r\n    iso3166a2,\r\n    iso3166a3,\r\n    flagUrl,\r\n    neigboursCount,\r\n    area,\r\n    onClick,\r\n    toggled,\r\n}) => {\r\n   \r\n    return <div data-id={id} className={`country-item`} onClick={onClick}>\r\n        <div className=\"country-item__row\">\r\n            <div className=\"country-item__column\">{fullName}</div>\r\n            <div className=\"country-item__column\">{capital}</div>\r\n            <div className=\"country-item__column\">\r\n            <div className=\"country-item__flag\" style={{\r\n                    background: `url(${baseUrl + flagUrl}) center center / cover`\r\n                }}/>\r\n            </div>\r\n            <div className=\"country-item__column\">{iso3166a2}</div>\r\n            <div className=\"country-item__column\">{iso3166a3}</div>\r\n        </div>\r\n        {toggled ? <div className=\"country-item__details\">\r\n            <div className=\"country-item__field\">Neighbours: {neigboursCount}</div>\r\n            <div className=\"country-item__field\">Area: {area} km2</div>\r\n            <div className=\"country-item__bottom\">\r\n                <Link className=\"country-item__link\" to={`/country/${iso3166a2}`}><FontAwesomeIcon icon={faMap}/></Link>\r\n            </div>\r\n        </div> : null}\r\n    </div>;\r\n}\r\n\r\n\r\nexport default Item;\r\n","import { MouseEvent, ChangeEvent, FunctionComponent } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { getCountries } from 'api';\r\nimport { Country } from \"models/GeoObject\";\r\nimport Item from './Item';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport Breadcrumbs from 'components/Breadcrumbs';\r\nimport './index.scss';\r\n\r\ntype State = {\r\n    countries: (Country & { toggled?: boolean })[];\r\n    isLoading: boolean;\r\n    hasError: boolean;\r\n}\r\n\r\nconst Countries: FunctionComponent = () => {\r\n    const [value, setValue] = useState(\"\");\r\n    const [state, setState] = useState<State>({\r\n        countries: [],\r\n        isLoading: true,\r\n        hasError: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        (async () => {\r\n            try {\r\n                const countries = await getCountries({\r\n                    pageSize: 25,\r\n                    phrase: value.toLowerCase(),\r\n                });\r\n\r\n                setState({\r\n                    countries,\r\n                    isLoading: false,\r\n                    hasError: false,\r\n                });\r\n            } catch (error) {\r\n                setState({\r\n                    countries: [],\r\n                    hasError: true,\r\n                    isLoading: false,\r\n                });\r\n            }\r\n        })();\r\n        \r\n    }, [value])\r\n\r\n    const onItemClick = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        setState(state => ({\r\n            ...state,\r\n            countries: state.countries.map(pr => ({...pr, toggled: pr.id === id ? !pr.toggled : false}))\r\n        }));\r\n    }\r\n\r\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value;\r\n        setValue(value);\r\n    }\r\n\r\n    return <div className={`countries-page`}>\r\n        <Breadcrumbs/>\r\n        <div className=\"search\">\r\n            <div className=\"search__icon\">\r\n                <FontAwesomeIcon icon={faSearch}/>\r\n            </div>\r\n            <input\r\n                className={`search__input`}\r\n                value={value}\r\n                onChange={onChange}\r\n                placeholder=\"Search...\"\r\n                type=\"text\"/>\r\n        </div>\r\n        <div>\r\n            <div className=\"countries-page__headers\">\r\n                <div className=\"countries-page__header\">Full Name</div>\r\n                <div className=\"countries-page__header\">Capital</div>\r\n                <div className=\"countries-page__header\">Flag</div>\r\n                <div className=\"countries-page__header\">ISO 3166-2</div>\r\n                <div className=\"countries-page__header\">ISO 3166-3</div>\r\n            </div>\r\n            {state.countries.map(pr => <Item\r\n                toggled={pr.toggled || false}\r\n                onClick={onItemClick}\r\n                key={pr.id}\r\n                {...pr}/>)}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\n\r\nexport default Countries;\r\n","import { FunctionComponent, memo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEye, faGlobe, faHome, faPencilAlt, faSearch } from '@fortawesome/free-solid-svg-icons'\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport './toolbar.scss';\r\n\r\ntype Props = {\r\n    onSearch(): void;\r\n}\r\n\r\nconst Toolbar: FunctionComponent<Props> = ({\r\n    onSearch\r\n}) => {\r\n\r\n    return <div className=\"toolbar\">\r\n        <Link className=\"toolbar__logo\" to={`/`}>\r\n            <div className=\"toolbar__logoText\">Geo-shapes</div>\r\n            <div className=\"toolbar__logoIcon\">\r\n                <FontAwesomeIcon icon={faGlobe}/>\r\n            </div>\r\n        </Link>\r\n        <div className=\"toolbar__menu\">\r\n            <NavLink activeClassName=\"toolbar__iconButton--selected\" className=\"toolbar__iconButton\" exact to={`/`}>\r\n                <FontAwesomeIcon icon={faHome}/>\r\n            </NavLink>\r\n            <NavLink activeClassName=\"toolbar__iconButton--selected\" className=\"toolbar__iconButton\" exact to={`/explore`}>\r\n                <FontAwesomeIcon icon={faEye}/>\r\n            </NavLink>\r\n            <NavLink activeClassName=\"toolbar__iconButton--selected\" className=\"toolbar__iconButton\" exact to={`/draw`}>\r\n                <FontAwesomeIcon icon={faPencilAlt}/>\r\n            </NavLink>\r\n            <div className=\"toolbar__iconButton\" onClick={onSearch}>\r\n                <FontAwesomeIcon icon={faSearch}/>\r\n            </div>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default memo(Toolbar);\r\n","import { FunctionComponent, memo, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { baseUrl } from '../../appConstants';\r\nimport { Country } from 'models/GeoObject';\r\nimport './listItem.scss';\r\n\r\ntype Props = Country & {\r\n    onClick(): void;\r\n}\r\n\r\nconst ListItem: FunctionComponent<Props> = ({\r\n    capital,\r\n    iso3166a2,\r\n    flagUrl,\r\n    fullName,\r\n    id,\r\n    thumbnailUrl,\r\n    type,\r\n    onClick,\r\n}) => {\r\n    const [imageUrl, setImageUrl] = useState<string | undefined>(baseUrl + thumbnailUrl);\r\n\r\n    useEffect(() => {\r\n        if(!imageUrl) {\r\n            return;\r\n        }\r\n\r\n        const image = new Image();\r\n        image.onerror = () => setImageUrl(undefined)\r\n        image.src = imageUrl;\r\n        \r\n    }, [imageUrl]);\r\n\r\n    return <div key={id} className=\"geoObject\">\r\n        <div className=\"geoObject__imageWrapper\">\r\n            <div className=\"geoObject__image\" style={{\r\n            background: imageUrl ? `url(${imageUrl}) center center / cover` : \"gray\"\r\n        }}></div>\r\n        </div>\r\n        <Link className=\"geoObject__link\" onClick={onClick} to={`/country/${iso3166a2}`}>\r\n            <div>\r\n                <div className=\"geoObject__name\">{fullName}</div>\r\n                <div className=\"geoObject__type\">{capital}</div>\r\n            </div>\r\n            <div className=\"geoObject__flag\" style={{\r\n                background: `url(${baseUrl + flagUrl}) center center / cover`\r\n            }}></div>\r\n        </Link>\r\n    </div>\r\n}\r\n\r\nexport default memo(ListItem);","import { ChangeEvent, FunctionComponent } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { useCallback } from 'react';\r\nimport './searchBox.scss';\r\n\r\ntype Props = {\r\n    value?: string;\r\n    onChange(value: string): void;\r\n    onClear(): void;\r\n}\r\n\r\nconst SearchBox: FunctionComponent<Props> = ({\r\n    value,\r\n    onChange,\r\n    onClear\r\n}) => {\r\n    const _onChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value;\r\n        onChange(value);\r\n    }, [onChange]);\r\n\r\n    return <div className={`searchbox ${value ? \"searchbox--typed\": \"\"}`}>\r\n    <div className={`searchbox__icon ${value ? \"searchbox__icon--active\": \"\"}`}><FontAwesomeIcon icon={faSearch}/></div>\r\n        <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={_onChange}\r\n            className=\"searchbox__input\"\r\n            placeholder=\"I am looking for...\"\r\n            />\r\n        {value ? <div onClick={onClear} className=\"searchbox__clearIcon\"><FontAwesomeIcon icon={faTimes}/></div> : null}\r\n    </div>\r\n}\r\n\r\nexport default SearchBox;","import React, { FunctionComponent, MouseEvent, memo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport './icon.scss';\r\n\r\ntype Props = {\r\n    className?: string;\r\n    onClick?(event: MouseEvent<HTMLDivElement>): void\r\n    icon: IconProp;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst Icon: FunctionComponent<Props> = ({\r\n    className,\r\n    onClick,\r\n    icon,\r\n    disabled = false,\r\n    ...rest\r\n}) => {\r\n    return <div\r\n        {...rest}\r\n        onClick={onClick}\r\n        className={`icon ${disabled ? \"icon--disabled\" : \"\"} ${onClick ? \"icon--interactive\" : \"\"} ${className}`}>\r\n            <FontAwesomeIcon icon={icon}/>\r\n    </div>\r\n}\r\n\r\nexport default memo(Icon);","import React, { FunctionComponent } from 'react';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport GridLoader from 'react-spinners/GridLoader';\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport { searchGeoObjects } from 'api';\r\nimport { GeoObject } from 'models/GeoObject';\r\nimport useDebounce from 'use-debounce/lib/useDebounce';\r\nimport ListItem from './ListItem';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport SearchBox from './SearchBox';\r\nimport Icon from 'components/Icon';\r\nimport './index.scss';\r\n\r\ntype Props = {\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    onClick(): void;\r\n}\r\n\r\ntype State = {\r\n    isLoading: boolean;\r\n    items: GeoObject[];\r\n}\r\n\r\nconst SearchGeoObjectsDialog: FunctionComponent<Props> = ({\r\n    isShowing,\r\n    onHide,\r\n    onClick,\r\n}) => {\r\n    const [{\r\n        isLoading,\r\n        items\r\n    }, setResults] = useState<State>({\r\n        isLoading: true,\r\n        items: [],\r\n    });\r\n    const [_value, setValue] = useState(\"\");\r\n    const [value] = useDebounce(_value, 1000);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    const onClear = useCallback(() => {\r\n        setValue(\"\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setResults({\r\n            isLoading: true,\r\n            items: [],\r\n        });\r\n    }, [_value]);\r\n\r\n    useEffect(() => {\r\n\r\n        if(isShowing) {\r\n            (async () => {\r\n                const result = await searchGeoObjects({\r\n                    pageSize: 10,\r\n                    phrase: value,\r\n                });\r\n    \r\n                setResults({\r\n                    isLoading: false,\r\n                    items: result,\r\n                });\r\n            })()\r\n        }\r\n        else {\r\n            setResults({\r\n                isLoading: true,\r\n                items: [],\r\n            });\r\n            setValue(\"\");\r\n        }\r\n\r\n    }, [isShowing, value]);\r\n\r\n    return <animated.div style={{\r\n            ...styles,\r\n            display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n        }} className={`searchDialog ${isShowing ? \"\" : \"\"}`}>\r\n        <div className=\"searchDialog__navbar\">\r\n            <Icon onClick={onHide} className=\"searchDialog__close\" icon={faTimes}/>\r\n        </div>\r\n        <div className=\"searchDialog__body\">\r\n            <div className=\"searchDialog__top\">\r\n                <SearchBox\r\n                    onChange={setValue}\r\n                    onClear={onClear}\r\n                    value={_value}\r\n                />\r\n            </div>\r\n            <div className={`searchDialog__list ${isLoading ? \"searchDialog__list--center\": \"\"}`}>\r\n                {isLoading ? <GridLoader color=\"white\" size={15} /> : \r\n                    items.map(pr => pr.type === \"country\" && <ListItem onClick={onClick} key={pr.id} {...pr} />)}\r\n            </div>\r\n        </div>\r\n    </animated.div>\r\n}\r\n\r\nexport default SearchGeoObjectsDialog;\r\n\r\n","import { circleToPolygon, newId }  from 'appUtils';\r\nimport { FunctionComponent, useEffect, useState } from 'react';\r\nimport { GeoJSON, Circle, useMapEvents } from 'react-leaflet';\r\nimport { DrawOption, GeoObject } from './types';\r\n\r\ntype State = {\r\n    type: \"LineString\" | \"Polygon\";\r\n    coordinates: number[][] | number[][][];\r\n}\r\n\r\ntype Props = {\r\n    onChange(data: GeoObject): void;\r\n    geoObjects: GeoObject[];\r\n    drawOption: DrawOption;\r\n}\r\n\r\nconst emptyPolygon = {\r\n    type: \"Polygon\" as const,\r\n    coordinates: [[]]\r\n};\r\n\r\nconst DrawHandler: FunctionComponent<Props> = ({\r\n    drawOption,\r\n    geoObjects,\r\n    onChange\r\n}) => {\r\n    const [isDragging, setDragging] = useState(false);\r\n    const [center, setCenter] = useState({\r\n        lat: 50,\r\n        lng: -1,\r\n    });\r\n    const [created, setCreated] = useState(false);\r\n    const [completed, setCompleted] = useState(false);\r\n    const [radius, setRadius] = useState(10);\r\n    const [data, setData] = useState<State>(emptyPolygon);\r\n    const map = useMapEvents({\r\n        click: (event) => {\r\n            if(!created && drawOption === \"circle\") {\r\n                map.dragging.disable();\r\n                setCreated(true);\r\n                setCenter(event.latlng);\r\n                setRadius(100);\r\n            }\r\n            if(!completed && created && drawOption === \"circle\") {\r\n                map.dragging.enable();\r\n                setCompleted(true);\r\n            }\r\n            if(drawOption === \"polygon\") {\r\n                const { lat, lng } = event.latlng;\r\n                const item = [lng, lat];\r\n                setData(state => {\r\n                    const coordinates = [...state.coordinates[0] as number[][], item];\r\n                    \r\n                    return {\r\n                        ...state,\r\n                        coordinates: [coordinates],\r\n                    };\r\n                });\r\n            }\r\n            if(drawOption === \"lineString\") {\r\n                const { lat, lng } = event.latlng;\r\n                const item = [lng, lat];\r\n                setData(state => {\r\n                    const coordinates = [...state.coordinates as number[][], item];\r\n                   \r\n                    return {\r\n                        ...state,\r\n                        coordinates,\r\n                    };\r\n                });\r\n            }\r\n        },\r\n        mouseup: (event) => {\r\n            \r\n        },\r\n        mousemove(event) {\r\n            if(created && !completed && drawOption === \"circle\") {\r\n                const radius = event.latlng.distanceTo(center);\r\n                setRadius(radius);\r\n            }\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(completed && drawOption === \"lineString\") {\r\n            \r\n            onChange({\r\n                id: newId(),\r\n                selected: false,\r\n                data,\r\n            });\r\n            setData(emptyPolygon);\r\n            setCompleted(false);\r\n        }\r\n\r\n        if(completed && drawOption === \"polygon\") {\r\n            \r\n            onChange({\r\n                id: newId(),\r\n                selected: false,\r\n                data,\r\n            });\r\n            setData(emptyPolygon);\r\n            setCompleted(false);\r\n        }\r\n\r\n        if(completed && drawOption === \"circle\") {\r\n            const data = circleToPolygon([center.lng, center.lat], radius);\r\n            \r\n            setCreated(false);\r\n            setCompleted(false);\r\n            onChange({\r\n                id: newId(),\r\n                selected: false,\r\n                data,\r\n            });\r\n        }\r\n    }, [data, onChange, radius, center, drawOption, completed]);\r\n\r\n    useEffect(() => {\r\n\r\n        if(drawOption === \"none\") {\r\n            return;\r\n        }\r\n       \r\n        if((drawOption === \"polygon\" && data.type === \"Polygon\")\r\n        || (drawOption === \"circle\" && data.type === \"Polygon\")\r\n        || (drawOption === \"lineString\" && data.type === \"LineString\")) {\r\n            return;\r\n        }\r\n\r\n        setData(state => {\r\n            let type: \"LineString\" | \"Polygon\" = \"LineString\";\r\n            let coordinates: number[][] | number[][][] = [];\r\n\r\n            if(drawOption === \"lineString\") {\r\n                type = \"LineString\";\r\n                coordinates = [];\r\n            }\r\n\r\n            if(drawOption === \"circle\") {\r\n                type = \"Polygon\";\r\n                coordinates = [[]];\r\n            }\r\n\r\n            if(drawOption === \"polygon\") {\r\n                type = \"Polygon\";\r\n                coordinates = [[]];\r\n            }\r\n\r\n            return {\r\n                type,\r\n                coordinates,\r\n            }\r\n        });\r\n    }, [data, drawOption]);\r\n\r\n    const onEnter = (event: KeyboardEvent) => {\r\n        if(event.key === \"Enter\") {\r\n            setCompleted(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", onEnter);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", onEnter);\r\n        }\r\n    }, []);\r\n\r\n    return <>\r\n        {!completed && drawOption === \"circle\" ? <div className=\"draw-page__popup\">To draw a circle, click on the map, move mouse to set radius and click to finish</div> : null}\r\n        {!completed && drawOption === \"lineString\" ? <div className=\"draw-page__popup\">To draw a line string, click on the map and press enter to finish</div> : null}\r\n        {!completed && drawOption === \"polygon\" ? <div className=\"draw-page__popup\">To draw a polygon, click on the map and press enter to finish</div> : null}\r\n        {geoObjects.map(pr => <GeoJSON key={pr.id} data={pr.data} style={{\r\n            color: pr.selected ? \"blue\" : \"gray\",\r\n        }}/>)}\r\n        <GeoJSON key={Math.random()} data={data}/>\r\n        {created ? <Circle eventHandlers={{\r\n            mousemove: (event) => {\r\n                if(isDragging) {\r\n                    setCenter(event.latlng);\r\n                }\r\n            },\r\n            mousedown: (event) => {\r\n                setDragging(true);\r\n                map.dragging.disable();\r\n            },\r\n            mouseup: (event) => {\r\n                setDragging(false);\r\n                map.dragging.enable();\r\n            }\r\n        }} center={center} radius={radius} /> : null}\r\n    </>\r\n}\r\n\r\nexport default DrawHandler;","import { FunctionComponent, useEffect, useRef } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport stringify from \"json-stringify-pretty-compact\"\r\nimport Highlight from 'react-highlight';\r\nimport Icon from 'components/Icon';\r\nimport { ExportType } from './types';\r\nimport { faClipboard, faDownload, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './previewDialog.scss';\r\n\r\ntype Props = {\r\n    id?: string;\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    onExport(id: string): void;\r\n    data?: any;\r\n    exportType: ExportType;\r\n}\r\n\r\nconst PreviewDialog: FunctionComponent<Props> = ({\r\n    id,\r\n    isShowing,\r\n    onHide,\r\n    onExport,\r\n    data,\r\n    exportType,\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    const text = exportType === \"geojson\" ? stringify(data) : data;\r\n\r\n    const _onExport = () => onExport(id!);\r\n\r\n    const onCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(!parent.contains(element)) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, onHide, isShowing])\r\n\r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"preview-dialog__overlay\">\r\n        <div className=\"preview-dialog\">\r\n            <div className=\"preview-dialog__topBar\">\r\n                <div className=\"preview-dialog__right\">\r\n                    <Icon onClick={onCopy} className=\"\" icon={faClipboard}/>\r\n                    <Icon onClick={_onExport} className=\"\" icon={faDownload}/>\r\n                </div>\r\n                <Icon onClick={onHide} className=\"preview-dialog__close\" icon={faTimes}/>\r\n            </div>\r\n            <div className=\"preview-dialog__body\">\r\n                {data ? <Highlight className={exportType === \"geojson\" ? \"json\" : \"none\"}>\r\n                    {text}\r\n                </Highlight> : null}\r\n            </div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default PreviewDialog;\r\n","import { FunctionComponent, memo, ChangeEvent } from 'react';\r\nimport './checkbox.scss';\r\n\r\ntype Props = {\r\n    checked: boolean;\r\n    onChange?(event: ChangeEvent): void;\r\n    label?: string;\r\n}\r\n\r\nconst Checkbox: FunctionComponent<Props> = ({\r\n    checked,\r\n    onChange,\r\n    label,\r\n    ...rest\r\n}) => {\r\n \r\n    return <div className=\"checkbox\">\r\n        <label className={`checkbox__label ${checked ? \"checkbox__label--selected\": \"\"}`}>\r\n            <input {...rest}\r\n                className=\"checkbox__input\"\r\n                type=\"checkbox\"\r\n                onChange={onChange} checked={checked} />{label}\r\n        </label>\r\n    </div>\r\n}\r\n\r\nexport default memo(Checkbox);","import React, { FunctionComponent, memo, MouseEvent, ChangeEvent } from 'react';\r\nimport { faCircle, faClipboard, faDownload, faDrawPolygon, faEye, faPencilAlt, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { DrawOption, ExportType, GeoObject } from './types';\r\nimport Icon from 'components/Icon';\r\nimport PreviewDialog from './PreviewDialog';\r\nimport './panel.scss';\r\nimport Checkbox from './Checkbox';\r\n\r\nexport type PanelChangeOptions = {\r\n    drawOption: DrawOption;\r\n    exportType: ExportType;\r\n}\r\n\r\ntype Props = {\r\n    drawOption: DrawOption;\r\n    exportType: ExportType;\r\n    data?: GeoObject;\r\n    geoObjects: GeoObject[];\r\n    dataAvailable: boolean;\r\n    onChange(options: PanelChangeOptions): void;\r\n    onExport(): void;\r\n    onPreview(): void;\r\n    onHide(): void;\r\n    onRemoveShapes(): void;\r\n    onItemClick(id: string): void;\r\n    onAllItemsSelect(): void;\r\n    selectedCount: number;\r\n    isPreviewShowing: boolean;\r\n}\r\n\r\nconst Panel: FunctionComponent<Props> = ({\r\n    drawOption,\r\n    exportType,\r\n    data,\r\n    geoObjects,\r\n    onChange,\r\n    onExport,\r\n    onPreview,\r\n    onHide,\r\n    onRemoveShapes,\r\n    onItemClick,\r\n    onAllItemsSelect,\r\n    selectedCount,\r\n    isPreviewShowing,\r\n    dataAvailable,\r\n}) => {\r\n    const dataNotAvailable = !dataAvailable;\r\n\r\n    const onDrawOptionChange = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        onChange({\r\n            drawOption: id as typeof drawOption,\r\n            exportType\r\n        })\r\n    }\r\n\r\n    const onCopy = () => {\r\n        navigator.clipboard.writeText(JSON.stringify(data));\r\n    }\r\n\r\n    const onExportTypeChange = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        onChange({\r\n            drawOption,\r\n            exportType: id as typeof exportType,\r\n        })\r\n    }\r\n\r\n    const _onItemClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        onItemClick(id!);\r\n    }\r\n\r\n    const onItemSelect = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        onItemClick(id!);\r\n    }\r\n\r\n    return <div className=\"draw-page__panel\">\r\n        <div className=\"draw-page__topBar\">\r\n            Remove shapes <Icon disabled={dataNotAvailable} onClick={onRemoveShapes} className={``} icon={faTrash}/>\r\n        </div>\r\n        <div className=\"draw-page__toolbox\">\r\n            <Icon data-id=\"polygon\" onClick={onDrawOptionChange} className={`draw-page__tool ${drawOption === \"polygon\" ? \"selected\" : \"\"}`} icon={faDrawPolygon}/>\r\n            <Icon data-id=\"lineString\" onClick={onDrawOptionChange} className={`draw-page__tool ${drawOption === \"lineString\" ? \"selected\" : \"\"}`} icon={faPencilAlt}/>\r\n            <Icon data-id=\"circle\" onClick={onDrawOptionChange} className={`draw-page__tool ${drawOption === \"circle\" ? \"selected\" : \"\"}`} icon={faCircle}/>\r\n        </div>\r\n        <div className=\"items-section\">\r\n            <div className=\"items-section__header\">\r\n                <div>\r\n                    <Checkbox onChange={onAllItemsSelect} checked={geoObjects.length && selectedCount === geoObjects.length ? true : false}/>\r\n                </div>\r\n                <div className=\"items-section__title\">Items</div>\r\n            </div>\r\n            {geoObjects.map(pr => <div className=\"items-section__item\"\r\n                data-id={pr.id}\r\n                key={pr.id}\r\n                onClick={_onItemClick}>\r\n                <div>\r\n                    <Checkbox data-id={pr.id} onChange={onItemSelect} checked={pr.selected}/>\r\n                </div>\r\n                <div>{pr.id}</div>\r\n            </div>)}\r\n        </div>\r\n        <div className=\"export-section\">\r\n            <div className=\"export-section__title\">Export</div>\r\n            <div className=\"export\">\r\n                <div data-id=\"geojson\" onClick={onExportTypeChange} className={`export__option ${exportType === \"geojson\" ? \"export__option--selected\" : \"\"}`}>Geojson</div>\r\n                <div data-id=\"wkt\" onClick={onExportTypeChange} className={`export__option ${exportType === \"wkt\" ? \"export__option--selected\" : \"\"}`}>WKT</div>\r\n                {/* <div data-id=\"wkb\" onClick={onExportTypeChange} className={`export__option ${exportType === \"wkb\" ? \"selected\" : \"\"}`}>WKB</div> */}\r\n            </div>\r\n            <PreviewDialog\r\n                id={data?.id}\r\n                data={data}\r\n                onExport={onExport}\r\n                onHide={onHide}\r\n                isShowing={isPreviewShowing}\r\n                exportType={exportType}\r\n            />\r\n            <div className=\"payload\">\r\n                <Icon disabled={dataNotAvailable} onClick={onPreview} className=\"payload__option\" icon={faEye}/>\r\n                <Icon disabled={dataNotAvailable} onClick={onCopy} className=\"payload__option\" icon={faClipboard}/>\r\n                <Icon disabled={dataNotAvailable} onClick={onExport} className=\"payload__option\" icon={faDownload}/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default memo(Panel);","import { FunctionComponent, useState } from 'react';\r\nimport { MapContainer, TileLayer } from 'react-leaflet';\r\nimport MapHandler from './MapHandler';\r\nimport Panel, { PanelChangeOptions } from './Panel';\r\nimport { DrawOption, ExportType, GeoObject } from './types';\r\nimport { Geometry } from \"geojson\";\r\nimport { stringify } from 'wkt';\r\nimport { download, toBase64DataUri } from 'appUtils';\r\nimport './index.scss';\r\n\r\ntype State = {\r\n    geoObjects: GeoObject[];\r\n    selectedCount: number;\r\n}\r\n\r\nconst DrawPage: FunctionComponent = () => {\r\n    const [{\r\n        geoObjects,\r\n        selectedCount\r\n    }, setGeoObjects] = useState<State>({\r\n        geoObjects: [],\r\n        selectedCount: 0,\r\n    });\r\n    const [isPreviewShowing, setPreviewShow] = useState(false);\r\n    const [drawOption, setDrawOption] = useState<DrawOption>(\"none\");\r\n    const [exportType, setExportType] = useState<ExportType>(\"geojson\");\r\n    const [data, setData] = useState<any>();\r\n\r\n    const onPanelChange = (options: PanelChangeOptions) => {\r\n        setDrawOption(options.drawOption);\r\n        setExportType(options.exportType);\r\n        setData(\"\");\r\n    }\r\n\r\n    const onDrawChange = (data: GeoObject) => {\r\n        setGeoObjects(state => ({\r\n            ...state,\r\n            geoObjects: [...state.geoObjects, data],\r\n        }));\r\n        setDrawOption(\"none\");\r\n    }\r\n\r\n    const onRemoveShapes = () => setGeoObjects({\r\n        geoObjects: [],\r\n        selectedCount: 0,\r\n    });\r\n\r\n    const onHide = () => setPreviewShow(false);\r\n\r\n    const onPreview = () => {\r\n\r\n        let geometry: Geometry;\r\n\r\n        if(geoObjects.length === 1) {\r\n            geometry = geoObjects[0].data as any;\r\n        }\r\n        else {\r\n            geometry = {\r\n                type: \"GeometryCollection\",\r\n                geometries: [...geoObjects.map<Geometry>(pr => pr.data as any)]\r\n            }\r\n        }\r\n\r\n        if(exportType === \"wkt\") {\r\n            let wkt = stringify(geometry);\r\n            wkt = wkt.replace(/,/g, \",\\n\")\r\n            setData(wkt);\r\n            setPreviewShow(true);\r\n\r\n            return;\r\n        }\r\n\r\n        setData(geometry);\r\n        setPreviewShow(true);\r\n    }\r\n\r\n    const onExport = () => {\r\n        const text = toBase64DataUri(JSON.stringify(data));\r\n        const fileName = exportType === \"geojson\" ?  \"data.geojson\" : \"wkt.txt\";\r\n\r\n        download(text, fileName);\r\n    }\r\n\r\n    const onAllItemsSelect = () => {\r\n        setGeoObjects(state => {\r\n            const selected = state.geoObjects.some(pr => pr.selected === false) ? true : false;\r\n            const geoObjects = [...state.geoObjects.map(pr => ({...pr, selected}))];\r\n            const selectedCount = selected ? geoObjects.length : 0;\r\n\r\n            return {\r\n                geoObjects,\r\n                selectedCount\r\n            };\r\n        })\r\n    }\r\n\r\n    const onItemClick = (id: string) => {\r\n        \r\n        setGeoObjects(state => {\r\n            const geoObjects = [...state.geoObjects.map(pr => ({...pr}))];\r\n            let item = geoObjects.find(pr => pr.id === id)!;\r\n            item.selected = !item.selected;\r\n            let selectedCount = state.selectedCount;\r\n            selectedCount = item.selected ? selectedCount + 1 : selectedCount - 1;\r\n            \r\n            return {\r\n                geoObjects,\r\n                selectedCount\r\n            };\r\n        })\r\n    }\r\n\r\n    return <div className=\"draw-page\">\r\n        <Panel\r\n            geoObjects={geoObjects}\r\n            drawOption={drawOption}\r\n            exportType={exportType}\r\n            onChange={onPanelChange}\r\n            onExport={onExport}\r\n            onPreview={onPreview}\r\n            onHide={onHide}\r\n            onRemoveShapes={onRemoveShapes}\r\n            onItemClick={onItemClick}\r\n            onAllItemsSelect={onAllItemsSelect}\r\n            data={data}\r\n            selectedCount={selectedCount}\r\n            dataAvailable={!!geoObjects.length}\r\n            isPreviewShowing={isPreviewShowing}\r\n        />\r\n        <MapContainer\r\n            zoom={4}\r\n            center={[51.505, -0.09]}\r\n            scrollWheelZoom={true}\r\n            className=\"draw-page__map\">\r\n            <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <MapHandler\r\n                onChange={onDrawChange}\r\n                geoObjects={geoObjects}\r\n                drawOption={drawOption}/>\r\n        </MapContainer>\r\n    </div>\r\n}\r\n\r\nexport default DrawPage;","import { FunctionComponent, MouseEvent } from 'react';\r\nimport { faCode, faCrosshairs, faDownload, faExclamationTriangle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport Icon from 'components/Icon';\r\nimport './importItem.scss';\r\n\r\ntype Props = {\r\n    id: string;\r\n    name: string;\r\n    loadedAt: string | Date;\r\n    isSelected: boolean;\r\n    featuresCount: number;\r\n    warning?: string;\r\n    invalid: boolean;\r\n    onToggle(event: MouseEvent<HTMLDivElement>): void;\r\n    onDelete(event: MouseEvent<HTMLDivElement>): void;\r\n    onExport(id: string): void;\r\n    onShowOnMap(id: string): void;\r\n    onShowGeojson(id: string): void;\r\n    onShowWarning(id: string): void;\r\n}\r\n\r\nconst ImportItem: FunctionComponent<Props> = ({\r\n    id,\r\n    isSelected,\r\n    loadedAt,\r\n    name,\r\n    featuresCount,\r\n    warning,\r\n    invalid,\r\n    onDelete,\r\n    onShowOnMap,\r\n    onShowGeojson,\r\n    onShowWarning,\r\n    onExport,\r\n    onToggle,\r\n}) => {\r\n\r\n    const _onExport = () => onExport(id);\r\n    const _onShowOnMap = () => onShowOnMap(id);\r\n    const _onShowGeojson = () => onShowGeojson(id);\r\n    const _onShowWarning = () => onShowWarning(id);\r\n    \r\n    return <div className={`uploaded-item ${isSelected ? \"selected\" : \"\"}`}>\r\n        <div className=\"uploaded-item__topBar\">\r\n            <div data-id={id} onClick={onToggle}>\r\n                <div className=\"uploaded-item__title\">{name}</div>\r\n                <div className=\"uploaded-item__detail\">Loaded at: {new Date(loadedAt).toLocaleString()}</div>\r\n            </div>\r\n            <Icon data-id={id} className=\"uploaded-item__delete\" onClick={onDelete} icon={faTimes}/>\r\n        </div>\r\n        {invalid ? <div className=\"uploaded-item__body\">\r\n            {warning ? <Icon className=\"popup__iconButton\" onClick={_onShowWarning} icon={faExclamationTriangle}/> : null}\r\n        </div> : <div className=\"uploaded-item__body\">\r\n            <Icon className=\"popup__iconButton\" onClick={_onShowOnMap} icon={faCrosshairs}/>\r\n            {featuresCount ? <div className=\"uploaded-item__detail\">Features: {featuresCount}</div> : null}\r\n            <Icon className=\"popup__iconButton\" onClick={_onExport} icon={faDownload}/>\r\n            <Icon className=\"popup__iconButton\" onClick={_onShowGeojson} icon={faCode}/>\r\n            {warning ? <Icon className=\"popup__iconButton\" onClick={_onShowWarning} icon={faExclamationTriangle}/> : null}\r\n        </div>}\r\n    </div>;\r\n}\r\n\r\nexport default ImportItem;\r\n","import { FunctionComponent, memo } from 'react';\r\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './dragOverlay.scss';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\ntype Props = {\r\n    isShowing: boolean;\r\n}\r\n\r\nconst DragOverlay: FunctionComponent<Props> = ({\r\n    isShowing,\r\n}) => {\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n    \r\n    return <animated.div style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }}className=\"explore-page__dropOverlay\">\r\n        <div className=\"explore-page__dropModal\">\r\n            <div><FontAwesomeIcon size=\"5x\" icon={faFileUpload}/></div>\r\n            <div className=\"explore-page__dropModalText\">Drop geojson/json array lat lng or lat lng</div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default memo(DragOverlay);\r\n","import { FunctionComponent, memo, useCallback, useMemo } from 'react';\r\nimport { GeoJSON } from 'react-leaflet';\r\nimport { GeoJsonObject, Feature } from 'geojson';\r\nimport { LeafletEventHandlerFnMap } from 'leaflet';\r\n\r\ntype Props = {\r\n    id: string;\r\n    isSelected: boolean;\r\n    eventHandlers: LeafletEventHandlerFnMap;\r\n    data: GeoJsonObject;\r\n}\r\n\r\nconst GeoJSONItem: FunctionComponent<Props> = ({\r\n    id,\r\n    data,\r\n    eventHandlers,\r\n\r\n    isSelected\r\n}) => {\r\n    const style = useMemo(() => {\r\n        return {\r\n            color: isSelected ? \"blue\" : \"gray\"\r\n        };\r\n    }, [isSelected])\r\n\r\n    const onEachFeature = useCallback((feature: Feature) => {\r\n        feature.id = id;\r\n    }, [id]);\r\n\r\n    return <GeoJSON\r\n        data={data}\r\n        data-id={id}\r\n        style={style}\r\n        eventHandlers={eventHandlers}\r\n        onEachFeature={onEachFeature} />\r\n}\r\n\r\nexport default memo(GeoJSONItem);\r\n","import { useEffect, FunctionComponent, MouseEvent, useRef } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport './menu.scss';\r\n\r\nexport type Actions = \"nearby-country\" | \"nearby-continent\";\r\n\r\ntype Props = {\r\n    x: number;\r\n    y: number;\r\n    isShowing: boolean;\r\n    onAction(action: Actions): void;\r\n    onHide(): void;\r\n}\r\n\r\nconst Menu: FunctionComponent<Props> = ({\r\n    x,\r\n    y,\r\n    isShowing,\r\n    onAction,\r\n    onHide\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n    \r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(!parent.contains(element)) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, onHide, isShowing])\r\n\r\n    const _onAction = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { action } = event.currentTarget.dataset;\r\n        onAction(action as Actions);\r\n    }\r\n    \r\n    const { height } = ref?.current?.getBoundingClientRect() || { height: 0 };\r\n    \r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        top: `${y - height / 2 }px`,\r\n        left: `${x}px`,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"menu__overlay\">\r\n        <div className=\"menu\">\r\n           <div className=\"menu__item\" onClick={_onAction} data-action=\"nearby-country\">Get nearby country</div>\r\n           <div className=\"menu__item\" onClick={_onAction} data-action=\"nearby-continent\">Get nearby continent</div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default Menu;\r\n","import { LatLngBoundsExpression, LatLngLiteral, LeafletEvent } from 'leaflet';\r\nimport { FunctionComponent, memo, useMemo, useState } from 'react';\r\nimport { GeoJsonObject, Feature } from 'geojson';\r\nimport GeoJSONItem from './GeoJSONItem';\r\nimport { useMapEvents } from 'react-leaflet';\r\nimport { useEffect } from 'react';\r\nimport Menu, { Actions } from './Menu';\r\n\r\ntype Props = {\r\n    onAction(action: Actions, latlng: LatLngLiteral): void;\r\n    geojsonObjects: any[];\r\n    center: [number, number];\r\n    bounds?: LatLngBoundsExpression;\r\n}\r\n\r\nconst MapHandler: FunctionComponent<Props> = ({\r\n    onAction,\r\n    geojsonObjects,\r\n    center,\r\n    bounds,\r\n}) => {\r\n    const [menu, setMenu] = useState({\r\n        x: 0,\r\n        y: 0,\r\n        latlng: {\r\n            lat: -1,\r\n            lng: -1,\r\n        },\r\n        isShowing: false,\r\n    });\r\n    const map = useMapEvents({\r\n        click: (event) => {\r\n            const propagatedFrom = event.propagatedFrom;\r\n\r\n            if(propagatedFrom && propagatedFrom.feature) {\r\n                const feature = event.propagatedFrom.feature as Feature;\r\n                const id = feature.id as string;\r\n            }\r\n\r\n        },\r\n        contextmenu(event) {\r\n            const originalEvent = event.originalEvent;\r\n            originalEvent.preventDefault();\r\n            const { clientX, clientY } = originalEvent;\r\n            const latlng = event.latlng;\r\n\r\n            setMenu({\r\n                x: clientX,\r\n                y: clientY,\r\n                latlng,\r\n                isShowing: true,\r\n            });\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        map.setView(center);\r\n    }, [map, center]);\r\n\r\n    useEffect(() => {\r\n        if(bounds) {\r\n            map.fitBounds(bounds);\r\n        }\r\n    }, [map, bounds]);\r\n    \r\n    const eventHandlers = useMemo(() => ({\r\n        click(event: LeafletEvent) {\r\n            const target = event.sourceTarget;\r\n\r\n            if(\"feature\" in target) {\r\n                const id = target.feature.id;\r\n\r\n                // setGeojsonObjects((state) => {\r\n                //     const newState = [...state];\r\n\r\n                //     if(!newState.some(pr => pr.id === id)) {\r\n                //         return state;\r\n                //     }\r\n\r\n                //     for (const item of newState) {\r\n                        \r\n                //         if(item.isSelected) {\r\n                //             item.isSelected = !item.isSelected;\r\n                //         }\r\n\r\n                //         if(item.id === id) {\r\n                //             item.isSelected = !item.isSelected;\r\n                //         }\r\n                //     }\r\n\r\n                //     return newState;\r\n                // });\r\n                \r\n            }\r\n        }\r\n    }), []);\r\n\r\n    const _onAction = (action: Actions) => {\r\n        onAction(action, menu.latlng);\r\n        onHide();\r\n    }\r\n\r\n    const onHide = () => setMenu(state => ({\r\n        ...state,\r\n        isShowing: false,\r\n    }));\r\n    \r\n    return <>\r\n        <Menu\r\n            {...menu}\r\n            onAction={_onAction}\r\n            onHide={onHide}/>\r\n       {geojsonObjects.filter(pr => !pr.invalid).map(pr => <GeoJSONItem\r\n            key={pr.id}\r\n            {...pr}\r\n            eventHandlers={eventHandlers}\r\n            data={pr.data as GeoJsonObject} />)}\r\n    </>;\r\n}\r\n\r\nexport default memo(MapHandler);\r\n","import { FunctionComponent, memo, useEffect, useRef } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport Highlight from 'react-highlight';\r\nimport Icon from 'components/Icon';\r\nimport { faClipboard, faDownload, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport stringify from 'json-stringify-pretty-compact';\r\nimport './previewDialog.scss';\r\n\r\ntype Props = {\r\n    id: string;\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    onExport(id: string): void;\r\n    data?: any;\r\n}\r\n\r\nconst PreviewDialog: FunctionComponent<Props> = ({\r\n    id,\r\n    isShowing,\r\n    onHide,\r\n    onExport,\r\n    data,\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    const _onExport = () => onExport(id);\r\n\r\n    const onCopy = () => {\r\n        //navigator.clipboard.writeText(text);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(!parent.contains(element)) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, onHide, isShowing])\r\n\r\n    const text = isShowing ? stringify(data) : \"\";\r\n\r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"preview-dialog__overlay\">\r\n        <div className=\"preview-dialog\">\r\n            <div className=\"preview-dialog__topBar\">\r\n                <div className=\"preview-dialog__right\">\r\n                    <Icon onClick={onCopy} className=\"\" icon={faClipboard}/>\r\n                    <Icon onClick={_onExport} className=\"\" icon={faDownload}/>\r\n                </div>\r\n                <Icon onClick={onHide} className=\"preview-dialog__close\" icon={faTimes}/>\r\n            </div>\r\n            <div className=\"preview-dialog__body\">\r\n                {text ? <Highlight className=\"json\">\r\n                    {text}\r\n                </Highlight> : null}\r\n            </div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default memo(PreviewDialog);\r\n","import { FunctionComponent, useEffect, memo, useRef } from 'react';\r\nimport { faExclamationTriangle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport Icon from 'components/Icon';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport './warningDialog.scss';\r\n\r\ntype Props = {\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    warning?: string;\r\n}\r\n\r\nconst WarningDialog: FunctionComponent<Props> = ({\r\n    isShowing,\r\n    onHide,\r\n    warning,\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(parent === element) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, onHide, isShowing])\r\n\r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"warning-dialog__overlay\">\r\n        <div className=\"warning-dialog\">\r\n            <Icon onClick={onHide} className=\"warning-dialog__closeIcon\" icon={faTimes} />\r\n            <div className=\"warning-dialog__body\">\r\n                <Icon className=\"warning-dialog__warningIcon\" icon={faExclamationTriangle} />\r\n                <div className=\"warning-dialog__text\">\r\n                    {warning}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </animated.div>\r\n}\r\n\r\nexport default memo(WarningDialog);\r\n","import { FunctionComponent, MouseEvent, useCallback } from 'react';\r\nimport { MapContainer, TileLayer } from 'react-leaflet';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { useState } from 'react';\r\nimport { GeoJsonObject } from 'geojson';\r\nimport { useEffect } from 'react';\r\nimport { download, extractGeoObjectFromText, getGeojsonFriendlyName, getTextFromBlob, newId, openFileDialog, toBase64DataUri, trySaveToLocalStorage } from 'appUtils';\r\nimport { BarLoader } from 'react-spinners';\r\nimport { geoJSON, LatLngBoundsExpression, LatLngLiteral } from 'leaflet';\r\nimport ImportItem from './ImportItem';\r\nimport DragOverlay from './DragOverlay';\r\nimport MapHandler from './MapHandler';\r\nimport PreviewDialog from './PreviewDialog';\r\nimport WarningDialog from './WarningDialog';\r\nimport { Actions } from './Menu';\r\nimport { getContinentFromLatLng, getContinentGeojson, getCountryFromLatLng, getCountryGeojsonByIso3166a3 } from 'api';\r\nimport moment from 'moment';\r\nimport { faClipboard, faList, faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport Icon from 'components/Icon';\r\nimport Breadcrumbs from 'components/Breadcrumbs';\r\nimport './index.scss';\r\n\r\ntype GeoObject = {\r\n    id: string;\r\n    name: string;\r\n    fileName?: string;\r\n    loadedAt: Date;\r\n    isSelected: boolean;\r\n    featuresCount: number;\r\n    area: number;\r\n    points: number;\r\n    warning?: string;\r\n} & ({\r\n    data: GeoJsonObject;\r\n    invalid: false;\r\n} | {\r\n    data: unknown;\r\n    invalid: true;\r\n})\r\n\r\ntype PageMode = \"show-preview\" | \"show-warning\" | undefined;\r\n\r\nconst ExplorePage: FunctionComponent = () => {\r\n    const [geojsonObjects, setGeojsonObjects] = useState<GeoObject[]>([]);\r\n    const [isUploading, setUploading] = useState(true);\r\n    const [{\r\n        id,\r\n        warning,\r\n        data,\r\n    }, setData] = useState<{\r\n        id: string;\r\n        warning: string | undefined;\r\n        data: GeoJsonObject;\r\n    }>({\r\n        id: \"\",\r\n        warning: \"\",\r\n        data: {\r\n            type: \"Point\"\r\n        },\r\n    });\r\n    const [toggled, setToggled] = useState(false);\r\n    const [clipboardData, setCliboardData] = useState(\"\");\r\n    const [bounds, setBounds] = useState<LatLngBoundsExpression>();\r\n    const [pageMode, setPageMode] = useState<PageMode>();\r\n    const [center, setCenter] = useState<[number, number]>([51.505, -0.09]);\r\n\r\n    const onDrop = useCallback((acceptedFiles: File[]) => {\r\n        if(!acceptedFiles.length) {\r\n            return;\r\n        }\r\n  \r\n        setUploading(true);\r\n        \r\n\r\n        (async () => {\r\n            let newState = new Array<GeoObject>();\r\n\r\n            for(const file of acceptedFiles) {\r\n\r\n                const text = await getTextFromBlob(file);\r\n                const data = extractGeoObjectFromText(text);\r\n                let featuresCount = 0;\r\n\r\n                const geoObject = {\r\n                    id: newId(),\r\n                    name: file.name,\r\n                    fileName: file.name,\r\n                    loadedAt: new Date(),\r\n                    isSelected: false,\r\n                    featuresCount,\r\n                    data,\r\n                    invalid: !data,\r\n                } as GeoObject;\r\n\r\n                newState.push(geoObject);\r\n\r\n                if(!trySaveToLocalStorage(newState)) {\r\n                    geoObject.warning = \"We could not save geo-object to local storage. The file size is too big.\";\r\n                }\r\n            }\r\n\r\n            newState = newState.concat(geojsonObjects);\r\n            setGeojsonObjects(newState)\r\n            \r\n            setUploading(false);\r\n        })();\r\n\r\n      }, [geojsonObjects])\r\n    const {getRootProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    useEffect(() => {\r\n\r\n        const savedObjects = localStorage.getItem(\"saved\");\r\n\r\n        if(savedObjects) {\r\n            new Promise(() => {\r\n                const data = JSON.parse(savedObjects);\r\n                setGeojsonObjects(data);\r\n                setUploading(false);\r\n            });\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const checkClipboard = async () => {\r\n\r\n            try {\r\n                const text = await navigator.clipboard.readText();\r\n                setCliboardData(text);\r\n            } catch (error) {\r\n                //NotificationManager.error(\"We could not read content from the clipboard\", \"Clipboard read error.\");\r\n            }\r\n            setTimeout(checkClipboard, 2000);\r\n        }\r\n\r\n        setTimeout(checkClipboard, 2000);\r\n    }, []);\r\n\r\n    const onPaste = (_event: Event) => {\r\n        const event = _event as ClipboardEvent;\r\n        const text = event.clipboardData?.getData(\"text\");\r\n\r\n        if(!text) {\r\n            return;\r\n        }\r\n\r\n        const data = extractGeoObjectFromText(text);\r\n\r\n        if(!data) {\r\n            return;\r\n        }\r\n\r\n        let featuresCount = 0;\r\n\r\n        const name = getGeojsonFriendlyName(data);\r\n\r\n        const geojsonObject = {\r\n            id: newId(),\r\n            name,\r\n            loadedAt: new Date(),\r\n            isSelected: false,\r\n            featuresCount: 0,\r\n            data,\r\n            invalid: !data,\r\n        }  as GeoObject;\r\n\r\n        setGeojsonObjects(state => [...state, geojsonObject]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"paste\", onPaste);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"paste\", onPaste);\r\n        }\r\n    }, []);\r\n\r\n    const onToggle = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n\r\n        setGeojsonObjects((state) => {\r\n            const newState = [...state];\r\n\r\n            if(!newState.some(pr => pr.id === id)) {\r\n                return state;\r\n            }\r\n\r\n            for (const item of newState) {\r\n                \r\n                if(item.isSelected) {\r\n                    item.isSelected = !item.isSelected;\r\n                }\r\n\r\n                if(item.id === id) {\r\n                    item.isSelected = !item.isSelected;\r\n                }\r\n            }\r\n\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    const onDelete = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n\r\n        setGeojsonObjects((state) => {\r\n            const newState = state.filter(pr => pr.id !== id && !pr.warning);\r\n            localStorage.setItem(\"saved\", JSON.stringify(newState));\r\n\r\n            return newState;\r\n        });\r\n        \r\n    }\r\n\r\n    const onShowOnMap = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n\r\n        if(geojsonObject.invalid) {\r\n            return;\r\n        }\r\n        \r\n        const bounds = geoJSON(geojsonObject.data).getBounds();\r\n        setBounds(bounds);\r\n    }\r\n\r\n    const onShowWarning = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n\r\n        setPageMode(\"show-warning\");\r\n        setData(state => ({\r\n            ...state,\r\n            warning: geojsonObject.warning,\r\n        }));\r\n    }\r\n\r\n    const onHide = useCallback(() => setPageMode(undefined), []);\r\n\r\n    const onShowGeojson = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n\r\n        if(geojsonObject.invalid) {\r\n            return;\r\n        }\r\n\r\n        setPageMode(\"show-preview\");\r\n        setData(state => ({\r\n            ...state,\r\n            id: geojsonObject.id,\r\n            data: geojsonObject.data,\r\n        }));\r\n    }\r\n\r\n    const onExport = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n        const text = toBase64DataUri(JSON.stringify(geojsonObject?.data));\r\n        const fileName = geojsonObject.fileName ? geojsonObject.fileName : `${geojsonObject.name}.geojson`;\r\n\r\n        download(text, fileName);\r\n    }\r\n\r\n    const onAction = useCallback((action: Actions, latlng: LatLngLiteral) => {\r\n        const { lat, lng } = latlng;\r\n        setUploading(true);\r\n\r\n        if(action == \"nearby-continent\") {\r\n            (async () => {\r\n\r\n                try {\r\n\r\n                    const continent = await getContinentFromLatLng(lng, lat);\r\n\r\n                    if(!continent) {\r\n                        setUploading(false);\r\n                        return;\r\n                    }\r\n\r\n                    const geojson = await getContinentGeojson(continent);\r\n\r\n                    if(!geojson) {\r\n                        setUploading(false);\r\n                        return;\r\n                    }\r\n\r\n                    const suffix = moment().format(\"_YYYYMMDDHHmmss\");\r\n\r\n                    setGeojsonObjects(state => {\r\n                        const newState = [...state, {\r\n                            id: newId(),\r\n                            data: geojson,\r\n                            name: `${continent}${suffix}`,\r\n                            area: 0,\r\n                            featuresCount: 0,\r\n                            invalid: false,\r\n                            isSelected: false,\r\n                            loadedAt: new Date(),\r\n                            points: 0,\r\n                        }];\r\n    \r\n                        return newState;\r\n                    });\r\n\r\n                    setUploading(true);\r\n                }\r\n                catch(error) {\r\n                    setUploading(true);\r\n                }\r\n            })();\r\n        }\r\n\r\n        if(action === \"nearby-country\") {\r\n\r\n            (async () => {\r\n                try {\r\n                    const iso3166a3 = await getCountryFromLatLng(lng, lat);\r\n\r\n                    if(!iso3166a3) {\r\n                        setUploading(false);\r\n                        return;\r\n                    }\r\n    \r\n                    const geojson = await getCountryGeojsonByIso3166a3(iso3166a3);\r\n                    const suffix = moment().format(\"_YYYYMMDDHHmmss\");\r\n                    \r\n                    if(!geojson) {\r\n                        setUploading(false);\r\n                        return;\r\n                    }\r\n\r\n                    setGeojsonObjects(state => {\r\n                        const newState = [...state, {\r\n                            id: newId(),\r\n                            data: geojson,\r\n                            name: `${iso3166a3}${suffix}`,\r\n                            area: 0,\r\n                            featuresCount: 0,\r\n                            invalid: false,\r\n                            isSelected: false,\r\n                            loadedAt: new Date(),\r\n                            points: 0,\r\n                        }];\r\n                        localStorage.setItem(\"saved\", JSON.stringify(newState));\r\n    \r\n                        return newState;\r\n                    });\r\n                            \r\n                    setTimeout(() => {\r\n                        setUploading(false);\r\n                    }, 1000);\r\n                } catch (error) {\r\n                    setUploading(false);\r\n                }\r\n\r\n            })();\r\n            \r\n        }\r\n\r\n        onHide();\r\n    }, [onHide]);\r\n\r\n    const onUpload = async () => {\r\n        setUploading(true);\r\n        setToggled(true);\r\n        const file = await openFileDialog();\r\n        \r\n        if(!file) {\r\n            setUploading(false);\r\n            return;\r\n        }\r\n\r\n        const text = await getTextFromBlob(file);\r\n        const data = extractGeoObjectFromText(text);\r\n\r\n        if(!data) {\r\n            setUploading(false);\r\n            return;\r\n        }\r\n\r\n        const name = getGeojsonFriendlyName(data);\r\n        \r\n        const geojsonObject: GeoObject = {\r\n            id: newId(),\r\n            name,\r\n            data,\r\n            invalid: !data,\r\n            area: 0,\r\n            featuresCount: 0,\r\n            isSelected: false,\r\n            loadedAt: new Date(),\r\n            points: 0,\r\n        }\r\n        const newState = [...geojsonObjects, geojsonObject];\r\n\r\n        if(!trySaveToLocalStorage(newState)) {\r\n            geojsonObject.warning = \"We could not save geo-object to local storage. The file size is too big.\";\r\n        }\r\n\r\n        setGeojsonObjects(newState);\r\n        setUploading(false);\r\n    }\r\n\r\n    const onClipboard = () => {\r\n        setToggled(true);\r\n        setUploading(true);\r\n\r\n        const data = extractGeoObjectFromText(clipboardData);\r\n        let name = \"clipboard\";\r\n\r\n        if(data) {\r\n            name += `_${getGeojsonFriendlyName(data)}`;\r\n        }\r\n\r\n        const suffix = moment().format(\"_YYYYMMDDHHmmss\");\r\n        name += suffix;\r\n\r\n        const geojsonObject = {\r\n            id: newId(),\r\n            name,\r\n            loadedAt: new Date(),\r\n            isSelected: false,\r\n            featuresCount: 0,\r\n            data,\r\n            invalid: !data,\r\n        }  as GeoObject;\r\n\r\n        const newState = [...geojsonObjects, geojsonObject];\r\n\r\n        if(!trySaveToLocalStorage(newState)) {\r\n            geojsonObject.warning = \"We could not save geo-object to local storage. The file size is too big.\";\r\n        }\r\n\r\n        setGeojsonObjects(newState);\r\n        setUploading(false);\r\n    }\r\n\r\n    console.log(\"rerender explore page\");\r\n    const onTogglePanel = () => setToggled(state => !state);\r\n\r\n    return <div className=\"explore-page\" {...getRootProps()}>\r\n        <DragOverlay isShowing={isDragActive}/>\r\n        <PreviewDialog\r\n            id={id}\r\n            onHide={onHide}\r\n            onExport={onExport}\r\n            isShowing={pageMode === \"show-preview\"}\r\n            data={data}\r\n            />\r\n        <WarningDialog\r\n            isShowing={pageMode === \"show-warning\"}\r\n            warning={warning}\r\n            onHide={onHide}\r\n        />\r\n        <div className=\"explore-page__navbar\">\r\n            <Breadcrumbs/>\r\n            <Icon className=\"navbar__upload\" onClick={onUpload} icon={faUpload}/>\r\n            <Icon disabled={!clipboardData} className=\"navbar__clipboard\" onClick={onClipboard} icon={faClipboard}/>\r\n            <Icon className=\"navbar__toggle\" onClick={onTogglePanel} icon={faList}/>\r\n        </div>\r\n        <div className=\"explore-page__content\">\r\n            <MapContainer\r\n                zoom={4}\r\n                center={center}\r\n                scrollWheelZoom={true}\r\n                className=\"explore-page__map\">\r\n                <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n            <MapHandler\r\n                onAction={onAction}\r\n                geojsonObjects={geojsonObjects}\r\n                center={center}\r\n                bounds={bounds}\r\n            />\r\n            </MapContainer>\r\n            {toggled ? <div className=\"explore-page__panel\">\r\n                <div className=\"explore-page__loader\">\r\n                    <BarLoader speedMultiplier={.5} color={isUploading ? \"white\" : \"transparent\"} width=\"100%\"/>\r\n                </div>\r\n                <div className=\"explore-page__toolbar\">\r\n                </div>\r\n                <div className=\"explore-page__list\">\r\n                    {geojsonObjects.map(pr => <ImportItem\r\n                        key={pr.id}\r\n                        onDelete={onDelete}\r\n                        onExport={onExport}\r\n                        onToggle={onToggle}\r\n                        onShowWarning={onShowWarning}\r\n                        onShowOnMap={onShowOnMap}\r\n                        onShowGeojson={onShowGeojson}\r\n                        {...pr} />)}\r\n                </div>\r\n            </div> : null}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default ExplorePage;\r\n","import { faEye } from '@fortawesome/free-regular-svg-icons';\r\nimport { faList, faPen } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { baseUrl } from 'appConstants';\r\nimport { FunctionComponent, memo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './style.scss';\r\n\r\nconst menuItems = [\r\n    {\r\n        icon: faList,\r\n        text: \"List of countries\",\r\n        link: \"/countries\"\r\n    },\r\n    {\r\n        icon: faList,\r\n        text: \"List of capitals\",\r\n        link: \"/capitals\"\r\n    },\r\n    {\r\n        icon: faPen,\r\n        text: \"Draw shapes\",\r\n        link: \"/draw\"\r\n    },\r\n    {\r\n        icon: faEye,\r\n        text: \"Explore map\",\r\n        link: \"/explore\"\r\n    }\r\n]\r\n\r\nconst Home: FunctionComponent = () => {\r\n    const imageUrl = `${baseUrl}/assets/background.jpg`;\r\n\r\n    return <div className=\"home\">\r\n        <div className=\"background\" style={{\r\n            background: `url(${imageUrl}) center center / cover`\r\n        }}/>\r\n        <div className=\"header\">Explore</div>\r\n        <div className=\"list\">\r\n            {menuItems.map(pr => <Link key={pr.link} to={pr.link} className=\"link\">\r\n                <div><FontAwesomeIcon size=\"2x\" icon={pr.icon}/></div>\r\n                <div className=\"link__text\">{pr.text}</div>\r\n            </Link>)}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default memo(Home);","import { FunctionComponent, useState } from 'react';\nimport CountryPage from 'components/CountryPage';\nimport Countries from 'components/Countries';\nimport Toolbar from 'components/Toolbar';\nimport { Route, Switch } from 'react-router-dom';\nimport SearchGeoObjectsDialog from 'components/SearchGeoObjectsDialog';\nimport DrawPage from 'components/DrawPage';\nimport ExplorePage from 'components/ExplorePage';\nimport { NotificationContainer } from 'react-notifications';\n\nimport './app.scss';\nimport WorldPage from 'components/WorldPage';\nimport Home from 'components/Home';\n\nconst App: FunctionComponent = () => {\n    const [isShowing, setShow] = useState(false);\n    const onSearch = () => setShow(true);\n    const onHide = () => setShow(false);\n\n    return <div className=\"app\">\n        <Toolbar onSearch={onSearch} />\n        <SearchGeoObjectsDialog\n            onHide={onHide}\n            onClick={onHide}\n            isShowing={isShowing}/>\n        <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route exact path=\"/explore\" component={ExplorePage}/>\n            <Route exact path=\"/draw\" component={DrawPage}/>\n            <Route exact path=\"/country/:iso3166a2\" component={CountryPage}/>\n            <Route exact path=\"/countries\" component={Countries}/>\n        </Switch>\n        <NotificationContainer/>\n    </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {\n    HashRouter as Router,\n} from \"react-router-dom\";\n\nimport './index.scss';\nimport 'react-notifications/lib/notifications.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}