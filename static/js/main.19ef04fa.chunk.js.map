{"version":3,"sources":["api.ts","appConstants.ts","components/CountryPage/SvgMap.tsx","appUtils/circleToPolygon.ts","appUtils/index.ts","components/BasicNode.tsx","components/Breadcrumbs.tsx","components/CountryPage/Navbar.tsx","components/ToolTip.tsx","components/CountryPage/RegionTooltip.tsx","components/CountryPage/UnderConstruction.tsx","components/CountryPage/MapHandler.tsx","components/CountryPage/index.tsx","components/Countries/Item.tsx","components/Countries/index.tsx","components/Toolbar.tsx","components/SearchGeoObjectsDialog/ListItem.tsx","components/SearchGeoObjectsDialog/SearchBox.tsx","components/Icon.tsx","components/SearchGeoObjectsDialog/index.tsx","components/DrawPage/MapHandler.tsx","components/DrawPage/PreviewDialog.tsx","components/DrawPage/Checkbox.tsx","components/DrawPage/Panel.tsx","components/DrawPage/index.tsx","components/ExplorePage/ImportItem.tsx","components/ExplorePage/DragOverlay.tsx","components/ExplorePage/GeoJSONItem.tsx","components/ExplorePage/Menu.tsx","components/ExplorePage/MapHandler.tsx","components/ExplorePage/PreviewDialog.tsx","components/ExplorePage/WarningDialog.tsx","components/ExplorePage/index.tsx","components/Home/index.tsx","components/InspectGeojson/utils.ts","components/InspectGeojson/index.tsx","models/GeoObject.ts","components/Capitals/Item.tsx","components/Capitals/index.tsx","App.tsx","index.tsx"],"names":["countryLookup","continentLookup","baseUrl","process","geoObjectsPromise","fetch","then","pr","json","neighboursPromise","searchGeoObjects","options","a","geoObjects","filter","search","toLowerCase","includes","phrase","slice","pageSize","getRegions","iso3166a2","getCountries","countries","type","getCapitals","getCountry","find","getCountrySvg","text","getCountryFromLatLng","lat","lng","PolygonLookup","polygon","properties","ISO_A3","getContinentFromLatLng","continent","getNeighbours","neighbours","item","getCountryGeojsonByIso3166a3","iso3166a3","country","getContinentGeojson","getCountryGeojson","geojson","undefined","SvgMap","onMouseEnter","onMouseLeave","onMouseMove","svg","svgWrapperRef","useRef","useEffect","element","current","firstChild","SVGElement","querySelector","getBoundingClientRect","y","width","height","addEventListener","removeEventListener","className","ref","dangerouslySetInnerHTML","__html","memo","defaultEarthRadius","toRadiansRatio","Math","PI","toDegreesRatio","toRadians","angleInDegrees","toDegrees","angleInRadians","offset","c1","distance","earthRadius","bearing","lat1","lon1","dByR","cos","b","c","sin","d","asin","atan2","isObjectNotArray","argument","Array","isArray","isUndefinedOrNull","circleToPolygon","center","radius","n","numberOfEdges","getNumberOfEdges","getEarthRadius","getBearing","direction","rightHandRule","getDirection","start","coordinates","i","coordinate","push","newId","random","toString","substr","toBase64DataUri","payload","Base64","encode","download","url","fileName","anchor","document","createElement","body","appendChild","style","display","href","click","getTextFromBlob","blob","Promise","resolve","reader","FileReader","onload","result","readAsText","latlngTextRegex","extractGeoObjectFromText","data","JSON","parse","length","error","latlngText","exec","Number","getGeojsonFriendlyName","name","feature","geometry","numberOfPoints","numberOfPolygons","features","moment","format","trySaveToLocalStorage","localStorage","setItem","stringify","openFileDialog","reject","input","resolved","window","onFocus","setTimeout","remove","onchange","event","target","HTMLInputElement","from","files","file","BasicNode","match","linkPath","icon","faChevronRight","exact","activeClassName","to","Breadcrumbs","flagUrl","fullName","pathname","useLocation","background","Navbar","hasNeigbours","mapType","onMapChange","onMapSelect","mapoption","currentTarget","dataset","onClick","ToolTip","x","show","children","styles","useSpring","opacity","div","top","left","RegionTooltip","hasEntered","region","alt","src","capital","UnderConstruction","size","faHardHat","MapHandler","bounds","map","useMapEvents","setView","fitBounds","DevInfo","getCenter","console","log","getZoom","CountryPage","useState","setPosition","regions","pageState","state","setState","level","setLevel","setRegion","setEntered","setMapType","setGeojson","setSvg","useParams","location","setBounds","setNeighbours","hasNeighbours","setHasNeighbours","neighboursPath","geojsons","landNeighbours","neighbour","concatenatedGeojson","geoJSON","getBounds","countryCenter","latLng","toBounds","landNeighboursCount","useCallback","clientX","clientY","id","content","onADLChange","color","MapContainer","zoom","scrollWheelZoom","TileLayer","attribution","GeoJSON","index","capitalCenter","Marker","position","Popup","Item","neigboursCount","area","toggled","faMap","Countries","value","setValue","isLoading","hasError","onItemClick","faSearch","onChange","placeholder","Toolbar","onSearch","faGlobe","faHome","faEye","faPencilAlt","ListItem","thumbnailUrl","imageUrl","setImageUrl","image","Image","onerror","SearchBox","onClear","_onChange","faTimes","Icon","disabled","rest","SearchGeoObjectsDialog","isShowing","onHide","items","setResults","_value","useDebounce","emptyPolygon","DrawHandler","drawOption","isDragging","setDragging","setCenter","created","setCreated","completed","setCompleted","setRadius","setData","dragging","disable","latlng","enable","mouseup","mousemove","distanceTo","selected","onEnter","key","Circle","eventHandlers","mousedown","PreviewDialog","onExport","exportType","parent","onOutsideClick","contains","navigator","clipboard","writeText","faClipboard","faDownload","Checkbox","checked","label","Panel","onPreview","onRemoveShapes","onAllItemsSelect","selectedCount","isPreviewShowing","dataNotAvailable","dataAvailable","onDrawOptionChange","onExportTypeChange","_onItemClick","onItemSelect","faTrash","faDrawPolygon","faCircle","DrawPage","setGeoObjects","setPreviewShow","setDrawOption","setExportType","geometries","wkt","replace","some","ImportItem","isSelected","loadedAt","featuresCount","warning","invalid","onDelete","onShowOnMap","onShowGeojson","onShowWarning","onToggle","_onShowWarning","Date","toLocaleString","faExclamationTriangle","faCrosshairs","faCode","DragOverlay","faFileUpload","GeoJSONItem","useMemo","onEachFeature","Menu","onAction","_onAction","action","geojsonObjects","menu","setMenu","propagatedFrom","contextmenu","originalEvent","preventDefault","sourceTarget","WarningDialog","ExplorePage","setGeojsonObjects","isUploading","setUploading","setToggled","clipboardData","setCliboardData","pageMode","setPageMode","onDrop","acceptedFiles","newState","geoObject","concat","useDropzone","getRootProps","isDragActive","savedObjects","getItem","checkClipboard","readText","onPaste","_event","getData","geojsonObject","suffix","points","onUpload","faUpload","faList","speedMultiplier","menuItems","link","faPen","Home","breakDownGeojson","header","multiPolygonCoordinates","multiPolygon","InspectGeojson","now","onSelect","GeoObjectTypeMap","Capitals","App","setShow","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.19ef04fa.chunk.js","sourcesContent":["import { baseUrl } from \"./appConstants\";\r\nimport { Country, GeoObject, TerritoryWithCapital } from \"models/GeoObject\";\r\nimport { Region } from \"./models/Region\";\r\nimport { GeoJsonObject, FeatureCollection, Feature, Polygon, MultiPolygon } from \"geojson\";\r\nimport PolygonLookup from \"polygon-lookup\";\r\nimport { Neighbour } from \"models/Neighbour\";\r\n\r\ntype Options = {\r\n    phrase: string;\r\n    pageSize: number;\r\n}\r\n\r\nconst geoObjectsPromise = fetch(`${baseUrl}/assets/geoObjects.json`)\r\n        .then<GeoObject[]>(pr => pr.json());\r\n\r\nconst neighboursPromise = fetch(`${baseUrl}/assets/neighbours.json`)\r\n        .then<Neighbour[]>(pr => pr.json());\r\n\r\nexport const searchGeoObjects = async (options: Options): Promise<GeoObject[]> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n\r\n    return geoObjects\r\n        .filter(pr => \"search\" in pr && pr.search.toLowerCase().includes(options.phrase))\r\n        .slice(0, options.pageSize);\r\n}\r\n\r\nexport const getRegions = (iso3166a2: string): Promise<Region[]> => {\r\n    \r\n    return fetch(`${baseUrl}/assets/regions/${iso3166a2}.json`)\r\n        .then(pr => pr.json());\r\n}\r\n\r\nexport const getCountries = async ({\r\n    pageSize,\r\n    phrase\r\n}: Options): Promise<Country[]> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n    const countries = geoObjects\r\n    .filter(pr => pr.type === \"country\"\r\n        && pr.search.toLowerCase().includes(phrase)) as Country[];\r\n\r\n    return countries.slice(0, pageSize);\r\n}\r\n\r\nexport const getCapitals = async ({\r\n    pageSize,\r\n    phrase\r\n}: Options): Promise<TerritoryWithCapital[]> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n    const countries = geoObjects\r\n        .filter(pr => \"capital\" in pr\r\n            && pr.search.toLowerCase().includes(phrase)) as TerritoryWithCapital[];\r\n\r\n    return countries.slice(0, pageSize);\r\n}\r\n\r\nexport const getCountry = async (iso3166a2: string): Promise<Country | undefined> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n    const countries = geoObjects.filter(pr => pr.type === \"country\") as Country[];\r\n\r\n    return countries\r\n        .find(pr => pr.iso3166a2.includes(iso3166a2));\r\n}\r\n\r\nexport const getWorldSvg = () => {\r\n    return fetch(`${baseUrl}/assets/shapes/world.svg`)\r\n        .then(pr => pr.text());\r\n}\r\n\r\nexport const getCountrySvg = (iso3166a2: string) => {\r\n    return fetch(`${baseUrl}/assets/shapes/${iso3166a2}/first-level.svg`)\r\n        .then(pr => pr.text());\r\n}\r\n\r\nexport const getCountryGeojsonLink = (iso3166a2: string): string => {\r\n    return `${baseUrl}/assets/geojson/${iso3166a2}.geojson`;\r\n}\r\n\r\nlet countryLookup: PolygonLookup;\r\n\r\nexport const getCountryFromLatLng = async (lat: number, lng: number): Promise<string | undefined> => {\r\n    \r\n    if(!countryLookup) {\r\n        const countries = await fetch(`${baseUrl}/assets/geojson/countries.geojson`)\r\n            .then<FeatureCollection>(pr => pr.json());\r\n            countryLookup = new PolygonLookup(countries);\r\n    }\r\n\r\n    const polygon = countryLookup.search(lat, lng) as Feature<Polygon | MultiPolygon, { ISO_A3: string }> | undefined;\r\n    \r\n    if(polygon) {\r\n        return polygon.properties.ISO_A3.toLowerCase();\r\n    }\r\n}\r\n\r\nlet continentLookup: PolygonLookup;\r\n\r\nexport const getContinentFromLatLng = async (lat: number, lng: number): Promise<string | undefined> => {\r\n    \r\n    if(!continentLookup) {\r\n        const countries = await fetch(`${baseUrl}/assets/geojson/continents.geojson`)\r\n            .then<FeatureCollection>(pr => pr.json());\r\n            continentLookup = new PolygonLookup(countries);\r\n    }\r\n\r\n    const polygon = continentLookup.search(lat, lng) as Feature<Polygon | MultiPolygon, { continent: string }> | undefined;\r\n    \r\n    if(polygon) {\r\n        return polygon.properties.continent.toLowerCase();\r\n    }\r\n}\r\n\r\nexport const getNeighbours = async (iso3166a2: string): Promise<Neighbour | undefined> => {\r\n    const neighbours = await neighboursPromise;\r\n    const item = neighbours.find(pr => pr.iso3166a2 === iso3166a2);\r\n\r\n    return item;\r\n}\r\n\r\nexport const getCountryGeojsonByIso3166a3 = async (iso3166a3: string): Promise<GeoJsonObject | undefined> => {\r\n    const geoObjects = await geoObjectsPromise;\r\n    const countries = geoObjects.filter(pr => pr.type === \"country\") as Country[];\r\n\r\n    const country = countries.find(pr => pr.iso3166a3 === iso3166a3);\r\n    \r\n    return fetch(`${baseUrl}/assets/geojson/${country?.iso3166a2}.geojson`)\r\n        .then(pr => pr.json());\r\n}\r\n\r\nexport const getContinentGeojson = async (continent: string): Promise<GeoJsonObject | undefined> => {\r\n    return fetch(`${baseUrl}/assets/geojson/${continent}.geojson`)\r\n        .then(pr => pr.json());\r\n}\r\n\r\nexport const getCountryGeojson = async (iso3166a2: string): Promise<GeoJsonObject | undefined> => {\r\n    try {\r\n        const geojson = await fetch(`${baseUrl}/assets/geojson/${iso3166a2}.geojson`)\r\n            .then(pr => pr.json());   \r\n\r\n        return geojson;\r\n    } catch (error) {\r\n        debugger;\r\n        return undefined;\r\n    }\r\n     \r\n}","export const baseUrl = process.env.PUBLIC_URL || \"http://localhost:3000\";","import { FunctionComponent, memo } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport './svgMap.scss';\r\n\r\ntype Props = {\r\n    onMouseMove(event: MouseEvent): void;\r\n    onMouseEnter(): void;\r\n    onMouseLeave(): void;\r\n    svg: string;\r\n}\r\n\r\nconst SvgMap: FunctionComponent<Props> = ({\r\n    onMouseEnter,\r\n    onMouseLeave,\r\n    onMouseMove,\r\n    svg,\r\n}) => {\r\n    const svgWrapperRef = useRef<HTMLDivElement>(null);\r\n    \r\n    useEffect(() => {\r\n        const element = svgWrapperRef.current;\r\n \r\n        if(!element) {\r\n            return;\r\n        }\r\n\r\n        const svg = element.firstChild;\r\n       \r\n        if(!(svg instanceof SVGElement)) {\r\n            return;\r\n        }\r\n        \r\n        const shape = svg.querySelector(\"g\")!;\r\n\r\n        const { y, width, height } = shape.getBoundingClientRect();\r\n        //shape.style.transform = `translate(calc(50% - ${width / 2}px), calc(50% - ${(y + height)}px))`;\r\n\r\n        svg.addEventListener(\"mousemove\", onMouseMove);\r\n        svg.addEventListener(\"mouseenter\", onMouseEnter);\r\n        svg.addEventListener(\"mouseleave\", onMouseLeave);\r\n\r\n        return () => {\r\n            svg.removeEventListener(\"mousemove\", onMouseMove);\r\n            svg.addEventListener(\"mouseenter\", onMouseEnter);\r\n            svg.addEventListener(\"mouseleave\", onMouseLeave);\r\n        }\r\n\r\n    }, [onMouseEnter, onMouseLeave, onMouseMove, svgWrapperRef])\r\n\r\n    return <div\r\n        className=\"country-page__svg\"\r\n        ref={svgWrapperRef}\r\n        dangerouslySetInnerHTML={{ __html: svg }}\r\n    />\r\n}\r\n\r\nexport default memo(SvgMap);","import { Polygon } from \"geojson\";\r\n\r\nconst defaultEarthRadius = 6378137;\r\nconst defaultNumberOfEdges = 64;\r\n\r\ntype Options = {\r\n    numberOfEdges: number;\r\n    earthRadius: number;\r\n    rightHandRule: number;\r\n    bearing: number;\r\n}\r\n\r\nconst toRadiansRatio = Math.PI / 180;\r\nconst toDegreesRatio = 180 / Math.PI;\r\n\r\nfunction toRadians(angleInDegrees: number): number {\r\n    return angleInDegrees * toRadiansRatio;\r\n}\r\n\r\nfunction toDegrees(angleInRadians: number): number {\r\n    return angleInRadians * toDegreesRatio\r\n}\r\n\r\nfunction offset(c1: [number, number], distance: number, earthRadius: number, bearing: number): [number, number] {\r\n    const lat1 = toRadians(c1[1]);\r\n    const lon1 = toRadians(c1[0]);\r\n    const dByR = distance / earthRadius;\r\n\r\n    const a = Math.cos(dByR);\r\n    const b = Math.cos(lat1);\r\n    const c = Math.sin(dByR);\r\n    const d = Math.sin(lat1);\r\n\r\n    const lat = Math.asin(d * a + b * c * Math.cos(bearing));\r\n    const lon = lon1 + Math.atan2(Math.sin(bearing) * c * b, a - d * Math.sin(lat));\r\n\r\n    return [toDegrees(lon), toDegrees(lat)];\r\n}\r\n\r\nfunction getNumberOfEdges(options?: Partial<Options>) {\r\n    if (isUndefinedOrNull(options)) {\r\n        return defaultNumberOfEdges;\r\n    }\r\n    \r\n    if (isObjectNotArray(options)) {\r\n        const numberOfEdges = options.numberOfEdges;\r\n        return numberOfEdges === undefined ? defaultNumberOfEdges : numberOfEdges;\r\n    }\r\n\r\n    return defaultNumberOfEdges;\r\n}\r\n\r\nfunction getEarthRadius(options?: Partial<Options>) {\r\n    \r\n    if (isUndefinedOrNull(options)) {\r\n        return defaultEarthRadius;\r\n    }\r\n    \r\n    if(isObjectNotArray(options)) {\r\n        const earthRadius = options.earthRadius;\r\n        return earthRadius === undefined ? defaultEarthRadius : earthRadius;\r\n    }\r\n\r\n    return defaultEarthRadius;\r\n}\r\n\r\nfunction getDirection(options?: Partial<Options>){\r\n    if (isObjectNotArray(options) && options.rightHandRule){\r\n        return -1;\r\n    }\r\n    \r\n    return 1;\r\n}\r\n\r\nfunction getBearing(options?: Partial<Options>) {\r\n    if (isUndefinedOrNull(options)) {\r\n        return 0;\r\n    } \r\n    \r\n    if(isObjectNotArray(options)) {\r\n        const bearing = options.bearing;\r\n        return bearing === undefined ? 0 : bearing;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nfunction isObjectNotArray(argument: Partial<Options> | Array<any> | undefined): argument is Options {\r\n    return argument !== null && typeof argument === \"object\" && !Array.isArray(argument);\r\n}\r\n\r\nfunction isUndefinedOrNull(argument?: Partial<Options>): argument is undefined {\r\n    return argument === null || argument === undefined;\r\n}\r\n\r\nexport function circleToPolygon(center: [number, number], radius: number, options?: Partial<Options>): Polygon {\r\n    const n = getNumberOfEdges(options);\r\n    const earthRadius = getEarthRadius(options);\r\n    const bearing = getBearing(options);\r\n    const direction = getDirection(options);\r\n  \r\n    const start = toRadians(bearing);\r\n    const coordinates = new Array<[number, number]>();\r\n    \r\n    for (let i = 0; i < n; ++i) {\r\n        const coordinate = offset(center, radius, earthRadius, start + (direction * 2 * Math.PI * -i) / n);\r\n        coordinates.push(coordinate);\r\n    }\r\n    \r\n    coordinates.push(coordinates[0]);\r\n  \r\n    return {\r\n        type: \"Polygon\",\r\n        coordinates: [coordinates]\r\n    };\r\n};","import { GeoJsonObject, Feature, FeatureCollection } from 'geojson';\r\nimport { Base64 } from 'js-base64';\r\nimport moment from 'moment';\r\nimport { parse } from 'wkt';\r\nexport * from \"./circleToPolygon\";\r\n\r\nexport const newId = () => {    \r\n    return '_' + Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const toBase64DataUri = (text: string) => {\r\n    const payload = Base64.encode(text);\r\n    const dataUri = `data:text/plain;base64,${payload}`;\r\n    return dataUri;\r\n}\r\n\r\nexport const download = (url: string, fileName: string) => {\r\n    const anchor = document.createElement(\"a\");\r\n    document.body.appendChild(anchor);\r\n    anchor.style.display = \"none\";\r\n    anchor.href = url;\r\n    anchor.download = fileName;\r\n    anchor.click();\r\n}\r\n\r\nexport const getTextFromBlob = async(blob: Blob): Promise<string> => {\r\n    return await new Promise<string>((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = function() {\r\n            const text = reader.result as string;\r\n            resolve(text);\r\n        }; \r\n        reader.readAsText(blob);\r\n    })\r\n}\r\n\r\nconst latlngTextRegex = /(-?\\d*\\.?\\d+)[,\\s]*(-?\\d*\\.?\\d+)/;\r\n\r\nexport const extractGeoObjectFromText = (text: string): GeoJsonObject | undefined => {\r\n    \r\n    try {\r\n        const data = JSON.parse(text) as GeoJsonObject | number[];\r\n\r\n        if(Array.isArray(data)) {\r\n\r\n            if(!data.length || typeof data[0] !== \"number\") {\r\n                return;\r\n            }\r\n\r\n            return {\r\n                type: \"LineString\",\r\n                coordinates: [data],\r\n            } as GeoJsonObject;\r\n        }\r\n\r\n        return data;\r\n    }\r\n    catch(error) {\r\n        try {\r\n            const geojson = parse(text);\r\n            return geojson;\r\n        } catch (error) {\r\n        }\r\n    }\r\n\r\n    const latlngText = latlngTextRegex.exec(text);\r\n\r\n    if(latlngText && latlngText.length === 3) {\r\n        const [,lat,lng] = latlngText;\r\n        const type = \"Point\";\r\n        const coordinates = [Number(lat), Number(lng)];\r\n\r\n        return {\r\n            type,\r\n            coordinates,\r\n        } as GeoJsonObject;\r\n    }\r\n}\r\n\r\nexport const getGeojsonFriendlyName = (data: GeoJsonObject): string => {\r\n    let name = \"\";\r\n\r\n    if(data) {\r\n        switch(data.type) {\r\n            case \"Feature\":\r\n                name += \"feature\";\r\n                const feature = data as Feature;\r\n                if(feature.geometry.type === \"Polygon\") {\r\n                    name += \"_polygon\";\r\n                    const coordinates = feature.geometry.coordinates;\r\n\r\n                    if(coordinates.length && coordinates[0].length) {\r\n                        const numberOfPoints = coordinates[0].length;\r\n                        name += `_${numberOfPoints}`;\r\n                    }\r\n                }\r\n                if(feature.geometry.type === \"MultiPolygon\") {\r\n                    name += \"_multipolygon\";\r\n                    const coordinates = feature.geometry.coordinates;\r\n\r\n                    if(coordinates.length && coordinates[0].length) {\r\n                        const numberOfPolygons = coordinates[0].length;\r\n                        name += `_${numberOfPolygons}`;\r\n                    }\r\n                }\r\n            break;\r\n            case \"Point\":\r\n                name += \"_point\";\r\n            break;\r\n            case \"Polygon\":\r\n                name += \"_polygon\";\r\n            break;\r\n            case \"MultiPolygon\":\r\n                name += \"_multipolygon\";\r\n            break;\r\n            case \"LineString\":\r\n                name += \"linestring\";\r\n            break;\r\n            case \"FeatureCollection\":\r\n                const features = data as FeatureCollection;\r\n                name += `features_${features.features.length}`;\r\n            break;\r\n        }\r\n    }\r\n\r\n    name += moment().format(\"_YYYYMMDDHHmmss\");\r\n\r\n    return name;\r\n}\r\n\r\nexport const trySaveToLocalStorage = (data: any): boolean => {\r\n    try {\r\n        localStorage.setItem(\"saved\", JSON.stringify(data));\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const openFileDialog = () => new Promise<File | null>((resolve, reject) => {\r\n    const input = document.createElement(\"input\")\r\n    input.type = \"file\";\r\n    let resolved = false;\r\n\r\n    const onFocus = () => {\r\n        window.removeEventListener(\"focus\", onFocus)\r\n        setTimeout(() => {\r\n            if(!resolved) {\r\n                resolve(null);\r\n            }\r\n            input.remove();\r\n        }, 100);\r\n    }\r\n\r\n    window.addEventListener(\"focus\", onFocus)\r\n\r\n    input.onchange = (event) => {\r\n        if (!(event.target instanceof HTMLInputElement)) {\r\n            return;\r\n        }\r\n\r\n        resolved = true;\r\n        const [file] = Array.from(event.target.files!);\r\n        resolve(file);\r\n    }\r\n\r\n    input.click();\r\n})\r\n\r\nexport const backgroundImageUrl = (url: string) => ({\r\n    background: `url(${url}) center center / contain no-repeat`\r\n})","import { faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { FunctionComponent, memo } from 'react';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\nimport './breadcrumbs.scss';\r\n\r\ntype Props = {\r\n    match: boolean;\r\n    linkPath: string;\r\n    text: string;\r\n}\r\n\r\nconst BasicNode: FunctionComponent<Props> = ({\r\n    match,\r\n    linkPath,\r\n    text\r\n}) => {\r\n\r\n    if(!match) {\r\n        return null;\r\n    }\r\n\r\n    return <>\r\n        <div className=\"breadcrumbs__separator\">\r\n            <FontAwesomeIcon icon={faChevronRight}/>\r\n        </div>\r\n        <NavLink\r\n            exact\r\n            activeClassName=\"breadcrumbs__node--active\"\r\n            className=\"breadcrumbs__node\" to={linkPath}>\r\n            {text}\r\n        </NavLink>\r\n    </>\r\n}\r\nexport default memo(BasicNode);","import { faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { baseUrl } from 'appConstants';\r\nimport { backgroundImageUrl } from 'appUtils';\r\nimport { FunctionComponent, memo } from 'react';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\nimport BasicNode from './BasicNode';\r\nimport './breadcrumbs.scss';\r\n\r\ntype Props = {\r\n    iso3166a2?: string;\r\n    flagUrl?: string;\r\n    fullName?: string;\r\n}\r\n\r\nconst Breadcrumbs: FunctionComponent<Props> = ({\r\n    iso3166a2,\r\n    flagUrl,\r\n    fullName,\r\n}) => {\r\n    const { pathname } = useLocation();\r\n    \r\n    return <div className=\"breadcrumbs\">\r\n        <NavLink\r\n            exact\r\n            activeClassName=\"breadcrumbs__node--active\"\r\n            className=\"breadcrumbs__node\" to=\"/\">\r\n            Home\r\n        </NavLink>\r\n        <BasicNode\r\n            match={pathname === \"/inspect-geojson\"}\r\n            linkPath=\"/inspect-geojson\"\r\n            text=\"Inspect Geojson\" />\r\n        <BasicNode\r\n            match={pathname === \"/explore\"}\r\n            linkPath=\"/explore\"\r\n            text=\"Explore\" />\r\n        <BasicNode\r\n            match={pathname === \"/capitals\"}\r\n            linkPath=\"/capitals\"\r\n            text=\"Capitals\" />\r\n        <BasicNode\r\n            match={pathname.includes(\"/country\") || pathname.includes(\"/countries\")}\r\n            linkPath=\"/countries\"\r\n            text=\"Countries\" />\r\n        {flagUrl && fullName ? <>\r\n            <div className=\"breadcrumbs__separator\">\r\n                <FontAwesomeIcon icon={faChevronRight}/>\r\n            </div>\r\n            <NavLink\r\n                exact\r\n                activeClassName=\"breadcrumbs__node--active\"\r\n                className=\"countryNode breadcrumbs__node\"\r\n                to={`/country/${iso3166a2}`}>\r\n                <div className=\"countryNode__flag\" style={backgroundImageUrl(baseUrl + flagUrl)}></div>\r\n                <div className=\"countryNode__title\">{fullName}</div>\r\n            </NavLink>\r\n        </>: null}\r\n        <BasicNode\r\n            match={pathname.includes(\"/neighbours\")}\r\n            linkPath={`/country/${iso3166a2}/neighbours`}\r\n            text=\"Neigbours\" />\r\n    </div>;\r\n}\r\n\r\nexport default memo(Breadcrumbs);","import { FunctionComponent, MouseEvent, memo } from 'react';\r\nimport { MapType } from './types';\r\nimport Breadcrumbs from 'components/Breadcrumbs';\r\nimport './navbar.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype Props = {\r\n    hasNeigbours: boolean\r\n    iso3166a2: string;\r\n    flagUrl: string;\r\n    fullName: string;\r\n    mapType: MapType;\r\n    onMapChange(mapType: MapType): void;\r\n}\r\n\r\nconst Navbar: FunctionComponent<Props> = ({\r\n    hasNeigbours,\r\n    iso3166a2,\r\n    flagUrl,\r\n    fullName,\r\n    mapType,\r\n    onMapChange\r\n}) => {\r\n\r\n    const onMapSelect = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { mapoption } = event.currentTarget.dataset;\r\n        onMapChange(mapoption as MapType);\r\n    }\r\n\r\n    return <div className=\"country-page__navbar\">\r\n        <Breadcrumbs\r\n            iso3166a2={iso3166a2}\r\n            flagUrl={flagUrl}\r\n            fullName={fullName}\r\n        />\r\n        <div>\r\n            {hasNeigbours ? <Link\r\n                className=\"country-page__link\"\r\n                to={`/country/${iso3166a2}/neighbours`}>Neighbours</Link> : null}\r\n        </div>\r\n        <div className=\"country-page__navbarMapSwitch\">\r\n            <div\r\n                onClick={onMapSelect}\r\n                data-mapoption=\"leaflet\"\r\n                className={`country-page__navbarMapOption ${mapType === \"leaflet\" ? \"country-page__navbarMapOption--selected\" : null}`}>\r\n                    Leaflet</div>\r\n            <div\r\n                onClick={onMapSelect}\r\n                data-mapoption=\"svg\"\r\n                className={`country-page__navbarMapOption ${mapType === \"svg\" ? \"country-page__navbarMapOption--selected\" : null}`}>\r\n                    Svg</div>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default memo(Navbar);\r\n","import React, { FunctionComponent } from 'react';\r\nimport { animated, useSpring } from 'react-spring';\r\nimport './tooltip.scss';\r\n\r\ntype Props = {\r\n    show: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nconst ToolTip: FunctionComponent<Props> = ({\r\n    x,\r\n    y,\r\n    show,\r\n    children\r\n}) => {\r\n    const styles = useSpring({\r\n        opacity: show ? 1 : 0,\r\n    })\r\n\r\n    return <animated.div className=\"tooltip\" style={{\r\n        ...styles,\r\n        top: `${y - 60}px`,\r\n        left: `${x - 90}px`,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"block\")\r\n    }}>\r\n        {children}\r\n    </animated.div>;\r\n}\r\n\r\nexport default ToolTip;\r\n","import React, { FunctionComponent, memo } from 'react';\r\nimport ToolTip from 'components/ToolTip';\r\nimport { baseUrl } from 'appConstants';\r\nimport { Region } from 'models/Region';\r\nimport './regionTooltip.scss';\r\n\r\ntype Props = {\r\n    hasEntered: boolean;\r\n    region?: Region;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nconst RegionTooltip: FunctionComponent<Props> = ({\r\n    hasEntered,\r\n    region,\r\n    x,\r\n    y,\r\n}) => {\r\n\r\n    return <ToolTip\r\n        show={hasEntered && !!region}\r\n        x={x}\r\n        y={y}>\r\n        {region ? <div className=\"region\">\r\n            <div>\r\n                <img alt={region.region} className=\"region__image\" src={baseUrl + region.flagUrl}/>\r\n            </div>\r\n            <div className=\"region__info\">\r\n                <div>Region: {region.region}</div>\r\n                <div>Capital: {region.capital}</div>\r\n            </div>\r\n            \r\n        </div> : null}\r\n    </ToolTip>;\r\n}\r\n\r\nexport default memo(RegionTooltip);\r\n","import React, { FunctionComponent, memo } from 'react';\r\nimport { faHardHat } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './underConstruction.scss';\r\n\r\nconst UnderConstruction: FunctionComponent = ({\r\n}) => {\r\n \r\n    return <div className=\"country-page__info\">\r\n    <div>\r\n        <FontAwesomeIcon size=\"10x\" icon={faHardHat} />\r\n    </div>\r\n    <div>\r\n        <div className=\"country-page__infoTitle\">\r\n            Page is under construction\r\n        </div>\r\n        <div className=\"country-page__infoDescription\">\r\n            The data required for this page might not be prepared or an error occurred while loading it.\r\n        </div>\r\n    </div>\r\n</div>\r\n}\r\n\r\nexport default memo(UnderConstruction);","import { LatLngBoundsExpression, LatLngLiteral, LeafletEvent } from 'leaflet';\r\nimport { FunctionComponent, memo, useMemo, useState } from 'react';\r\nimport { useMapEvents } from 'react-leaflet';\r\nimport { useEffect } from 'react';\r\n\r\ntype Props = {\r\n    center: LatLngLiteral;\r\n    bounds?: LatLngBoundsExpression;\r\n}\r\n\r\nconst MapHandler: FunctionComponent<Props> = ({\r\n    center,\r\n    bounds,\r\n}) => {\r\n    const map = useMapEvents({});\r\n\r\n    useEffect(() => {\r\n        map.setView(center);\r\n    }, [map, center]);\r\n\r\n    useEffect(() => {\r\n        if(bounds) {\r\n            map.fitBounds(bounds);\r\n        }\r\n    }, [map, bounds]);\r\n    \r\n    return null;\r\n}\r\n\r\nexport default memo(MapHandler);\r\n","import { useCallback, FunctionComponent, useState, useEffect, MouseEvent } from 'react';\r\nimport { Region } from 'models/Region';\r\nimport { getCountry, getCountryGeojson, getCountrySvg, getNeighbours, getRegions } from 'api';\r\nimport { MapContainer, TileLayer, GeoJSON, useMapEvents, Marker, Popup } from 'react-leaflet';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { Country } from \"models/GeoObject\";\r\nimport { GeoJsonObject } from \"geojson\";\r\nimport GridLoader from 'react-spinners/GridLoader';\r\nimport SvgMap from './SvgMap';\r\nimport Navbar from './Navbar';\r\nimport RegionTooltip from './RegionTooltip';\r\nimport { MapType } from './types';\r\nimport UnderConstruction from './UnderConstruction';\r\nimport { latLng, point, geoJSON, LatLng, LatLngBoundsExpression, LatLngLiteral } from 'leaflet';\r\nimport MapHandler from './MapHandler';\r\nimport './index.scss';\r\n\r\ntype State = {\r\n    iso3166a2?: string;\r\n    regions: Region[];\r\n} & ({\r\n    country?: Country;\r\n    pageState: \"loading\" | \"error\";\r\n} | {\r\n    country: Country;\r\n    pageState: \"loaded\";\r\n})\r\n\r\nconst CountryPage: FunctionComponent = () => {\r\n    const [{x,y}, setPosition] = useState({\r\n        x: -1,\r\n        y: -1,\r\n    });\r\n    const [state, setState] = useState<State>({\r\n        regions: [],\r\n        pageState: \"loading\",\r\n    });\r\n    const [level, setLevel] = useState<number>(0);\r\n    const [region, setRegion] = useState<Region>();\r\n    const [hasEntered, setEntered] = useState(false);\r\n    const [mapType, setMapType] = useState<MapType>(\"leaflet\");\r\n    const [geojson, setGeojson] = useState<GeoJsonObject>();\r\n    const [svg, setSvg] = useState<string>(\"\");\r\n    const { iso3166a2 } = useParams<{ iso3166a2: string }>();\r\n    const location = useLocation();\r\n\r\n    const [center, setCenter] = useState<LatLngLiteral>({\r\n        lat: 51.505,\r\n        lng: -0.09,\r\n    });\r\n    const [bounds, setBounds] = useState<LatLngBoundsExpression>();\r\n    const [neighbours, setNeighbours] = useState<GeoJsonObject[]>([]);\r\n    const [hasNeighbours, setHasNeighbours] = useState(false);\r\n    const neighboursPath = location.pathname.includes(\"neighbours\");\r\n\r\n    useEffect(() => {\r\n        setNeighbours([]);\r\n        setState(state => ({\r\n            ...state,\r\n            iso3166a2,\r\n            pageState: \"loading\",\r\n        }));\r\n    }, [location, iso3166a2]);\r\n\r\n    useEffect(() => {\r\n\r\n        if(state.iso3166a2 == iso3166a2 && state.pageState === \"loaded\") {\r\n            return;\r\n        }\r\n\r\n        if(neighboursPath) {\r\n            (async () => {\r\n                const country = await getCountry(iso3166a2);\r\n                const neighbours = await getNeighbours(iso3166a2);\r\n                const geojsons = []\r\n\r\n                if(!country) {\r\n                    setState(state => ({\r\n                        ...state,\r\n                        pageState: \"error\",\r\n                    }));\r\n                    return;\r\n                }\r\n\r\n                const landNeighbours = neighbours?.landNeighbours || [];\r\n\r\n                for(const neighbour of landNeighbours) {\r\n\r\n                    if(!neighbour.iso3166a2) {\r\n                        continue;\r\n                    }\r\n\r\n                    const geojson = await getCountryGeojson(neighbour.iso3166a2);\r\n\r\n                    if(!geojson) {\r\n                        continue;\r\n                    }\r\n\r\n                    geojsons.push(geojson!);\r\n                }\r\n                console.log(landNeighbours);\r\n                const concatenatedGeojson = {\r\n                    type: \"FeatureCollection\" as const,\r\n                    features: geojsons,\r\n                };\r\n\r\n                const bounds = geoJSON(concatenatedGeojson).getBounds();\r\n                setBounds(bounds);\r\n                setNeighbours(geojsons);\r\n                setState(state => ({\r\n                    ...state,\r\n                    iso3166a2,\r\n                    country,\r\n                    regions: [],\r\n                    pageState: \"loaded\",\r\n                }));\r\n            })();\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            try {\r\n                const country = await getCountry(iso3166a2);\r\n                const regions = await getRegions(iso3166a2);\r\n                const neighbours = await getNeighbours(iso3166a2);\r\n\r\n                if(!country) {\r\n                    setState(state => ({\r\n                        ...state,\r\n                        pageState: \"error\",\r\n                    }));\r\n                    return;\r\n                }\r\n\r\n                const [lat, lng] = country.countryCenter;\r\n                const bounds = latLng(lat, lng).toBounds(1000000);\r\n                setBounds(bounds);\r\n\r\n                setHasNeighbours(!!neighbours?.landNeighboursCount);\r\n                setState({\r\n                    iso3166a2,\r\n                    country,\r\n                    regions,\r\n                    pageState: \"loaded\",\r\n                });\r\n            } catch (error) {\r\n                console.log(error)\r\n                setState(state => ({\r\n                    ...state,\r\n                    pageState: \"error\",\r\n                }));\r\n            }\r\n        })();\r\n        \r\n    }, [location, state])\r\n\r\n    const onMouseMove = useCallback((event: globalThis.MouseEvent) => {\r\n        if(state.pageState !== \"loaded\") {\r\n            return;\r\n        }\r\n        \r\n        setPosition({\r\n            x: event.clientX,\r\n            y: event.clientY\r\n        })\r\n        \r\n        if(event.target instanceof SVGElement) {\r\n            const id = event.target.id;\r\n\r\n            if(id) {\r\n                const item = state.regions.find(pr => pr.id === id);\r\n\r\n                if(item) {\r\n                    setRegion(item);\r\n                }\r\n            }\r\n            else {\r\n                setRegion(undefined);\r\n            }\r\n        }\r\n    }, [state]);\r\n\r\n    const onMouseEnter = () => {\r\n        setEntered(true);\r\n    }\r\n\r\n    const onMouseLeave = () => {\r\n        setEntered(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        (async () => {\r\n\r\n            try {\r\n                if(mapType === \"svg\") {\r\n                    const svg = await getCountrySvg(iso3166a2);\r\n                    setSvg(svg);\r\n                }\r\n                else {\r\n                    const geojson = await getCountryGeojson(iso3166a2);\r\n                    setGeojson(geojson);\r\n                }\r\n            } catch (error) {\r\n                \r\n            }\r\n\r\n         \r\n        })();\r\n       \r\n    }, [iso3166a2, mapType]);\r\n\r\n    const onADLChange = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { level } = event.currentTarget.dataset;\r\n        setLevel(Number(level));\r\n    };\r\n\r\n    let content;\r\n\r\n    switch(state.pageState) {\r\n        case \"loading\":\r\n            content = <GridLoader color=\"white\" size={15} />;\r\n        break;\r\n        case \"error\":\r\n            content = <UnderConstruction/>;\r\n        break;\r\n        case \"loaded\":\r\n            content =  <>\r\n                <Navbar\r\n                    hasNeigbours={!neighboursPath && hasNeighbours}\r\n                    iso3166a2={iso3166a2}\r\n                    flagUrl={state.country.flagUrl}\r\n                    fullName={state.country.fullName}\r\n                    mapType={mapType}\r\n                    onMapChange={setMapType}\r\n                />\r\n                <RegionTooltip\r\n                    hasEntered={hasEntered}\r\n                    x={x}\r\n                    y={y}\r\n                    region={region}\r\n                />\r\n                <div className=\"country-page__map\">\r\n                    {mapType === \"svg\" ? <SvgMap\r\n                        onMouseEnter={onMouseEnter}\r\n                        onMouseLeave={onMouseLeave}\r\n                        onMouseMove={onMouseMove}\r\n                        svg={svg}\r\n                    /> :\r\n                    <MapContainer\r\n                        zoom={state.country.zoom}\r\n                        center={center}\r\n                        scrollWheelZoom={true}\r\n                        className=\"country-page__leafletMap\">\r\n                        <TileLayer\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n                        <MapHandler\r\n                            center={center}\r\n                            bounds={bounds}\r\n                        />\r\n                        {!neighboursPath && geojson ? <GeoJSON data={geojson}/> : null}\r\n                        {neighbours.map((pr, index) => <GeoJSON key={index} data={pr}/>)}\r\n                        {state.country.capitalCenter ? <Marker position={state.country.capitalCenter}>\r\n                            <Popup>\r\n                                {state.country.capital}\r\n                            </Popup>\r\n                        </Marker> : null}\r\n                        <DevInfo/>\r\n                    </MapContainer>}\r\n                </div>\r\n                <div className=\"country-page__footer\">\r\n                    <div className=\"country-page__administrativeDivisions\">\r\n                        <div className={`country-page__administrativeDivision ${level === 0 ? \"selected\" : \"\"}`} data-level={0} onClick={onADLChange}>Country</div>\r\n                        <div className={`country-page__administrativeDivision ${level === 1 ? \"selected\" : \"\"}`} data-level={1} onClick={onADLChange}>Departments</div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        break;\r\n    }\r\n\r\n    return <div className={`country-page ${state.pageState !== \"loaded\" ? \"center\": null}`}>\r\n        {content}\r\n    </div>;\r\n}\r\n\r\nconst DevInfo = () => {\r\n    const map = useMapEvents({\r\n        click(event) {\r\n            const { lat, lng } = map.getCenter();\r\n            \r\n            console.log([lat, lng], map.getZoom());\r\n        }\r\n    })\r\n\r\n    return null;\r\n}\r\n\r\nexport default CountryPage;\r\n","import { FunctionComponent, MouseEvent } from 'react';\r\nimport { Country } from \"models/GeoObject\";\r\nimport { baseUrl } from 'appConstants';\r\nimport './item.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMap } from '@fortawesome/free-solid-svg-icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype Props = Country & {\r\n    onClick(event: MouseEvent<HTMLDivElement>): void;\r\n    toggled: boolean;\r\n};\r\n\r\nconst Item: FunctionComponent<Props> = ({\r\n    id,\r\n    fullName,\r\n    capital,\r\n    iso3166a2,\r\n    iso3166a3,\r\n    flagUrl,\r\n    neigboursCount,\r\n    area,\r\n    onClick,\r\n    toggled,\r\n}) => {\r\n   \r\n    return <div data-id={id} className={`country-item`} onClick={onClick}>\r\n        <div className=\"country-item__row\">\r\n            <div className=\"country-item__column\">{fullName}</div>\r\n            <div className=\"country-item__column\">{capital}</div>\r\n            <div className=\"country-item__column\">\r\n            <div className=\"country-item__flag\" style={{\r\n                    background: `url(${baseUrl + flagUrl}) center center / cover`\r\n                }}/>\r\n            </div>\r\n            <div className=\"country-item__column\">{iso3166a2}</div>\r\n            <div className=\"country-item__column\">{iso3166a3}</div>\r\n        </div>\r\n        {toggled ? <div className=\"country-item__details\">\r\n            <div className=\"country-item__field\">Neighbours: {neigboursCount}</div>\r\n            <div className=\"country-item__field\">Area: {area} km2</div>\r\n            <div className=\"country-item__bottom\">\r\n                <Link className=\"country-item__link\" to={`/country/${iso3166a2}`}><FontAwesomeIcon icon={faMap}/></Link>\r\n            </div>\r\n        </div> : null}\r\n    </div>;\r\n}\r\n\r\n\r\nexport default Item;\r\n","import { MouseEvent, ChangeEvent, FunctionComponent } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { getCountries } from 'api';\r\nimport { Country } from \"models/GeoObject\";\r\nimport Item from './Item';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport Breadcrumbs from 'components/Breadcrumbs';\r\nimport './index.scss';\r\n\r\ntype State = {\r\n    countries: (Country & { toggled?: boolean })[];\r\n    isLoading: boolean;\r\n    hasError: boolean;\r\n}\r\n\r\nconst Countries: FunctionComponent = () => {\r\n    const [value, setValue] = useState(\"\");\r\n    const [state, setState] = useState<State>({\r\n        countries: [],\r\n        isLoading: true,\r\n        hasError: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        (async () => {\r\n            try {\r\n                const countries = await getCountries({\r\n                    pageSize: 25,\r\n                    phrase: value.toLowerCase(),\r\n                });\r\n\r\n                setState({\r\n                    countries,\r\n                    isLoading: false,\r\n                    hasError: false,\r\n                });\r\n            } catch (error) {\r\n                setState({\r\n                    countries: [],\r\n                    hasError: true,\r\n                    isLoading: false,\r\n                });\r\n            }\r\n        })();\r\n        \r\n    }, [value])\r\n\r\n    const onItemClick = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        setState(state => ({\r\n            ...state,\r\n            countries: state.countries.map(pr => ({...pr, toggled: pr.id === id ? !pr.toggled : false}))\r\n        }));\r\n    }\r\n\r\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value;\r\n        setValue(value);\r\n    }\r\n\r\n    return <div className={`countries-page`}>\r\n        <Breadcrumbs/>\r\n        <div className=\"search\">\r\n            <div className=\"search__icon\">\r\n                <FontAwesomeIcon icon={faSearch}/>\r\n            </div>\r\n            <input\r\n                className={`search__input`}\r\n                value={value}\r\n                onChange={onChange}\r\n                placeholder=\"Search...\"\r\n                type=\"text\"/>\r\n        </div>\r\n        <div>\r\n            <div className=\"countries-page__headers\">\r\n                <div className=\"countries-page__header\">Full Name</div>\r\n                <div className=\"countries-page__header\">Capital</div>\r\n                <div className=\"countries-page__header\">Flag</div>\r\n                <div className=\"countries-page__header\">ISO 3166-2</div>\r\n                <div className=\"countries-page__header\">ISO 3166-3</div>\r\n            </div>\r\n            {state.countries.map(pr => <Item\r\n                toggled={pr.toggled || false}\r\n                onClick={onItemClick}\r\n                key={pr.id}\r\n                {...pr}/>)}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\n\r\nexport default Countries;\r\n","import { FunctionComponent, memo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEye, faGlobe, faHome, faPencilAlt, faSearch } from '@fortawesome/free-solid-svg-icons'\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport './toolbar.scss';\r\n\r\ntype Props = {\r\n    onSearch(): void;\r\n}\r\n\r\nconst Toolbar: FunctionComponent<Props> = ({\r\n    onSearch\r\n}) => {\r\n\r\n    return <div className=\"toolbar\">\r\n        <Link className=\"toolbar__logo\" to={`/`}>\r\n            <div className=\"toolbar__logoText\">Geo-shapes</div>\r\n            <div className=\"toolbar__logoIcon\">\r\n                <FontAwesomeIcon icon={faGlobe}/>\r\n            </div>\r\n        </Link>\r\n        <div className=\"toolbar__menu\">\r\n            <NavLink activeClassName=\"toolbar__iconButton--selected\" className=\"toolbar__iconButton\" exact to={`/`}>\r\n                <FontAwesomeIcon icon={faHome}/>\r\n            </NavLink>\r\n            <NavLink activeClassName=\"toolbar__iconButton--selected\" className=\"toolbar__iconButton\" exact to={`/explore`}>\r\n                <FontAwesomeIcon icon={faEye}/>\r\n            </NavLink>\r\n            <NavLink activeClassName=\"toolbar__iconButton--selected\" className=\"toolbar__iconButton\" exact to={`/draw`}>\r\n                <FontAwesomeIcon icon={faPencilAlt}/>\r\n            </NavLink>\r\n            <div className=\"toolbar__iconButton\" onClick={onSearch}>\r\n                <FontAwesomeIcon icon={faSearch}/>\r\n            </div>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default memo(Toolbar);\r\n","import { FunctionComponent, memo, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { baseUrl } from '../../appConstants';\r\nimport { Country } from 'models/GeoObject';\r\nimport './listItem.scss';\r\n\r\ntype Props = Country & {\r\n    onClick(): void;\r\n}\r\n\r\nconst ListItem: FunctionComponent<Props> = ({\r\n    capital,\r\n    iso3166a2,\r\n    flagUrl,\r\n    fullName,\r\n    id,\r\n    thumbnailUrl,\r\n    type,\r\n    onClick,\r\n}) => {\r\n    const [imageUrl, setImageUrl] = useState<string | undefined>(baseUrl + thumbnailUrl);\r\n\r\n    useEffect(() => {\r\n        if(!imageUrl) {\r\n            return;\r\n        }\r\n\r\n        const image = new Image();\r\n        image.onerror = () => setImageUrl(undefined)\r\n        image.src = imageUrl;\r\n        \r\n    }, [imageUrl]);\r\n\r\n    return <div key={id} className=\"geoObject\">\r\n        <div className=\"geoObject__imageWrapper\">\r\n            <div className=\"geoObject__image\" style={{\r\n            background: imageUrl ? `url(${imageUrl}) center center / cover` : \"gray\"\r\n        }}></div>\r\n        </div>\r\n        <Link className=\"geoObject__link\" onClick={onClick} to={`/country/${iso3166a2}`}>\r\n            <div>\r\n                <div className=\"geoObject__name\">{fullName}</div>\r\n                <div className=\"geoObject__type\">{capital}</div>\r\n            </div>\r\n            <div className=\"geoObject__flag\" style={{\r\n                background: `url(${baseUrl + flagUrl}) center center / cover`\r\n            }}></div>\r\n        </Link>\r\n    </div>\r\n}\r\n\r\nexport default memo(ListItem);","import { ChangeEvent, FunctionComponent } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { useCallback } from 'react';\r\nimport './searchBox.scss';\r\n\r\ntype Props = {\r\n    value?: string;\r\n    onChange(value: string): void;\r\n    onClear(): void;\r\n}\r\n\r\nconst SearchBox: FunctionComponent<Props> = ({\r\n    value,\r\n    onChange,\r\n    onClear\r\n}) => {\r\n    const _onChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value;\r\n        onChange(value);\r\n    }, [onChange]);\r\n\r\n    return <div className={`searchbox ${value ? \"searchbox--typed\": \"\"}`}>\r\n    <div className={`searchbox__icon ${value ? \"searchbox__icon--active\": \"\"}`}><FontAwesomeIcon icon={faSearch}/></div>\r\n        <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={_onChange}\r\n            className=\"searchbox__input\"\r\n            placeholder=\"I am looking for...\"\r\n            />\r\n        {value ? <div onClick={onClear} className=\"searchbox__clearIcon\"><FontAwesomeIcon icon={faTimes}/></div> : null}\r\n    </div>\r\n}\r\n\r\nexport default SearchBox;","import React, { FunctionComponent, MouseEvent, memo } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport './icon.scss';\r\n\r\ntype Props = {\r\n    className?: string;\r\n    onClick?(event: MouseEvent<HTMLDivElement>): void\r\n    icon: IconProp;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst Icon: FunctionComponent<Props> = ({\r\n    className,\r\n    onClick,\r\n    icon,\r\n    disabled = false,\r\n    ...rest\r\n}) => {\r\n    return <div\r\n        {...rest}\r\n        onClick={onClick}\r\n        className={`icon ${disabled ? \"icon--disabled\" : \"\"} ${onClick ? \"icon--interactive\" : \"\"} ${className}`}>\r\n            <FontAwesomeIcon icon={icon}/>\r\n    </div>\r\n}\r\n\r\nexport default memo(Icon);","import React, { FunctionComponent } from 'react';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport GridLoader from 'react-spinners/GridLoader';\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport { searchGeoObjects } from 'api';\r\nimport { GeoObject } from 'models/GeoObject';\r\nimport useDebounce from 'use-debounce/lib/useDebounce';\r\nimport ListItem from './ListItem';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport SearchBox from './SearchBox';\r\nimport Icon from 'components/Icon';\r\nimport './index.scss';\r\n\r\ntype Props = {\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    onClick(): void;\r\n}\r\n\r\ntype State = {\r\n    isLoading: boolean;\r\n    items: GeoObject[];\r\n}\r\n\r\nconst SearchGeoObjectsDialog: FunctionComponent<Props> = ({\r\n    isShowing,\r\n    onHide,\r\n    onClick,\r\n}) => {\r\n    const [{\r\n        isLoading,\r\n        items\r\n    }, setResults] = useState<State>({\r\n        isLoading: true,\r\n        items: [],\r\n    });\r\n    const [_value, setValue] = useState(\"\");\r\n    const [value] = useDebounce(_value, 1000);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    const onClear = useCallback(() => {\r\n        setValue(\"\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setResults({\r\n            isLoading: true,\r\n            items: [],\r\n        });\r\n    }, [_value]);\r\n\r\n    useEffect(() => {\r\n\r\n        if(isShowing) {\r\n            (async () => {\r\n                const result = await searchGeoObjects({\r\n                    pageSize: 10,\r\n                    phrase: value,\r\n                });\r\n    \r\n                setResults({\r\n                    isLoading: false,\r\n                    items: result,\r\n                });\r\n            })()\r\n        }\r\n        else {\r\n            setResults({\r\n                isLoading: true,\r\n                items: [],\r\n            });\r\n            setValue(\"\");\r\n        }\r\n\r\n    }, [isShowing, value]);\r\n\r\n    return <animated.div style={{\r\n            ...styles,\r\n            display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n        }} className={`searchDialog ${isShowing ? \"\" : \"\"}`}>\r\n        <div className=\"searchDialog__navbar\">\r\n            <Icon onClick={onHide} className=\"searchDialog__close\" icon={faTimes}/>\r\n        </div>\r\n        <div className=\"searchDialog__body\">\r\n            <div className=\"searchDialog__top\">\r\n                <SearchBox\r\n                    onChange={setValue}\r\n                    onClear={onClear}\r\n                    value={_value}\r\n                />\r\n            </div>\r\n            <div className={`searchDialog__list ${isLoading ? \"searchDialog__list--center\": \"\"}`}>\r\n                {isLoading ? <GridLoader color=\"white\" size={15} /> : \r\n                    items.map(pr => pr.type === \"country\" && <ListItem onClick={onClick} key={pr.id} {...pr} />)}\r\n            </div>\r\n        </div>\r\n    </animated.div>\r\n}\r\n\r\nexport default SearchGeoObjectsDialog;\r\n\r\n","import { circleToPolygon, newId }  from 'appUtils';\r\nimport { FunctionComponent, useEffect, useState } from 'react';\r\nimport { GeoJSON, Circle, useMapEvents } from 'react-leaflet';\r\nimport { DrawOption, GeoObject } from './types';\r\n\r\ntype State = {\r\n    type: \"LineString\" | \"Polygon\";\r\n    coordinates: number[][] | number[][][];\r\n}\r\n\r\ntype Props = {\r\n    onChange(data: GeoObject): void;\r\n    geoObjects: GeoObject[];\r\n    drawOption: DrawOption;\r\n}\r\n\r\nconst emptyPolygon = {\r\n    type: \"Polygon\" as const,\r\n    coordinates: [[]]\r\n};\r\n\r\nconst DrawHandler: FunctionComponent<Props> = ({\r\n    drawOption,\r\n    geoObjects,\r\n    onChange\r\n}) => {\r\n    const [isDragging, setDragging] = useState(false);\r\n    const [center, setCenter] = useState({\r\n        lat: 50,\r\n        lng: -1,\r\n    });\r\n    const [created, setCreated] = useState(false);\r\n    const [completed, setCompleted] = useState(false);\r\n    const [radius, setRadius] = useState(10);\r\n    const [data, setData] = useState<State>(emptyPolygon);\r\n    const map = useMapEvents({\r\n        click: (event) => {\r\n            if(!created && drawOption === \"circle\") {\r\n                map.dragging.disable();\r\n                setCreated(true);\r\n                setCenter(event.latlng);\r\n                setRadius(100);\r\n            }\r\n            if(!completed && created && drawOption === \"circle\") {\r\n                map.dragging.enable();\r\n                setCompleted(true);\r\n            }\r\n            if(drawOption === \"polygon\") {\r\n                const { lat, lng } = event.latlng;\r\n                const item = [lng, lat];\r\n                setData(state => {\r\n                    const coordinates = [...state.coordinates[0] as number[][], item];\r\n                    \r\n                    return {\r\n                        ...state,\r\n                        coordinates: [coordinates],\r\n                    };\r\n                });\r\n            }\r\n            if(drawOption === \"lineString\") {\r\n                const { lat, lng } = event.latlng;\r\n                const item = [lng, lat];\r\n                setData(state => {\r\n                    const coordinates = [...state.coordinates as number[][], item];\r\n                   \r\n                    return {\r\n                        ...state,\r\n                        coordinates,\r\n                    };\r\n                });\r\n            }\r\n        },\r\n        mouseup: (event) => {\r\n            \r\n        },\r\n        mousemove(event) {\r\n            if(created && !completed && drawOption === \"circle\") {\r\n                const radius = event.latlng.distanceTo(center);\r\n                setRadius(radius);\r\n            }\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(completed && drawOption === \"lineString\") {\r\n            \r\n            onChange({\r\n                id: newId(),\r\n                selected: false,\r\n                data,\r\n            });\r\n            setData(emptyPolygon);\r\n            setCompleted(false);\r\n        }\r\n\r\n        if(completed && drawOption === \"polygon\") {\r\n            \r\n            onChange({\r\n                id: newId(),\r\n                selected: false,\r\n                data,\r\n            });\r\n            setData(emptyPolygon);\r\n            setCompleted(false);\r\n        }\r\n\r\n        if(completed && drawOption === \"circle\") {\r\n            const data = circleToPolygon([center.lng, center.lat], radius);\r\n            \r\n            setCreated(false);\r\n            setCompleted(false);\r\n            onChange({\r\n                id: newId(),\r\n                selected: false,\r\n                data,\r\n            });\r\n        }\r\n    }, [data, onChange, radius, center, drawOption, completed]);\r\n\r\n    useEffect(() => {\r\n\r\n        if(drawOption === \"none\") {\r\n            return;\r\n        }\r\n       \r\n        if((drawOption === \"polygon\" && data.type === \"Polygon\")\r\n        || (drawOption === \"circle\" && data.type === \"Polygon\")\r\n        || (drawOption === \"lineString\" && data.type === \"LineString\")) {\r\n            return;\r\n        }\r\n\r\n        setData(state => {\r\n            let type: \"LineString\" | \"Polygon\" = \"LineString\";\r\n            let coordinates: number[][] | number[][][] = [];\r\n\r\n            if(drawOption === \"lineString\") {\r\n                type = \"LineString\";\r\n                coordinates = [];\r\n            }\r\n\r\n            if(drawOption === \"circle\") {\r\n                type = \"Polygon\";\r\n                coordinates = [[]];\r\n            }\r\n\r\n            if(drawOption === \"polygon\") {\r\n                type = \"Polygon\";\r\n                coordinates = [[]];\r\n            }\r\n\r\n            return {\r\n                type,\r\n                coordinates,\r\n            }\r\n        });\r\n    }, [data, drawOption]);\r\n\r\n    const onEnter = (event: KeyboardEvent) => {\r\n        if(event.key === \"Enter\") {\r\n            setCompleted(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", onEnter);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", onEnter);\r\n        }\r\n    }, []);\r\n\r\n    return <>\r\n        {!completed && drawOption === \"circle\" ? <div className=\"draw-page__popup\">To draw a circle, click on the map, move mouse to set radius and click to finish</div> : null}\r\n        {!completed && drawOption === \"lineString\" ? <div className=\"draw-page__popup\">To draw a line string, click on the map and press enter to finish</div> : null}\r\n        {!completed && drawOption === \"polygon\" ? <div className=\"draw-page__popup\">To draw a polygon, click on the map and press enter to finish</div> : null}\r\n        {geoObjects.map(pr => <GeoJSON key={pr.id} data={pr.data} style={{\r\n            color: pr.selected ? \"blue\" : \"gray\",\r\n        }}/>)}\r\n        <GeoJSON key={Math.random()} data={data}/>\r\n        {created ? <Circle eventHandlers={{\r\n            mousemove: (event) => {\r\n                if(isDragging) {\r\n                    setCenter(event.latlng);\r\n                }\r\n            },\r\n            mousedown: (event) => {\r\n                setDragging(true);\r\n                map.dragging.disable();\r\n            },\r\n            mouseup: (event) => {\r\n                setDragging(false);\r\n                map.dragging.enable();\r\n            }\r\n        }} center={center} radius={radius} /> : null}\r\n    </>\r\n}\r\n\r\nexport default DrawHandler;","import { FunctionComponent, useEffect, useRef } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport stringify from \"json-stringify-pretty-compact\"\r\nimport Highlight from 'react-highlight';\r\nimport Icon from 'components/Icon';\r\nimport { ExportType } from './types';\r\nimport { faClipboard, faDownload, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './previewDialog.scss';\r\n\r\ntype Props = {\r\n    id?: string;\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    onExport(id: string): void;\r\n    data?: any;\r\n    exportType: ExportType;\r\n}\r\n\r\nconst PreviewDialog: FunctionComponent<Props> = ({\r\n    id,\r\n    isShowing,\r\n    onHide,\r\n    onExport,\r\n    data,\r\n    exportType,\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    const text = exportType === \"geojson\" ? stringify(data) : data;\r\n\r\n    const _onExport = () => onExport(id!);\r\n\r\n    const onCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(!parent.contains(element)) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, onHide, isShowing])\r\n\r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"preview-dialog__overlay\">\r\n        <div className=\"preview-dialog\">\r\n            <div className=\"preview-dialog__topBar\">\r\n                <div className=\"preview-dialog__right\">\r\n                    <Icon onClick={onCopy} className=\"\" icon={faClipboard}/>\r\n                    <Icon onClick={_onExport} className=\"\" icon={faDownload}/>\r\n                </div>\r\n                <Icon onClick={onHide} className=\"preview-dialog__close\" icon={faTimes}/>\r\n            </div>\r\n            <div className=\"preview-dialog__body\">\r\n                {data ? <Highlight className={exportType === \"geojson\" ? \"json\" : \"none\"}>\r\n                    {text}\r\n                </Highlight> : null}\r\n            </div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default PreviewDialog;\r\n","import { FunctionComponent, memo, ChangeEvent } from 'react';\r\nimport './checkbox.scss';\r\n\r\ntype Props = {\r\n    checked: boolean;\r\n    onChange?(event: ChangeEvent): void;\r\n    label?: string;\r\n}\r\n\r\nconst Checkbox: FunctionComponent<Props> = ({\r\n    checked,\r\n    onChange,\r\n    label,\r\n    ...rest\r\n}) => {\r\n \r\n    return <div className=\"checkbox\">\r\n        <label className={`checkbox__label ${checked ? \"checkbox__label--selected\": \"\"}`}>\r\n            <input {...rest}\r\n                className=\"checkbox__input\"\r\n                type=\"checkbox\"\r\n                onChange={onChange} checked={checked} />{label}\r\n        </label>\r\n    </div>\r\n}\r\n\r\nexport default memo(Checkbox);","import React, { FunctionComponent, memo, MouseEvent, ChangeEvent } from 'react';\r\nimport { faCircle, faClipboard, faDownload, faDrawPolygon, faEye, faPencilAlt, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { DrawOption, ExportType, GeoObject } from './types';\r\nimport Icon from 'components/Icon';\r\nimport PreviewDialog from './PreviewDialog';\r\nimport './panel.scss';\r\nimport Checkbox from './Checkbox';\r\n\r\nexport type PanelChangeOptions = {\r\n    drawOption: DrawOption;\r\n    exportType: ExportType;\r\n}\r\n\r\ntype Props = {\r\n    drawOption: DrawOption;\r\n    exportType: ExportType;\r\n    data?: GeoObject;\r\n    geoObjects: GeoObject[];\r\n    dataAvailable: boolean;\r\n    onChange(options: PanelChangeOptions): void;\r\n    onExport(): void;\r\n    onPreview(): void;\r\n    onHide(): void;\r\n    onRemoveShapes(): void;\r\n    onItemClick(id: string): void;\r\n    onAllItemsSelect(): void;\r\n    selectedCount: number;\r\n    isPreviewShowing: boolean;\r\n}\r\n\r\nconst Panel: FunctionComponent<Props> = ({\r\n    drawOption,\r\n    exportType,\r\n    data,\r\n    geoObjects,\r\n    onChange,\r\n    onExport,\r\n    onPreview,\r\n    onHide,\r\n    onRemoveShapes,\r\n    onItemClick,\r\n    onAllItemsSelect,\r\n    selectedCount,\r\n    isPreviewShowing,\r\n    dataAvailable,\r\n}) => {\r\n    const dataNotAvailable = !dataAvailable;\r\n\r\n    const onDrawOptionChange = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        onChange({\r\n            drawOption: id as typeof drawOption,\r\n            exportType\r\n        })\r\n    }\r\n\r\n    const onCopy = () => {\r\n        navigator.clipboard.writeText(JSON.stringify(data));\r\n    }\r\n\r\n    const onExportTypeChange = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        onChange({\r\n            drawOption,\r\n            exportType: id as typeof exportType,\r\n        })\r\n    }\r\n\r\n    const _onItemClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        onItemClick(id!);\r\n    }\r\n\r\n    const onItemSelect = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        onItemClick(id!);\r\n    }\r\n\r\n    return <div className=\"draw-page__panel\">\r\n        <div className=\"draw-page__topBar\">\r\n            Remove shapes <Icon disabled={dataNotAvailable} onClick={onRemoveShapes} className={``} icon={faTrash}/>\r\n        </div>\r\n        <div className=\"draw-page__toolbox\">\r\n            <Icon data-id=\"polygon\" onClick={onDrawOptionChange} className={`draw-page__tool ${drawOption === \"polygon\" ? \"selected\" : \"\"}`} icon={faDrawPolygon}/>\r\n            <Icon data-id=\"lineString\" onClick={onDrawOptionChange} className={`draw-page__tool ${drawOption === \"lineString\" ? \"selected\" : \"\"}`} icon={faPencilAlt}/>\r\n            <Icon data-id=\"circle\" onClick={onDrawOptionChange} className={`draw-page__tool ${drawOption === \"circle\" ? \"selected\" : \"\"}`} icon={faCircle}/>\r\n        </div>\r\n        <div className=\"items-section\">\r\n            <div className=\"items-section__header\">\r\n                <div>\r\n                    <Checkbox onChange={onAllItemsSelect} checked={geoObjects.length && selectedCount === geoObjects.length ? true : false}/>\r\n                </div>\r\n                <div className=\"items-section__title\">Items</div>\r\n            </div>\r\n            {geoObjects.map(pr => <div className=\"items-section__item\"\r\n                data-id={pr.id}\r\n                key={pr.id}\r\n                onClick={_onItemClick}>\r\n                <div>\r\n                    <Checkbox data-id={pr.id} onChange={onItemSelect} checked={pr.selected}/>\r\n                </div>\r\n                <div>{pr.id}</div>\r\n            </div>)}\r\n        </div>\r\n        <div className=\"export-section\">\r\n            <div className=\"export-section__title\">Export</div>\r\n            <div className=\"export\">\r\n                <div data-id=\"geojson\" onClick={onExportTypeChange} className={`export__option ${exportType === \"geojson\" ? \"export__option--selected\" : \"\"}`}>Geojson</div>\r\n                <div data-id=\"wkt\" onClick={onExportTypeChange} className={`export__option ${exportType === \"wkt\" ? \"export__option--selected\" : \"\"}`}>WKT</div>\r\n                {/* <div data-id=\"wkb\" onClick={onExportTypeChange} className={`export__option ${exportType === \"wkb\" ? \"selected\" : \"\"}`}>WKB</div> */}\r\n            </div>\r\n            <PreviewDialog\r\n                id={data?.id}\r\n                data={data}\r\n                onExport={onExport}\r\n                onHide={onHide}\r\n                isShowing={isPreviewShowing}\r\n                exportType={exportType}\r\n            />\r\n            <div className=\"payload\">\r\n                <Icon disabled={dataNotAvailable} onClick={onPreview} className=\"payload__option\" icon={faEye}/>\r\n                <Icon disabled={dataNotAvailable} onClick={onCopy} className=\"payload__option\" icon={faClipboard}/>\r\n                <Icon disabled={dataNotAvailable} onClick={onExport} className=\"payload__option\" icon={faDownload}/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default memo(Panel);","import { FunctionComponent, useState } from 'react';\r\nimport { MapContainer, TileLayer } from 'react-leaflet';\r\nimport MapHandler from './MapHandler';\r\nimport Panel, { PanelChangeOptions } from './Panel';\r\nimport { DrawOption, ExportType, GeoObject } from './types';\r\nimport { Geometry } from \"geojson\";\r\nimport { stringify } from 'wkt';\r\nimport { download, toBase64DataUri } from 'appUtils';\r\nimport './index.scss';\r\n\r\ntype State = {\r\n    geoObjects: GeoObject[];\r\n    selectedCount: number;\r\n}\r\n\r\nconst DrawPage: FunctionComponent = () => {\r\n    const [{\r\n        geoObjects,\r\n        selectedCount\r\n    }, setGeoObjects] = useState<State>({\r\n        geoObjects: [],\r\n        selectedCount: 0,\r\n    });\r\n    const [isPreviewShowing, setPreviewShow] = useState(false);\r\n    const [drawOption, setDrawOption] = useState<DrawOption>(\"none\");\r\n    const [exportType, setExportType] = useState<ExportType>(\"geojson\");\r\n    const [data, setData] = useState<any>();\r\n\r\n    const onPanelChange = (options: PanelChangeOptions) => {\r\n        setDrawOption(options.drawOption);\r\n        setExportType(options.exportType);\r\n        setData(\"\");\r\n    }\r\n\r\n    const onDrawChange = (data: GeoObject) => {\r\n        setGeoObjects(state => ({\r\n            ...state,\r\n            geoObjects: [...state.geoObjects, data],\r\n        }));\r\n        setDrawOption(\"none\");\r\n    }\r\n\r\n    const onRemoveShapes = () => setGeoObjects({\r\n        geoObjects: [],\r\n        selectedCount: 0,\r\n    });\r\n\r\n    const onHide = () => setPreviewShow(false);\r\n\r\n    const onPreview = () => {\r\n\r\n        let geometry: Geometry;\r\n\r\n        if(geoObjects.length === 1) {\r\n            geometry = geoObjects[0].data as any;\r\n        }\r\n        else {\r\n            geometry = {\r\n                type: \"GeometryCollection\",\r\n                geometries: [...geoObjects.map<Geometry>(pr => pr.data as any)]\r\n            }\r\n        }\r\n\r\n        if(exportType === \"wkt\") {\r\n            let wkt = stringify(geometry);\r\n            wkt = wkt.replace(/,/g, \",\\n\")\r\n            setData(wkt);\r\n            setPreviewShow(true);\r\n\r\n            return;\r\n        }\r\n\r\n        setData(geometry);\r\n        setPreviewShow(true);\r\n    }\r\n\r\n    const onExport = () => {\r\n        const text = toBase64DataUri(JSON.stringify(data));\r\n        const fileName = exportType === \"geojson\" ?  \"data.geojson\" : \"wkt.txt\";\r\n\r\n        download(text, fileName);\r\n    }\r\n\r\n    const onAllItemsSelect = () => {\r\n        setGeoObjects(state => {\r\n            const selected = state.geoObjects.some(pr => pr.selected === false) ? true : false;\r\n            const geoObjects = [...state.geoObjects.map(pr => ({...pr, selected}))];\r\n            const selectedCount = selected ? geoObjects.length : 0;\r\n\r\n            return {\r\n                geoObjects,\r\n                selectedCount\r\n            };\r\n        })\r\n    }\r\n\r\n    const onItemClick = (id: string) => {\r\n        \r\n        setGeoObjects(state => {\r\n            const geoObjects = [...state.geoObjects.map(pr => ({...pr}))];\r\n            let item = geoObjects.find(pr => pr.id === id)!;\r\n            item.selected = !item.selected;\r\n            let selectedCount = state.selectedCount;\r\n            selectedCount = item.selected ? selectedCount + 1 : selectedCount - 1;\r\n            \r\n            return {\r\n                geoObjects,\r\n                selectedCount\r\n            };\r\n        })\r\n    }\r\n\r\n    return <div className=\"draw-page\">\r\n        <Panel\r\n            geoObjects={geoObjects}\r\n            drawOption={drawOption}\r\n            exportType={exportType}\r\n            onChange={onPanelChange}\r\n            onExport={onExport}\r\n            onPreview={onPreview}\r\n            onHide={onHide}\r\n            onRemoveShapes={onRemoveShapes}\r\n            onItemClick={onItemClick}\r\n            onAllItemsSelect={onAllItemsSelect}\r\n            data={data}\r\n            selectedCount={selectedCount}\r\n            dataAvailable={!!geoObjects.length}\r\n            isPreviewShowing={isPreviewShowing}\r\n        />\r\n        <MapContainer\r\n            zoom={4}\r\n            center={[51.505, -0.09]}\r\n            scrollWheelZoom={true}\r\n            className=\"draw-page__map\">\r\n            <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <MapHandler\r\n                onChange={onDrawChange}\r\n                geoObjects={geoObjects}\r\n                drawOption={drawOption}/>\r\n        </MapContainer>\r\n    </div>\r\n}\r\n\r\nexport default DrawPage;","import { FunctionComponent, MouseEvent } from 'react';\r\nimport { faCode, faCrosshairs, faDownload, faExclamationTriangle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport Icon from 'components/Icon';\r\nimport './importItem.scss';\r\n\r\ntype Props = {\r\n    id: string;\r\n    name: string;\r\n    loadedAt: string | Date;\r\n    isSelected: boolean;\r\n    featuresCount: number;\r\n    warning?: string;\r\n    invalid: boolean;\r\n    onToggle(event: MouseEvent<HTMLDivElement>): void;\r\n    onDelete(event: MouseEvent<HTMLDivElement>): void;\r\n    onExport(id: string): void;\r\n    onShowOnMap(id: string): void;\r\n    onShowGeojson(id: string): void;\r\n    onShowWarning(id: string): void;\r\n}\r\n\r\nconst ImportItem: FunctionComponent<Props> = ({\r\n    id,\r\n    isSelected,\r\n    loadedAt,\r\n    name,\r\n    featuresCount,\r\n    warning,\r\n    invalid,\r\n    onDelete,\r\n    onShowOnMap,\r\n    onShowGeojson,\r\n    onShowWarning,\r\n    onExport,\r\n    onToggle,\r\n}) => {\r\n\r\n    const _onExport = () => onExport(id);\r\n    const _onShowOnMap = () => onShowOnMap(id);\r\n    const _onShowGeojson = () => onShowGeojson(id);\r\n    const _onShowWarning = () => onShowWarning(id);\r\n    \r\n    return <div className={`uploaded-item ${isSelected ? \"selected\" : \"\"}`}>\r\n        <div className=\"uploaded-item__topBar\">\r\n            <div data-id={id} onClick={onToggle}>\r\n                <div className=\"uploaded-item__title\">{name}</div>\r\n                <div className=\"uploaded-item__detail\">Loaded at: {new Date(loadedAt).toLocaleString()}</div>\r\n            </div>\r\n            <Icon data-id={id} className=\"uploaded-item__delete\" onClick={onDelete} icon={faTimes}/>\r\n        </div>\r\n        {invalid ? <div className=\"uploaded-item__body\">\r\n            {warning ? <Icon className=\"popup__iconButton\" onClick={_onShowWarning} icon={faExclamationTriangle}/> : null}\r\n        </div> : <div className=\"uploaded-item__body\">\r\n            <Icon className=\"popup__iconButton\" onClick={_onShowOnMap} icon={faCrosshairs}/>\r\n            {featuresCount ? <div className=\"uploaded-item__detail\">Features: {featuresCount}</div> : null}\r\n            <Icon className=\"popup__iconButton\" onClick={_onExport} icon={faDownload}/>\r\n            <Icon className=\"popup__iconButton\" onClick={_onShowGeojson} icon={faCode}/>\r\n            {warning ? <Icon className=\"popup__iconButton\" onClick={_onShowWarning} icon={faExclamationTriangle}/> : null}\r\n        </div>}\r\n    </div>;\r\n}\r\n\r\nexport default ImportItem;\r\n","import { FunctionComponent, memo } from 'react';\r\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './dragOverlay.scss';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\ntype Props = {\r\n    isShowing: boolean;\r\n}\r\n\r\nconst DragOverlay: FunctionComponent<Props> = ({\r\n    isShowing,\r\n}) => {\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n    \r\n    return <animated.div style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }}className=\"explore-page__dropOverlay\">\r\n        <div className=\"explore-page__dropModal\">\r\n            <div><FontAwesomeIcon size=\"5x\" icon={faFileUpload}/></div>\r\n            <div className=\"explore-page__dropModalText\">Drop geojson/json array lat lng or lat lng</div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default memo(DragOverlay);\r\n","import { FunctionComponent, memo, useCallback, useMemo } from 'react';\r\nimport { GeoJSON } from 'react-leaflet';\r\nimport { GeoJsonObject, Feature } from 'geojson';\r\nimport { LeafletEventHandlerFnMap } from 'leaflet';\r\n\r\ntype Props = {\r\n    id: string;\r\n    isSelected: boolean;\r\n    eventHandlers: LeafletEventHandlerFnMap;\r\n    data: GeoJsonObject;\r\n}\r\n\r\nconst GeoJSONItem: FunctionComponent<Props> = ({\r\n    id,\r\n    data,\r\n    eventHandlers,\r\n\r\n    isSelected\r\n}) => {\r\n    const style = useMemo(() => {\r\n        return {\r\n            color: isSelected ? \"blue\" : \"gray\"\r\n        };\r\n    }, [isSelected])\r\n\r\n    const onEachFeature = useCallback((feature: Feature) => {\r\n        feature.id = id;\r\n    }, [id]);\r\n\r\n    return <GeoJSON\r\n        data={data}\r\n        data-id={id}\r\n        style={style}\r\n        eventHandlers={eventHandlers}\r\n        onEachFeature={onEachFeature} />\r\n}\r\n\r\nexport default memo(GeoJSONItem);\r\n","import { useEffect, FunctionComponent, MouseEvent, useRef } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport './menu.scss';\r\n\r\nexport type Actions = \"nearby-country\" | \"nearby-continent\";\r\n\r\ntype Props = {\r\n    x: number;\r\n    y: number;\r\n    isShowing: boolean;\r\n    onAction(action: Actions): void;\r\n    onHide(): void;\r\n}\r\n\r\nconst Menu: FunctionComponent<Props> = ({\r\n    x,\r\n    y,\r\n    isShowing,\r\n    onAction,\r\n    onHide\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n    \r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(!parent.contains(element)) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, onHide, isShowing])\r\n\r\n    const _onAction = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { action } = event.currentTarget.dataset;\r\n        onAction(action as Actions);\r\n    }\r\n    \r\n    const { height } = ref?.current?.getBoundingClientRect() || { height: 0 };\r\n    \r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        top: `${y - height / 2 }px`,\r\n        left: `${x}px`,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"menu__overlay\">\r\n        <div className=\"menu\">\r\n           <div className=\"menu__item\" onClick={_onAction} data-action=\"nearby-country\">Get nearby country</div>\r\n           <div className=\"menu__item\" onClick={_onAction} data-action=\"nearby-continent\">Get nearby continent</div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default Menu;\r\n","import { LatLngBoundsExpression, LatLngLiteral, LeafletEvent } from 'leaflet';\r\nimport { FunctionComponent, memo, useMemo, useState } from 'react';\r\nimport { GeoJsonObject, Feature } from 'geojson';\r\nimport GeoJSONItem from './GeoJSONItem';\r\nimport { useMapEvents } from 'react-leaflet';\r\nimport { useEffect } from 'react';\r\nimport Menu, { Actions } from './Menu';\r\n\r\ntype Props = {\r\n    onAction(action: Actions, latlng: LatLngLiteral): void;\r\n    geojsonObjects: any[];\r\n    center: [number, number];\r\n    bounds?: LatLngBoundsExpression;\r\n}\r\n\r\nconst MapHandler: FunctionComponent<Props> = ({\r\n    onAction,\r\n    geojsonObjects,\r\n    center,\r\n    bounds,\r\n}) => {\r\n    const [menu, setMenu] = useState({\r\n        x: 0,\r\n        y: 0,\r\n        latlng: {\r\n            lat: -1,\r\n            lng: -1,\r\n        },\r\n        isShowing: false,\r\n    });\r\n    const map = useMapEvents({\r\n        click: (event) => {\r\n            const propagatedFrom = event.propagatedFrom;\r\n\r\n            if(propagatedFrom && propagatedFrom.feature) {\r\n                const feature = event.propagatedFrom.feature as Feature;\r\n                const id = feature.id as string;\r\n            }\r\n\r\n        },\r\n        contextmenu(event) {\r\n            const originalEvent = event.originalEvent;\r\n            originalEvent.preventDefault();\r\n            const { clientX, clientY } = originalEvent;\r\n            const latlng = event.latlng;\r\n\r\n            setMenu({\r\n                x: clientX,\r\n                y: clientY,\r\n                latlng,\r\n                isShowing: true,\r\n            });\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        map.setView(center);\r\n    }, [map, center]);\r\n\r\n    useEffect(() => {\r\n        if(bounds) {\r\n            map.fitBounds(bounds);\r\n        }\r\n    }, [map, bounds]);\r\n    \r\n    const eventHandlers = useMemo(() => ({\r\n        click(event: LeafletEvent) {\r\n            const target = event.sourceTarget;\r\n\r\n            if(\"feature\" in target) {\r\n                const id = target.feature.id;\r\n\r\n                // setGeojsonObjects((state) => {\r\n                //     const newState = [...state];\r\n\r\n                //     if(!newState.some(pr => pr.id === id)) {\r\n                //         return state;\r\n                //     }\r\n\r\n                //     for (const item of newState) {\r\n                        \r\n                //         if(item.isSelected) {\r\n                //             item.isSelected = !item.isSelected;\r\n                //         }\r\n\r\n                //         if(item.id === id) {\r\n                //             item.isSelected = !item.isSelected;\r\n                //         }\r\n                //     }\r\n\r\n                //     return newState;\r\n                // });\r\n                \r\n            }\r\n        }\r\n    }), []);\r\n\r\n    const _onAction = (action: Actions) => {\r\n        onAction(action, menu.latlng);\r\n        onHide();\r\n    }\r\n\r\n    const onHide = () => setMenu(state => ({\r\n        ...state,\r\n        isShowing: false,\r\n    }));\r\n    \r\n    return <>\r\n        <Menu\r\n            {...menu}\r\n            onAction={_onAction}\r\n            onHide={onHide}/>\r\n       {geojsonObjects.filter(pr => !pr.invalid).map(pr => <GeoJSONItem\r\n            key={pr.id}\r\n            {...pr}\r\n            eventHandlers={eventHandlers}\r\n            data={pr.data as GeoJsonObject} />)}\r\n    </>;\r\n}\r\n\r\nexport default memo(MapHandler);\r\n","import { FunctionComponent, memo, useEffect, useRef } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport Highlight from 'react-highlight';\r\nimport Icon from 'components/Icon';\r\nimport { faClipboard, faDownload, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport stringify from 'json-stringify-pretty-compact';\r\nimport './previewDialog.scss';\r\n\r\ntype Props = {\r\n    id: string;\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    onExport(id: string): void;\r\n    data?: any;\r\n}\r\n\r\nconst PreviewDialog: FunctionComponent<Props> = ({\r\n    id,\r\n    isShowing,\r\n    onHide,\r\n    onExport,\r\n    data,\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    const _onExport = () => onExport(id);\r\n\r\n    const onCopy = () => {\r\n        //navigator.clipboard.writeText(text);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(!parent.contains(element)) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, onHide, isShowing])\r\n\r\n    const text = isShowing ? stringify(data) : \"\";\r\n\r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"preview-dialog__overlay\">\r\n        <div className=\"preview-dialog\">\r\n            <div className=\"preview-dialog__topBar\">\r\n                <div className=\"preview-dialog__right\">\r\n                    <Icon onClick={onCopy} className=\"\" icon={faClipboard}/>\r\n                    <Icon onClick={_onExport} className=\"\" icon={faDownload}/>\r\n                </div>\r\n                <Icon onClick={onHide} className=\"preview-dialog__close\" icon={faTimes}/>\r\n            </div>\r\n            <div className=\"preview-dialog__body\">\r\n                {text ? <Highlight className=\"json\">\r\n                    {text}\r\n                </Highlight> : null}\r\n            </div>\r\n        </div>\r\n    </animated.div>;\r\n}\r\n\r\nexport default memo(PreviewDialog);\r\n","import { FunctionComponent, useEffect, memo, useRef } from 'react';\r\nimport { faExclamationTriangle, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport Icon from 'components/Icon';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport './warningDialog.scss';\r\n\r\ntype Props = {\r\n    isShowing: boolean;\r\n    onHide(): void;\r\n    warning?: string;\r\n}\r\n\r\nconst WarningDialog: FunctionComponent<Props> = ({\r\n    isShowing,\r\n    onHide,\r\n    warning,\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const styles = useSpring({\r\n        opacity: isShowing ? 1 : 0,\r\n    })\r\n\r\n    useEffect(() => {\r\n        const parent = ref.current;\r\n\r\n        if(!parent) {\r\n            return;\r\n        }\r\n\r\n        const onOutsideClick = (event: Event) => {\r\n            const element = event.target as HTMLElement;\r\n            \r\n            if(parent === element) {\r\n                onHide();\r\n            }\r\n        }\r\n\r\n        if(isShowing) {\r\n            window.addEventListener(\"click\", onOutsideClick);\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener(\"click\", onOutsideClick);\r\n        }\r\n    }, [ref, onHide, isShowing])\r\n\r\n    return <animated.div ref={ref} style={{\r\n        ...styles,\r\n        display: styles.opacity.to(pr => pr === 0 ? \"none\" : \"flex\")\r\n    }} className=\"warning-dialog__overlay\">\r\n        <div className=\"warning-dialog\">\r\n            <Icon onClick={onHide} className=\"warning-dialog__closeIcon\" icon={faTimes} />\r\n            <div className=\"warning-dialog__body\">\r\n                <Icon className=\"warning-dialog__warningIcon\" icon={faExclamationTriangle} />\r\n                <div className=\"warning-dialog__text\">\r\n                    {warning}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </animated.div>\r\n}\r\n\r\nexport default memo(WarningDialog);\r\n","import { FunctionComponent, MouseEvent, useCallback } from 'react';\r\nimport { MapContainer, TileLayer } from 'react-leaflet';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { useState } from 'react';\r\nimport { GeoJsonObject } from 'geojson';\r\nimport { useEffect } from 'react';\r\nimport { download, extractGeoObjectFromText, getGeojsonFriendlyName, getTextFromBlob, newId, openFileDialog, toBase64DataUri, trySaveToLocalStorage } from 'appUtils';\r\nimport { BarLoader } from 'react-spinners';\r\nimport { geoJSON, LatLngBoundsExpression, LatLngLiteral } from 'leaflet';\r\nimport ImportItem from './ImportItem';\r\nimport DragOverlay from './DragOverlay';\r\nimport MapHandler from './MapHandler';\r\nimport PreviewDialog from './PreviewDialog';\r\nimport WarningDialog from './WarningDialog';\r\nimport { Actions } from './Menu';\r\nimport { getContinentFromLatLng, getContinentGeojson, getCountryFromLatLng, getCountryGeojsonByIso3166a3 } from 'api';\r\nimport moment from 'moment';\r\nimport { faClipboard, faList, faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport Icon from 'components/Icon';\r\nimport Breadcrumbs from 'components/Breadcrumbs';\r\nimport './index.scss';\r\n\r\ntype GeoObject = {\r\n    id: string;\r\n    name: string;\r\n    fileName?: string;\r\n    loadedAt: Date;\r\n    isSelected: boolean;\r\n    featuresCount: number;\r\n    area: number;\r\n    points: number;\r\n    warning?: string;\r\n} & ({\r\n    data: GeoJsonObject;\r\n    invalid: false;\r\n} | {\r\n    data: unknown;\r\n    invalid: true;\r\n})\r\n\r\ntype PageMode = \"show-preview\" | \"show-warning\" | undefined;\r\n\r\nconst ExplorePage: FunctionComponent = () => {\r\n    const [geojsonObjects, setGeojsonObjects] = useState<GeoObject[]>([]);\r\n    const [isUploading, setUploading] = useState(true);\r\n    const [{\r\n        id,\r\n        warning,\r\n        data,\r\n    }, setData] = useState<{\r\n        id: string;\r\n        warning: string | undefined;\r\n        data: GeoJsonObject;\r\n    }>({\r\n        id: \"\",\r\n        warning: \"\",\r\n        data: {\r\n            type: \"Point\"\r\n        },\r\n    });\r\n    const [toggled, setToggled] = useState(false);\r\n    const [clipboardData, setCliboardData] = useState(\"\");\r\n    const [bounds, setBounds] = useState<LatLngBoundsExpression>();\r\n    const [pageMode, setPageMode] = useState<PageMode>();\r\n    const [center, setCenter] = useState<[number, number]>([51.505, -0.09]);\r\n\r\n    const onDrop = useCallback((acceptedFiles: File[]) => {\r\n        if(!acceptedFiles.length) {\r\n            return;\r\n        }\r\n  \r\n        setUploading(true);\r\n        \r\n\r\n        (async () => {\r\n            let newState = new Array<GeoObject>();\r\n\r\n            for(const file of acceptedFiles) {\r\n\r\n                const text = await getTextFromBlob(file);\r\n                const data = extractGeoObjectFromText(text);\r\n                let featuresCount = 0;\r\n\r\n                const geoObject = {\r\n                    id: newId(),\r\n                    name: file.name,\r\n                    fileName: file.name,\r\n                    loadedAt: new Date(),\r\n                    isSelected: false,\r\n                    featuresCount,\r\n                    data,\r\n                    invalid: !data,\r\n                } as GeoObject;\r\n\r\n                newState.push(geoObject);\r\n\r\n                if(!trySaveToLocalStorage(newState)) {\r\n                    geoObject.warning = \"We could not save geo-object to local storage. The file size is too big.\";\r\n                }\r\n            }\r\n\r\n            newState = newState.concat(geojsonObjects);\r\n            setGeojsonObjects(newState)\r\n            \r\n            setUploading(false);\r\n        })();\r\n\r\n      }, [geojsonObjects])\r\n    const {getRootProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    useEffect(() => {\r\n\r\n        const savedObjects = localStorage.getItem(\"saved\");\r\n\r\n        if(savedObjects) {\r\n            new Promise(() => {\r\n                const data = JSON.parse(savedObjects);\r\n                setGeojsonObjects(data);\r\n                setUploading(false);\r\n            });\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const checkClipboard = async () => {\r\n\r\n            try {\r\n                const text = await navigator.clipboard.readText();\r\n                setCliboardData(text);\r\n            } catch (error) {\r\n                //NotificationManager.error(\"We could not read content from the clipboard\", \"Clipboard read error.\");\r\n            }\r\n            setTimeout(checkClipboard, 2000);\r\n        }\r\n\r\n        setTimeout(checkClipboard, 2000);\r\n    }, []);\r\n\r\n    const onPaste = (_event: Event) => {\r\n        const event = _event as ClipboardEvent;\r\n        const text = event.clipboardData?.getData(\"text\");\r\n\r\n        if(!text) {\r\n            return;\r\n        }\r\n\r\n        const data = extractGeoObjectFromText(text);\r\n\r\n        if(!data) {\r\n            return;\r\n        }\r\n\r\n        let featuresCount = 0;\r\n\r\n        const name = getGeojsonFriendlyName(data);\r\n\r\n        const geojsonObject = {\r\n            id: newId(),\r\n            name,\r\n            loadedAt: new Date(),\r\n            isSelected: false,\r\n            featuresCount: 0,\r\n            data,\r\n            invalid: !data,\r\n        }  as GeoObject;\r\n\r\n        setGeojsonObjects(state => [...state, geojsonObject]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"paste\", onPaste);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"paste\", onPaste);\r\n        }\r\n    }, []);\r\n\r\n    const onToggle = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n\r\n        setGeojsonObjects((state) => {\r\n            const newState = [...state];\r\n\r\n            if(!newState.some(pr => pr.id === id)) {\r\n                return state;\r\n            }\r\n\r\n            for (const item of newState) {\r\n                \r\n                if(item.isSelected) {\r\n                    item.isSelected = !item.isSelected;\r\n                }\r\n\r\n                if(item.id === id) {\r\n                    item.isSelected = !item.isSelected;\r\n                }\r\n            }\r\n\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    const onDelete = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n\r\n        setGeojsonObjects((state) => {\r\n            const newState = state.filter(pr => pr.id !== id && !pr.warning);\r\n            localStorage.setItem(\"saved\", JSON.stringify(newState));\r\n\r\n            return newState;\r\n        });\r\n        \r\n    }\r\n\r\n    const onShowOnMap = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n\r\n        if(geojsonObject.invalid) {\r\n            return;\r\n        }\r\n        \r\n        const bounds = geoJSON(geojsonObject.data).getBounds();\r\n        setBounds(bounds);\r\n    }\r\n\r\n    const onShowWarning = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n\r\n        setPageMode(\"show-warning\");\r\n        setData(state => ({\r\n            ...state,\r\n            warning: geojsonObject.warning,\r\n        }));\r\n    }\r\n\r\n    const onHide = useCallback(() => setPageMode(undefined), []);\r\n\r\n    const onShowGeojson = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n\r\n        if(geojsonObject.invalid) {\r\n            return;\r\n        }\r\n\r\n        setPageMode(\"show-preview\");\r\n        setData(state => ({\r\n            ...state,\r\n            id: geojsonObject.id,\r\n            data: geojsonObject.data,\r\n        }));\r\n    }\r\n\r\n    const onExport = (id: string) => {\r\n        const geojsonObject = geojsonObjects.find(pr => pr.id === id)!;\r\n        const text = toBase64DataUri(JSON.stringify(geojsonObject?.data));\r\n        const fileName = geojsonObject.fileName ? geojsonObject.fileName : `${geojsonObject.name}.geojson`;\r\n\r\n        download(text, fileName);\r\n    }\r\n\r\n    const onAction = useCallback((action: Actions, latlng: LatLngLiteral) => {\r\n        const { lat, lng } = latlng;\r\n        setUploading(true);\r\n\r\n        if(action == \"nearby-continent\") {\r\n            (async () => {\r\n\r\n                try {\r\n\r\n                    const continent = await getContinentFromLatLng(lng, lat);\r\n\r\n                    if(!continent) {\r\n                        setUploading(false);\r\n                        return;\r\n                    }\r\n\r\n                    const geojson = await getContinentGeojson(continent);\r\n\r\n                    if(!geojson) {\r\n                        setUploading(false);\r\n                        return;\r\n                    }\r\n\r\n                    const suffix = moment().format(\"_YYYYMMDDHHmmss\");\r\n\r\n                    setGeojsonObjects(state => {\r\n                        const newState = [...state, {\r\n                            id: newId(),\r\n                            data: geojson,\r\n                            name: `${continent}${suffix}`,\r\n                            area: 0,\r\n                            featuresCount: 0,\r\n                            invalid: false,\r\n                            isSelected: false,\r\n                            loadedAt: new Date(),\r\n                            points: 0,\r\n                        }];\r\n    \r\n                        return newState;\r\n                    });\r\n\r\n                    setUploading(true);\r\n                }\r\n                catch(error) {\r\n                    setUploading(true);\r\n                }\r\n            })();\r\n        }\r\n\r\n        if(action === \"nearby-country\") {\r\n\r\n            (async () => {\r\n                try {\r\n                    const iso3166a3 = await getCountryFromLatLng(lng, lat);\r\n\r\n                    if(!iso3166a3) {\r\n                        setUploading(false);\r\n                        return;\r\n                    }\r\n    \r\n                    const geojson = await getCountryGeojsonByIso3166a3(iso3166a3);\r\n                    const suffix = moment().format(\"_YYYYMMDDHHmmss\");\r\n                    \r\n                    if(!geojson) {\r\n                        setUploading(false);\r\n                        return;\r\n                    }\r\n\r\n                    setGeojsonObjects(state => {\r\n                        const newState = [...state, {\r\n                            id: newId(),\r\n                            data: geojson,\r\n                            name: `${iso3166a3}${suffix}`,\r\n                            area: 0,\r\n                            featuresCount: 0,\r\n                            invalid: false,\r\n                            isSelected: false,\r\n                            loadedAt: new Date(),\r\n                            points: 0,\r\n                        }];\r\n                        localStorage.setItem(\"saved\", JSON.stringify(newState));\r\n    \r\n                        return newState;\r\n                    });\r\n                            \r\n                    setTimeout(() => {\r\n                        setUploading(false);\r\n                    }, 1000);\r\n                } catch (error) {\r\n                    setUploading(false);\r\n                }\r\n\r\n            })();\r\n            \r\n        }\r\n\r\n        onHide();\r\n    }, [onHide]);\r\n\r\n    const onUpload = async () => {\r\n        setUploading(true);\r\n        setToggled(true);\r\n        const file = await openFileDialog();\r\n        \r\n        if(!file) {\r\n            setUploading(false);\r\n            return;\r\n        }\r\n\r\n        const text = await getTextFromBlob(file);\r\n        const data = extractGeoObjectFromText(text);\r\n\r\n        if(!data) {\r\n            setUploading(false);\r\n            return;\r\n        }\r\n\r\n        const name = getGeojsonFriendlyName(data);\r\n        \r\n        const geojsonObject: GeoObject = {\r\n            id: newId(),\r\n            name,\r\n            data,\r\n            invalid: !data,\r\n            area: 0,\r\n            featuresCount: 0,\r\n            isSelected: false,\r\n            loadedAt: new Date(),\r\n            points: 0,\r\n        }\r\n        const newState = [...geojsonObjects, geojsonObject];\r\n\r\n        if(!trySaveToLocalStorage(newState)) {\r\n            geojsonObject.warning = \"We could not save geo-object to local storage. The file size is too big.\";\r\n        }\r\n\r\n        setGeojsonObjects(newState);\r\n        setUploading(false);\r\n    }\r\n\r\n    const onClipboard = () => {\r\n        setToggled(true);\r\n        setUploading(true);\r\n\r\n        const data = extractGeoObjectFromText(clipboardData);\r\n        let name = \"clipboard\";\r\n\r\n        if(data) {\r\n            name += `_${getGeojsonFriendlyName(data)}`;\r\n        }\r\n\r\n        const suffix = moment().format(\"_YYYYMMDDHHmmss\");\r\n        name += suffix;\r\n\r\n        const geojsonObject = {\r\n            id: newId(),\r\n            name,\r\n            loadedAt: new Date(),\r\n            isSelected: false,\r\n            featuresCount: 0,\r\n            data,\r\n            invalid: !data,\r\n        }  as GeoObject;\r\n\r\n        const newState = [...geojsonObjects, geojsonObject];\r\n\r\n        if(!trySaveToLocalStorage(newState)) {\r\n            geojsonObject.warning = \"We could not save geo-object to local storage. The file size is too big.\";\r\n        }\r\n\r\n        setGeojsonObjects(newState);\r\n        setUploading(false);\r\n    }\r\n\r\n    const onTogglePanel = () => setToggled(state => !state);\r\n\r\n    return <div className=\"explore-page\" {...getRootProps()}>\r\n        <DragOverlay isShowing={isDragActive}/>\r\n        <PreviewDialog\r\n            id={id}\r\n            onHide={onHide}\r\n            onExport={onExport}\r\n            isShowing={pageMode === \"show-preview\"}\r\n            data={data}\r\n            />\r\n        <WarningDialog\r\n            isShowing={pageMode === \"show-warning\"}\r\n            warning={warning}\r\n            onHide={onHide}\r\n        />\r\n        <div className=\"explore-page__navbar\">\r\n            <Breadcrumbs/>\r\n            <Icon className=\"navbar__upload\" onClick={onUpload} icon={faUpload}/>\r\n            <Icon disabled={!clipboardData} className=\"navbar__clipboard\" onClick={onClipboard} icon={faClipboard}/>\r\n            <Icon className=\"navbar__toggle\" onClick={onTogglePanel} icon={faList}/>\r\n        </div>\r\n        <div className=\"explore-page__content\">\r\n            <MapContainer\r\n                zoom={4}\r\n                center={center}\r\n                scrollWheelZoom={true}\r\n                className=\"explore-page__map\">\r\n                <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n            <MapHandler\r\n                onAction={onAction}\r\n                geojsonObjects={geojsonObjects}\r\n                center={center}\r\n                bounds={bounds}\r\n            />\r\n            </MapContainer>\r\n            {toggled ? <div className=\"explore-page__panel\">\r\n                <div className=\"explore-page__loader\">\r\n                    <BarLoader speedMultiplier={.5} color={isUploading ? \"white\" : \"transparent\"} width=\"100%\"/>\r\n                </div>\r\n                <div className=\"explore-page__toolbar\">\r\n                </div>\r\n                <div className=\"explore-page__list\">\r\n                    {geojsonObjects.map(pr => <ImportItem\r\n                        key={pr.id}\r\n                        onDelete={onDelete}\r\n                        onExport={onExport}\r\n                        onToggle={onToggle}\r\n                        onShowWarning={onShowWarning}\r\n                        onShowOnMap={onShowOnMap}\r\n                        onShowGeojson={onShowGeojson}\r\n                        {...pr} />)}\r\n                </div>\r\n            </div> : null}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default ExplorePage;\r\n","import { faEye } from '@fortawesome/free-regular-svg-icons';\r\nimport { faList, faPen } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { baseUrl } from 'appConstants';\r\nimport { FunctionComponent, memo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './style.scss';\r\n\r\nconst menuItems = [\r\n    {\r\n        icon: faList,\r\n        text: \"List of countries\",\r\n        link: \"/countries\"\r\n    },\r\n    {\r\n        icon: faList,\r\n        text: \"List of capitals\",\r\n        link: \"/capitals\"\r\n    },\r\n    {\r\n        icon: faPen,\r\n        text: \"Draw shapes\",\r\n        link: \"/draw\"\r\n    },\r\n    {\r\n        icon: faEye,\r\n        text: \"Explore map\",\r\n        link: \"/explore\"\r\n    },\r\n    {\r\n        icon: faEye,\r\n        text: \"Inspect Geojson\",\r\n        link: \"/inspect-geojson\"\r\n    }\r\n]\r\n\r\nconst Home: FunctionComponent = () => {\r\n    const imageUrl = `${baseUrl}/assets/background.jpg`;\r\n\r\n    return <div className=\"home\">\r\n        <div className=\"background\" style={{\r\n            background: `url(${imageUrl}) center center / cover`\r\n        }}/>\r\n        <div className=\"header\">Explore</div>\r\n        <div className=\"list\">\r\n            {menuItems.map(pr => <Link key={pr.link} to={pr.link} className=\"link\">\r\n                <div><FontAwesomeIcon size=\"2x\" icon={pr.icon}/></div>\r\n                <div className=\"link__text\">{pr.text}</div>\r\n            </Link>)}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default memo(Home);","import { GeoJsonObject, Feature, MultiPolygon } from 'geojson';\r\n\r\nexport const breakDownGeojson = (data: GeoJsonObject) => {\r\n    let result = new Array<GeoJsonObject>();\r\n    let header = \"None\";\r\n\r\n    if(data.type === \"Feature\") {\r\n        header = \"Feature\";\r\n        const feature = data as Feature;\r\n        \r\n        if(feature.geometry.type === \"MultiPolygon\") {\r\n            header += \"_MultiPolygon\";\r\n            const multiPolygonCoordinates = feature.geometry.coordinates;\r\n\r\n            for(const coordinates of multiPolygonCoordinates) {\r\n\r\n                const polygon = {\r\n                    type: \"Polygon\" as const,\r\n                    coordinates\r\n                }\r\n    \r\n                result.push(polygon);\r\n            }\r\n    \r\n            return [header, result] as [string, GeoJsonObject[]];\r\n        }\r\n\r\n        if(feature.geometry.type === \"Polygon\") {\r\n            header += \"_Polygon\";\r\n            const polygonCoordinates = feature.geometry.coordinates;\r\n            \r\n            const polygon = {\r\n                type: \"Polygon\" as const,\r\n                coordinates: polygonCoordinates\r\n            }\r\n\r\n            result.push(polygon);\r\n    \r\n            return [header, result] as [string, GeoJsonObject[]];\r\n        }\r\n    }\r\n\r\n    if(data.type === \"MultiPolygon\") {\r\n        header = \"MultiPolygon\";\r\n        const multiPolygon = data as MultiPolygon;\r\n        for(const coordinates of multiPolygon.coordinates) {\r\n\r\n            const polygon = {\r\n                type: \"Polygon\" as const,\r\n                coordinates\r\n            }\r\n\r\n            result.push(polygon);\r\n        }\r\n\r\n        return [header, result] as [string, GeoJsonObject[]];\r\n    }\r\n\r\n    return [header, result] as [string, GeoJsonObject[]];\r\n}","import { faEye } from '@fortawesome/free-regular-svg-icons';\r\nimport { faList, faPen, faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { baseUrl } from 'appConstants';\r\nimport Breadcrumbs from 'components/Breadcrumbs';\r\nimport Icon from 'components/Icon';\r\nimport { FunctionComponent, memo, useState, MouseEvent } from 'react';\r\nimport { MapContainer, TileLayer } from 'react-leaflet';\r\nimport { GeoJSON } from 'react-leaflet';\r\nimport { GeoJsonObject, Feature, MultiPolygon } from 'geojson';\r\nimport { useEffect } from 'react';\r\nimport { extractGeoObjectFromText, getTextFromBlob, openFileDialog } from 'appUtils';\r\nimport { breakDownGeojson } from './utils';\r\nimport './style.scss';\r\n\r\ntype GeoObjectWithId = {\r\n    id: string;\r\n    name: string;\r\n    selected: boolean;\r\n    data: GeoJsonObject;\r\n}\r\n\r\nconst InspectGeojson: FunctionComponent = () => {\r\n    const [center, setCenter] = useState<[number, number]>([51.505, -0.09]);\r\n    const [{\r\n        header,\r\n        data\r\n    }, setData] = useState<{\r\n        header: string;\r\n        data: GeoObjectWithId[];\r\n    }>({\r\n        header: \"\",\r\n        data: [],\r\n    });\r\n\r\n    useEffect(() => {\r\n     \r\n    }, []);\r\n\r\n    const onUpload = async () => {\r\n        const file = await openFileDialog();\r\n\r\n        if(!file) {\r\n            return false;\r\n        }\r\n\r\n        const text = await getTextFromBlob(file);\r\n        const geojsonObject = extractGeoObjectFromText(text);\r\n\r\n        if(!geojsonObject) {\r\n            return false;\r\n        }\r\n\r\n        const [header, result] = breakDownGeojson(geojsonObject);\r\n\r\n        const data = result.map((data, index) => {\r\n            return {\r\n                id: (Date.now() + index).toString(),\r\n                name: `${data.type}_${index + 1}`,\r\n                selected: false,\r\n                data,\r\n            }\r\n        });\r\n\r\n        setData({header, data});\r\n    }\r\n\r\n    const onAllSelect = () => {\r\n        setData(({header, data}) => {\r\n            const newState = data.map(pr => ({...pr, selected: true}));\r\n\r\n            return {\r\n                header,\r\n                data: newState,\r\n            };\r\n        })\r\n    }\r\n\r\n    const onSelect = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        setData(({header, data}) => {\r\n            const newState = data.map(pr => ({...pr}));\r\n\r\n            for(const it of newState.filter(pr => pr.selected)) {\r\n                it.selected = false;\r\n            }\r\n\r\n            const item = newState.find(pr => pr.id === id)!;\r\n            item.selected = !item.selected;\r\n\r\n            return {\r\n                header,\r\n                data: newState,\r\n            };\r\n        })\r\n    }\r\n\r\n    return <main className=\"inspect-geojson\">\r\n        <nav className=\"inspect-geojson__topBar\">\r\n            <Breadcrumbs/>\r\n        </nav>\r\n        <div className=\"inspect-geojson__container\">\r\n            <div className=\"inspect-geojson__panel\">\r\n                <nav className=\"inspect-geojson__panelTopBar\">\r\n                    <Icon className=\"navbar__upload\" onClick={onUpload} icon={faUpload}/>\r\n                </nav>\r\n                <div className=\"inspect-geojson__content\">\r\n                    <div onClick={onAllSelect} className=\"inspect-geojson__header\">{header}</div>\r\n                    {data.map(pr => <div\r\n                        data-id={pr.id}\r\n                        onClick={onSelect}\r\n                        className={`inspect-geojson__item ${pr.selected ? \"inspect-geojson__item--selected\": \"\"}`}\r\n                        key={pr.id}>{pr.name}</div>)}\r\n                </div>\r\n            </div>\r\n            <div className=\"inspect-geojson__view\">\r\n                <MapContainer\r\n                    zoom={4}\r\n                    center={center}\r\n                    scrollWheelZoom={true}\r\n                    className=\"explore-page__map\">\r\n                    <TileLayer\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    {data.map(pr => <GeoJSON\r\n                        key={pr.id}\r\n                        style={{\r\n                            color: pr.selected ? \"blue\" : \"gray\",\r\n                        }}\r\n                        data={pr.data} />)}\r\n                </MapContainer>\r\n            </div>\r\n        </div>\r\n    </main>\r\n}\r\n\r\nexport default memo(InspectGeojson);","export type Country = {\r\n    id: string;\r\n    type: \"country\";\r\n    countryCenter: [number, number];\r\n    fullName: string;\r\n    capital: string;\r\n    capitalCenter?: [number, number];\r\n    shortName: string;\r\n    iso3166a2: string;\r\n    iso3166a3: string;\r\n    thumbnailUrl: string;\r\n    flagUrl: string;\r\n    search: string;\r\n    zoom: number;\r\n    area: number;\r\n    regions: number;\r\n    neigboursCount: number;\r\n    tags: string[];\r\n}\r\n\r\nexport type TerritoryWithCapital = {\r\n    type: \"british-overseas-territory\" \r\n        | \"unincorporated-territory-usa\" \r\n        | \"crown-dependency\" \r\n        | \"disputed-territories\" \r\n        | \"autonomous-region-of-portugal\" \r\n        | \"france-overseas-territory\"\r\n        | \"constituent country\";\r\n    id: string;\r\n    fullName: string;\r\n    capital: string;\r\n    flagUrl?: string;\r\n    search: string;\r\n}\r\n\r\nexport type Continent = {\r\n    id: string;\r\n    type: \"continent\";\r\n    fullName: string;\r\n    search: string;\r\n}\r\n\r\nexport type GeoObject = Country | TerritoryWithCapital | Continent;\r\n\r\nexport const GeoObjectTypeMap = {\r\n    \"british-overseas-territory\": \"British overseas territory\",\r\n    \"unincorporated-territory-usa\": \"Unincorporated territories of the United States\",\r\n    \"crown-dependency\": \"Crown dependency\",\r\n    \"disputed-territories\": \"Disputed territories\",\r\n    \"autonomous-region-of-portugal\" : \"Autonomous egion of Portugal\",\r\n    \"constituent country\" : \"Constituent country\",\r\n    \"france-overseas-territory\" : \"France overseas territory\",\r\n    \"country\" : \"Country\"\r\n} as const;","import { FunctionComponent, MouseEvent } from 'react';\r\nimport { TerritoryWithCapital, GeoObjectTypeMap } from \"models/GeoObject\";\r\nimport { baseUrl } from 'appConstants';\r\nimport './item.scss';\r\n\r\ntype Props = TerritoryWithCapital & {\r\n    onClick(event: MouseEvent<HTMLDivElement>): void;\r\n    toggled: boolean;\r\n};\r\n\r\nconst Item: FunctionComponent<Props> = ({\r\n    id,\r\n    fullName,\r\n    capital,\r\n    flagUrl,\r\n    type,\r\n    onClick,\r\n    toggled,\r\n}) => {\r\n   \r\n    return <div data-id={id} className={`item`} onClick={onClick}>\r\n        <div className=\"item__row\">\r\n            <div className=\"item__column\">{fullName}</div>\r\n            <div className=\"item__column\">{capital}</div>\r\n            <div className=\"item__column\">{GeoObjectTypeMap[type]}</div>\r\n            <div className=\"item__column\">\r\n            <div className=\"item__flag\" style={{\r\n                    background: `url(${baseUrl + flagUrl}) center center / cover`\r\n                }}/>\r\n            </div>\r\n        </div>\r\n        {toggled ? <div className=\"item__details\">\r\n            <div className=\"item__bottom\">\r\n                \r\n            </div>\r\n        </div> : null}\r\n    </div>;\r\n}\r\n\r\n\r\nexport default Item;\r\n","import { MouseEvent, ChangeEvent, FunctionComponent } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { getCapitals, getCountries } from 'api';\r\nimport { TerritoryWithCapital } from \"models/GeoObject\";\r\nimport Item from './Item';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport Breadcrumbs from 'components/Breadcrumbs';\r\nimport './index.scss';\r\n\r\ntype State = {\r\n    items: (TerritoryWithCapital & { toggled?: boolean })[];\r\n    isLoading: boolean;\r\n    hasError: boolean;\r\n}\r\n\r\nconst Capitals: FunctionComponent = () => {\r\n    const [value, setValue] = useState(\"\");\r\n    const [state, setState] = useState<State>({\r\n        items: [],\r\n        isLoading: true,\r\n        hasError: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        (async () => {\r\n            try {\r\n                const items = await getCapitals({\r\n                    pageSize: 25,\r\n                    phrase: value.toLowerCase(),\r\n                });\r\n\r\n                setState({\r\n                    items,\r\n                    isLoading: false,\r\n                    hasError: false,\r\n                });\r\n            } catch (error) {\r\n                setState({\r\n                    items: [],\r\n                    hasError: true,\r\n                    isLoading: false,\r\n                });\r\n            }\r\n        })();\r\n        \r\n    }, [value])\r\n\r\n    const onItemClick = (event: MouseEvent<HTMLDivElement>) => {\r\n        const { id } = event.currentTarget.dataset;\r\n        setState(state => ({\r\n            ...state,\r\n            items: state.items.map(pr => ({...pr, toggled: pr.id === id ? !pr.toggled : false}))\r\n        }));\r\n    }\r\n\r\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.currentTarget.value;\r\n        setValue(value);\r\n    }\r\n\r\n    return <div className={`capitals-page`}>\r\n        <Breadcrumbs/>\r\n        <div className=\"search\">\r\n            <div className=\"search__icon\">\r\n                <FontAwesomeIcon icon={faSearch}/>\r\n            </div>\r\n            <input\r\n                className={`search__input`}\r\n                value={value}\r\n                onChange={onChange}\r\n                placeholder=\"Search...\"\r\n                type=\"text\"/>\r\n        </div>\r\n        <div>\r\n            <div className=\"table__headers\">\r\n                <div className=\"table__header\">Territory</div>\r\n                <div className=\"table__header\">Capital</div>\r\n                <div className=\"table__header\">Type</div>\r\n                <div className=\"table__header\">Flag</div>\r\n            </div>\r\n            {state.items.map(pr => <Item\r\n                toggled={pr.toggled || false}\r\n                onClick={onItemClick}\r\n                key={pr.id}\r\n                {...pr}/>)}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\n\r\nexport default Capitals;\r\n","import { FunctionComponent, useState } from 'react';\nimport CountryPage from 'components/CountryPage';\nimport Countries from 'components/Countries';\nimport Toolbar from 'components/Toolbar';\nimport { Route, Switch } from 'react-router-dom';\nimport SearchGeoObjectsDialog from 'components/SearchGeoObjectsDialog';\nimport DrawPage from 'components/DrawPage';\nimport ExplorePage from 'components/ExplorePage';\nimport { NotificationContainer } from 'react-notifications';\n\nimport './app.scss';\nimport WorldPage from 'components/WorldPage';\nimport Home from 'components/Home';\nimport InspectGeojson from 'components/InspectGeojson';\nimport Capitals from 'components/Capitals';\n\nconst App: FunctionComponent = () => {\n    const [isShowing, setShow] = useState(false);\n    const onSearch = () => setShow(true);\n    const onHide = () => setShow(false);\n\n    return <div className=\"app\">\n        <Toolbar onSearch={onSearch} />\n        <SearchGeoObjectsDialog\n            onHide={onHide}\n            onClick={onHide}\n            isShowing={isShowing}/>\n        <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route exact path=\"/explore\" component={ExplorePage}/>\n            <Route exact path=\"/draw\" component={DrawPage}/>\n            <Route exact path=\"/country/:iso3166a2\" component={CountryPage}/>\n            <Route exact path=\"/country/:iso3166a2/neighbours\" component={CountryPage}/>\n            <Route exact path=\"/countries\" component={Countries}/>\n            <Route exact path=\"/capitals\" component={Capitals}/>\n            <Route exact path=\"/inspect-geojson\" component={InspectGeojson}/>\n        </Switch>\n        <NotificationContainer/>\n    </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {\n    HashRouter as Router,\n} from \"react-router-dom\";\n\nimport './index.scss';\nimport 'react-notifications/lib/notifications.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}